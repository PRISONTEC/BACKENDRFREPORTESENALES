// MOYOBAMBA
var numeroCabecera = '42492419',
        sufijoSalonEquipos = '201',
        prefijoCarcel = '128',
        mensajeInformacionGeneral = null,
       //mensajeInformacionGeneral = 'visitasRecargas',
        codigoArea = '42';

var parameters = {
  "nombreEP": "MoyobambaLocal",
  "trunks": {
    "telefonica": {
      "id":"HuachoLocal",
      "idTroncal": 6,
      "ip": "192.168.155.5",
      "idRemoto": "MoyobambaLocal"
    },
    "bitel": {
      "id": "Bitels1",
      "idTroncal": 10
    }
  },
  "asterisk": {
    "ipServer": "127.0.0.1","port": 5068,"uri": "/ari/events?api_key=rifer:papillon&app=viva-pasto"
  },
  "monitor": {
    "ipServer": "192.168.159.5","port": 5059,"uri": "/mon?idClient=MoyobambaLocal"
  },
  "paths": [
        {"ipServer":"172.16.10.2","port":5070,"uri":"/path?idClient=128-128-1"},
        {"ipServer":"192.168.150.5","port":5081,"uri":"/path?idClient=128-101-1"},
        {"ipServer":"192.168.151.5","port":5081,"uri":"/path?idClient=128-102-1"},
        {"ipServer":"192.168.152.5","port":5081,"uri":"/path?idClient=128-103-1"},
        {"ipServer":"192.168.153.5","port":5081,"uri":"/path?idClient=128-104-1"},
        {"ipServer":"192.168.154.5","port":5081,"uri":"/path?idClient=128-105-1"},
        {"ipServer":"192.168.155.5","port":5081,"uri":"/path?idClient=128-106-1"},
        {"ipServer":"192.168.156.5","port":5081,"uri":"/path?idClient=128-107-1"},
        {"ipServer":"192.168.157.5","port":5081,"uri":"/path?idClient=128-108-1"},
        {"ipServer":"192.168.158.5","port":5081,"uri":"/path?idClient=128-110-1"},
        {"ipServer":"192.168.163.5","port":5081,"uri":"/path?idClient=128-115-1"},
        {"ipServer":"192.168.164.5","port":5081,"uri":"/path?idClient=128-116-1"},
    {"ipServer":"192.168.165.5","port":5081,"uri":"/path?idClient=128-117-1"},
    {"ipServer":"192.168.166.5","port":5081,"uri":"/path?idClient=128-118-1"},
    {"ipServer":"192.168.167.5","port":5081,"uri":"/path?idClient=128-119-1"},
    {"ipServer":"192.168.168.5","port":5081,"uri":"/path?idClient=128-120-1"},
    {"ipServer":"192.168.169.5","port":5081,"uri":"/path?idClient=128-121-1"},
    {"ipServer":"192.168.170.5","port":5081,"uri":"/path?idClient=128-122-1"},
    {"ipServer":"192.168.171.5","port":5081,"uri":"/path?idClient=128-123-1"},
    {"ipServer":"192.168.172.5","port":5081,"uri":"/path?idClient=128-124-1"},
    {"ipServer":"10.19.10.2","port":5081,"uri":"/path?idClient=128-128-2"},
    {"ipServer":"192.168.150.5","port":4081,"uri":"/path?idClient=128-101-2"},
    {"ipServer":"192.168.151.5","port":4081,"uri":"/path?idClient=128-102-2"},
    {"ipServer":"192.168.152.5","port":4081,"uri":"/path?idClient=128-103-2"},
    {"ipServer":"192.168.153.5","port":4081,"uri":"/path?idClient=128-104-2"},
    {"ipServer":"192.168.154.5","port":4081,"uri":"/path?idClient=128-105-2"},
    {"ipServer":"192.168.155.5","port":4081,"uri":"/path?idClient=128-106-2"},
    {"ipServer":"192.168.156.5","port":4081,"uri":"/path?idClient=128-107-2"},
    {"ipServer":"192.168.157.5","port":4081,"uri":"/path?idClient=128-108-2"},
    {"ipServer":"192.168.158.5","port":4081,"uri":"/path?idClient=128-110-2"},
    {"ipServer":"192.168.163.5","port":4081,"uri":"/path?idClient=128-115-2"},
    {"ipServer":"192.168.164.5","port":4081,"uri":"/path?idClient=128-116-2"},
    {"ipServer":"192.168.165.5","port":4081,"uri":"/path?idClient=128-117-2"},
    {"ipServer":"192.168.166.5","port":4081,"uri":"/path?idClient=128-118-2"},
    {"ipServer":"192.168.167.5","port":4081,"uri":"/path?idClient=128-119-2"},
    {"ipServer":"192.168.168.5","port":4081,"uri":"/path?idClient=128-120-2"},
    {"ipServer":"192.168.169.5","port":4081,"uri":"/path?idClient=128-121-2"},
      {"ipServer":"192.168.170.5","port":4081,"uri":"/path?idClient=128-122-2"},
        {"ipServer":"192.168.171.5","port":4081,"uri":"/path?idClient=128-123-2"},
        {"ipServer":"192.168.172.5","port":4081,"uri":"/path?idClient=128-124-2"}
  ],
  "database": {
    "uri": "/bdd?idClient=MoyobambaLocal",
    "mainServer": [
      {
        "ipServer": "192.168.159.5",
        "port": 5075
      }
    ],
    "failoverServer": null,
    "ffStop": "stopDatabase",
    "ffRestart": "restartDatabase"
  }
};

var tarifas = {
    "fijoLocal": { "resultado": "OK", "mensaje": "", "datos": { "idClasificacion": 1, "tarifa": 0.077, "idOperador": 1 } },
    "fijoNacional": { "resultado": "OK", "mensaje": "", "datos": { "idClasificacion": 3, "tarifa": 0.19, "idOperador": 1 } },
    "celular": { "resultado": "OK", "mensaje": "", "datos": { "idClasificacion": 2, "tarifa": 0.20, "idOperador": 1 } },
    "gratuita": { "resultado": "OK", "mensaje": "", "datos": { "idClasificacion": 3, "tarifa": 0, "idOperador": 1 } },
    "marcacionInvalida": { "resultado": "KO", "mensaje": "3" },
    "numeroRestringido": { "resultado": "KO", "mensaje": "4" },
    "llamadaEntrante": { "resultado": "OK", "mensaje": "", "datos": { "idClasificacion": 0, "tarifa": 0, "idOperador": 1 } }
};

// Tipos de estado de pines
var PIN_USADO = 1,
    PIN_ANULADO = 2,
    PIN_INVALIDO = 3;

// Tipos de llamadas
var LD_NACIONAL = 1,
    LD_INTERNACIONAL = 2,
    NUMERO_INVALIDO = 3,
    NUMERO_RESTRINGIDO = 4;

// Operadores
var LDI_TELEFONICA = 1,
    LDI_BITEL = 3,
    LDI_TMT = 6,
    LDI_TMT2 = 7;

// Tipos de usuarios
var TIPO_INTERNO = 3,
    TIPO_INPE = 4,
    TIPO_TECNICO = 11;

// Tipos de recargas
var Recargas = {
    VENTA: 1,
    BCP: 3,
    RED_DIGITAL: 6,
    INTERNET: 8,
    DEVOLUCION: 9,
    CORTESIA: 10
}

// Variables para definir nombre de d√≠as y meses
var meses = ['/ivr/enero', '/ivr/febrero', '/ivr/marzo', '/ivr/abril', '/ivr/mayo', '/ivr/junio',
    '/ivr/julio', '/ivr/agosto', '/ivr/septiembre', '/ivr/octubre', '/ivr/noviembre', '/ivr/diciembre'],
    dias = ['/ivr/domingo', '/ivr/lunes', '/ivr/martes', '/ivr/miercoles', '/ivr/jueves', '/ivr/viernes', '/ivr/sabado'];

var ChannelPool = Java.type("co.globalcircuit.papillon.pools.ChannelPool");
var directorioAchatContactos = '/home/Grabaciones/Mensajes/Contactos';
var AsteriskAri = Java.type("co.globalcircuit.papillon.AsteriskARI");

// Para el modulo SARA
var Anexos = [
    [1, 180]
];

var anexosValidos = [];

// numeros de Telefonos que los obligamos a salir por su troncal de Entel .. pinche Bitel y su lista negra.. 
//numeroEntel = ['930616915', '930779553', '930395571'];
numeroEntel = ['926108804'];

// Internos a los que se les permite el uso del modulo Achat
permiteAchat = [];

function readParameters() {
    return JSON.stringify(parameters);
}

function readModulos() {
    return JSON.stringify(Modulos);
}

function updateObject(source, key, value, canal) {
    source[key] = value;
    canal.variables = JSON.stringify(source);
}

function tocarMensaje(canal, mensaje, tocarDesde, numeroBytes, pararPlaybackAlPulsarTecla) {
    canal.inicializarTocarMensaje(mensaje, tocarDesde, numeroBytes, pararPlaybackAlPulsarTecla);
}

function consultaBaseDeDatos(canal, fuenteDatos, mensajeMientrasLlama, uri, parametros,
    attachment, deleteAttachment,
    tiempoEspera, numeroIntentos, continuaSiHayCuelgue) {
    canal.inicializarConsultaBdD(fuenteDatos, mensajeMientrasLlama, uri, parametros,
        attachment, deleteAttachment,
        tiempoEspera, 1, continuaSiHayCuelgue);
}

function solicitarDatos(canal, entradasValidas, pararToquePrimerDigito, numeroDigitos, numeroIntentos,
    teclaInterrumpio, mensajeSolicitud, mensajeReintento, mensajeFalla,
    tiempoEsperaPrimerDigito, tiempoEntreDigitos, terminarSiFalla) {
    canal.inicializarSolicitudInformacion(entradasValidas, pararToquePrimerDigito, numeroDigitos, numeroIntentos,
        teclaInterrumpio, mensajeSolicitud, mensajeReintento, mensajeFalla,
        tiempoEsperaPrimerDigito, tiempoEntreDigitos, true);
}

/*
   name: string - (required) Recording's filename
   maxDurationSeconds: int - Maximum duration of the recording, in seconds. 0 for no limit
   maxSilenceSeconds: int - Maximum duration of silence, in seconds. 0 for no limit
   ifExists: string - Action to take if a recording with the same name already exists.
      Default: fail
      Allowed values: fail, overwrite, append
   terminateOn: string - DTMF input to terminate recording
      Default: none
      Allowed values: none, any, *, #
*/
function grabarMensaje(canal, name, maxDurationSeconds, maxSilenceSeconds, ifExists, terminateOn, nuevoEstado) {
    canal.initializeRecordMessage(name, maxDurationSeconds, maxSilenceSeconds, ifExists, terminateOn);
    canal.estadoAplicacion = nuevoEstado;
}

var anexosBuzonVoz = ['128201','128001', '128002', '128003', '128015', '128016', '128017', '128018', '128019', '128020', '128025', '128026', '128027', '128031', '128032', '128033', '128010', '128011', '128012', '128013', '128014', '128004', '128005', '128006', '128007', '128008', '128009', '128021', '128022', '128023', '128024', '128028', '128029', '128030', '1238037', '128038', '128039', '128040', '128041', '128042', '128043', '128034', '128035', '128036'];

function llamarDestino(canal, destino, tiempoRingback, primerRingback,
    mensajeMientrasLlama, mensajeInicio, mensajeFalloLlamada,
    audioBeep, audioDobleBeep,
    secsForBeep, tiempo, generaCobro) {
    if (anexosBuzonVoz.indexOf(canal.numeroExtension) < 0) {
        canal.inicializarLlamar(destino, tiempoRingback, 
            primerRingback, mensajeMientrasLlama, mensajeInicio, mensajeFalloLlamada,
            audioBeep, audioDobleBeep,
            secsForBeep, tiempo, generaCobro);
    } else {
        // timeout para esperar que se pulse un DTMF durante la llamada 
		// por defecto si no se declara es 10 seg..
		canal.timeoutWaitDTMFinCALL = 10;
		canal.inicializarLlamarBuzonVoz(destino, tiempoRingback, 
			primerRingback, mensajeMientrasLlama, mensajeInicio, mensajeFalloLlamada,
			audioBeep, audioDobleBeep,
			secsForBeep, tiempo, generaCobro);
    }
}

function llamarDestinoRapido(canal, destino, tiempoRingback,
	primerRingback, mensajeMientrasLlama, mensajeInicio, mensajeFalloLlamada,
	audioBeep, audioDobleBeep,
	secsForBeep, tiempo, generaCobro) {
		canal.inicializarLlamarRapida(destino, tiempoRingback, 
			primerRingback, mensajeMientrasLlama, mensajeInicio, mensajeFalloLlamada,
			audioBeep, audioDobleBeep,
			secsForBeep, tiempo, generaCobro);
}

function finalizar(canal, ahora) {
    canal.funcion = 'finalizar';
}

function finalizarTelefonia(canal, ahora) {
    canal.funcion = 'finalizarTelefonia';
}

// Imprimir DTMF
function imprimirDTMF(dtmfMarcado){
    var longPermitidasDTMFMarcado = [9,7,6];
    if(longPermitidasDTMFMarcado.indexOf(dtmfMarcado.length)>=0){
        return true;
    }
    return false;
}

function listToString(lista) {
    // Pasar la lista a una cadena separada por comas (,)
    print('lista', lista);
    var temporal = '';
    lista.forEach(function (item) { if (temporal != '') temporal += ','; temporal += item });
    return temporal;
}

//NUEVO AUDIO
function textoDineroNuevaVoz(valor, prefijo) {
    var soles, centimos;

    // Validaciones b√°sicas...
    if (valor && valor > 0) {
        // Hallar soles y c√©ntimos
        valor = Math.round(1000 * valor) / 1000;
        soles = Math.floor(valor);
        centimos = Math.floor(100 * (valor - soles));
    } else {
        valor = 0;
    }
    if (valor == 0 || (soles == 0 && centimos == 0)) {
        return (prefijo ? [prefijo, '/ivrNewVoice/0', '/ivrNewVoice/soles'] : ['/ivrNewVoice/0', '/ivrNewVoice/soles']);
    }

    // Inicializaciones
    var texto = (prefijo ? [prefijo] : []);

    // Soles...
    if (soles == 1) {
        texto.push('/ivrNewVoice/un', '/ivrNewVoice/sol');
    } else if (soles >= 2 && soles <= 99) {
        texto.push('/ivrNewVoice/' + soles.toString(), '/ivrNewVoice/soles');
    } else if (soles >= 100 && soles <= 999) {
        var centena = Math.floor(soles / 100);
        if (centena == 1) {
            if (soles == 100)
                texto.push('/ivrNewVoice/cien');
            else
                texto.push('/ivrNewVoice/ciento');
        } else if ((centena >= 2 && centena <= 4) || centena == 6 || centena == 8) {
            texto.push('/ivrNewVoice/' + centena, '/ivrNewVoice/cientos');
        } else if (centena == 5) {
            texto.push('/ivrNewVoice/quinientos');
        } else if (centena == 7) {
            texto.push('/ivrNewVoice/setecientos');
        } else {
            texto.push('/ivrNewVoice/novecientos');
        }
        var residuo = soles % 100;
        if (residuo != 0)
            texto.push('/ivrNewVoice/' + residuo.toString());
        texto.push('/ivrNewVoice/soles');
    }

    // C√©ntimos...
    if (centimos == 1) {
        texto.push('/ivrNewVoice/un', '/ivrNewVoice/centimo');
    } else if (centimos > 1) {
        texto.push('/ivrNewVoice/' + centimos.toString(), '/ivrNewVoice/centimos');
    }

    // Retornar...
    return texto;
}
//

function textoDinero(valor, prefijo) {
    var soles, centimos;

    // Validaciones b√°sicas...
    if (valor && valor > 0) {
        // Hallar soles y c√©ntimos
        valor = Math.round(1000 * valor) / 1000;
        soles = Math.floor(valor);
        centimos = Math.floor(100 * (valor - soles));
    } else {
        valor = 0;
    }
    if (valor == 0 || (soles == 0 && centimos == 0)) {
        return (prefijo ? [prefijo, '/ivr/0', '/ivr/soles'] : ['/ivr/0', '/ivr/soles']);
    }

    // Inicializaciones
    var texto = (prefijo ? [prefijo] : []);

    // Soles...
    if (soles == 1) {
        texto.push('/ivr/un', '/ivr/sol');
    } else if (soles >= 2 && soles <= 99) {
        texto.push('/ivr/' + soles.toString(), '/ivr/soles');
    } else if (soles >= 100 && soles <= 999) {
        var centena = Math.floor(soles / 100);
        if (centena == 1) {
            if (soles == 100)
                texto.push('/ivr/cien');
            else
                texto.push('/ivr/ciento');
        } else if ((centena >= 2 && centena <= 4) || centena == 6 || centena == 8) {
            texto.push('/ivr/' + centena, '/ivr/cientos');
        } else if (centena == 5) {
            texto.push('/ivr/quinientos');
        } else if (centena == 7) {
            texto.push('/ivr/setecientos');
        } else {
            texto.push('/ivr/novecientos');
        }
        var residuo = soles % 100;
        if (residuo != 0)
            texto.push('/ivr/' + residuo.toString());
        texto.push('/ivr/soles');
    }

    // C√©ntimos...
    if (centimos == 1) {
        texto.push('/ivr/un', '/ivr/centimo');
    } else if (centimos > 1) {
        texto.push('/ivr/' + centimos.toString(), '/ivr/centimos');
    }

    // Retornar...
    return texto;
}

function textoDineroNuevo(valor, prefijo) {
	var soles, centimos;

	// Validaciones b√°sicas...
	if (valor && valor > 0) {
		// Hallar soles y c√©ntimos
		valor = Math.round(1000 * valor) / 1000;
		soles = Math.floor(valor);
		centimos = Math.floor(100 * (valor - soles));
	} else {
		valor = 0;
	}
	if (valor == 0 || (soles == 0 && centimos == 0)) {
		return (prefijo ? [prefijo, '/chanchita/0', '/chanchita/soles'] : ['/chanchita/0', '/chanchita/soles']);
	}

	// Inicializaciones
	var texto = (prefijo ? [prefijo] : []);

	// Soles...
	if (soles == 1) {
		texto.push('/chanchita/un', '/chanchita/sol');
	} else if (soles >= 2 && soles <= 99) {
		texto.push('/chanchita/' + soles.toString(), '/chanchita/soles');
	} else if (soles >= 100 && soles <= 999) {
		var centena = Math.floor(soles / 100);
		if (centena == 1) {
			if (soles == 100)
				texto.push('/chanchita/cien');
			else
				texto.push('/chanchita/ciento');
		} else if ((centena >= 2 && centena <= 4) || centena == 6 || centena == 8) {
			texto.push('/chanchita/' + centena, '/chanchita/cientos');
		} else if (centena == 5) {
			texto.push('/chanchita/quinientos');
		} else if (centena == 7) {
			texto.push('/chanchita/setecientos');
		} else {
			texto.push('/chanchita/novecientos');
		}
		var residuo = soles % 100;
		if (residuo != 0)
			texto.push('/chanchita/' + residuo.toString());
		texto.push('/chanchita/soles');
	}

	// C√©ntimos...
	if (centimos == 1) {
		texto.push('/chanchita/un', '/chanchita/centimo');
	} else if (centimos > 1) {
		texto.push('/chanchita/' + centimos.toString(), '/chanchita/centimos');
	}

	// Retornar...
	return texto;
}

function textoNumero(valor, numeroDigitos) {
    // Validaciones b√°sicas...
    if (!valor || valor <= 0) return ['/ivr/0'];

    // Inicializaciones
    var texto = [];

    // Se requiere el numero digito a digito ?
    if (numeroDigitos && numeroDigitos == 1) {
        for (var i = 0, n = valor.length; i < n; i++) {
            texto.push('/ivr/' + valor.substr(i, 1));
        }
        return texto;
    }

    // Pasar valor num√©rico a texto
    if (valor >= 1 && valor <= 99) {
        texto.push('/ivr/' + valor.toString());
    } else if (valor >= 100 && valor <= 999) {
        var centena = Math.floor(valor / 100);
        if (centena == 1) {
            if (valor == 100)
                texto.push('/ivr/cien');
            else
                texto.push('/ivr/ciento');
        } else if ((centena >= 2 && centena <= 4) || centena == 6 || centena == 8) {
            texto.push('/ivr/' + centena, '/ivr/cientos');
        } else if (centena == 5) {
            texto.push('/ivr/quinientos');
        } else if (centena == 7) {
            texto.push('/ivr/setecientos');
        } else {
            texto.push('/ivr/novecientos');
        }
        var residuo = valor % 100;
        if (residuo != 0)
            texto.push('/ivr/' + residuo.toString());
    }

    // Retornar...
    return texto;
}

function textoFecha(fechaLong) {
    // Hallar la fecha representada por el epoch (fechaLong)
    var fecha = new Date((fechaLong > 1000000000000 ? fechaLong : 1000 * fechaLong));

    // Retornar...
    return [
        dias[fecha.getDay()],
        '/ivr/' + fecha.getDate().toString(),
        '/ivr/de',
        meses[fecha.getMonth()],
        '/ivr/' + (fecha.getHours() > 12 ? fecha.getHours() - 12 : fecha.getHours()).toString(),
        '/ivr/y',
        '/ivr/' + fecha.getMinutes().toString(),
        '/ivr/' + (fecha.getHours() < 12 ? 'deLaManana' : (fecha.getHours() < 18 ? 'deLaTarde' : 'deLaNoche'))
    ];
}

function textoDosDigitos(numero) {
    return (numero[0].startsWith('0') ? ['/ivr/0', '/ivr/' + numero[1]] : ['/ivr/' + numero]);
}

function textoDosDigitosNuevo(numero) {
    return (numero[0].startsWith('0') ? ['/recargaBIM/0', '/recargaBIM/' + numero[1]] : ['/recargaBIM/' + numero]);
}

function textoTelefono(numero) {
    var n, parte, lista = [];

    // De derecha a izquierda toma de a tres digitos
    while (numero.length >= 3) {
        n = numero.substring(numero.length - 3, numero.length);
        numero = numero.substring(0, numero.length - 3);
        parte = ['/ivr/' + n[0]];
        parte = parte.concat(textoDosDigitos(n.substring(1, 3)));
        lista = parte.concat(lista);
    }
    if (numero.length == 2) {
        lista = textoDosDigitos(numero).concat(lista);
    } else if (numero.length == 1) {
        lista = ['/ivr/' + numero].concat(lista);
    }

    // Retornar...
    return lista;
}

function textoTelefonoNuevo(numero) {
    var n, parte, lista = [];

    // De derecha a izquierda toma de a tres digitos
    while (numero.length >= 3) {
        n = numero.substring(numero.length - 3, numero.length);
        numero = numero.substring(0, numero.length - 3);
        parte = ['/recargaBIM/' + n[0]];
        parte = parte.concat(textoDosDigitosNuevo(n.substring(1, 3)));
        lista = parte.concat(lista);
    }
    if (numero.length == 2) {
        lista = textoDosDigitosNuevo(numero).concat(lista);
    } else if (numero.length == 1) {
        lista = ['/recargaBIM/' + numero].concat(lista);
    }

    // Retornar...
    return lista;
}

function textoRecargas(recargas) {
    var lista = [];

    if (!recargas || recargas.length == 0) {
        return ['/ivr/noTieneRecargas'];
    } else {
        recargas.forEach(function (item) {
            lista.push('/ivr/recargaRealizadaElDia');
            lista = lista.concat(textoFecha(item.fecha));
            lista.push('/ivr/porUnValorDe');
            lista = lista.concat(textoDinero(item.valor));
        });
    }

    // Retornar...
    return lista;
}

function textoRecargasSinConfirmar(recargas) {
    var lista = [];

    lista.push('/ivr/enHoraBuenaElSaldoDeSuCuentaHaAumentado');
    recargas.forEach(function (item) {
        lista.push('/ivr/elDia');
        lista = lista.concat(textoFecha(item.fecha).slice(0, 4));
        if (item.tipo == Recargas.VENTA) {
            lista.push('/ivr/seRealizoUnaRecargaHechaEnElPenalPorUnValorDe');
        } else if (item.tipo == Recargas.BCP) {
            lista.push('/ivr/seRealizoUnaRecargaHechaEnBCPPorUnValorDe');
        } else if (item.tipo == Recargas.RED_DIGITAL) {
            lista.push('/ivr/seRealizoUnaRecargaHechaEnRedDigitalPorUnValorDe');
        } else if (item.tipo == Recargas.INTERNET) {
            lista.push('/ivr/seRealizoUnaRecargaHechaEnInternetPorUnValorDe');
        } else if (item.tipo == Recargas.DEVOLUCION) {
            lista.push('/ivr/seRealizoUnaDevolucionPorUnValorDe');
        } else if (item.tipo == Recargas.CORTESIA) {
            lista.push('/ivr/seRealizoUnaRecargaDeCortesiaPorUnValorDe');
        }
        lista = lista.concat(textoDinero(item.valor));
    });

    // Retornar...
    return lista;
}

function textoLlamadas(llamadas) {
    var lista = [];

    if (!llamadas || llamadas.length == 0) {
        return ['/ivr/noTieneLlamadas'];
    } else {
        llamadas.forEach(function (item) {
            lista.push('/ivr/llamadaRealizadaElDia');
            lista = lista.concat(textoFecha(item.fechaHoraInicio));
            lista.push('/ivr/alNumero');
            lista = lista.concat(textoTelefono(item.numeroDestino));
            lista.push('/ivr/porUnValorDe');
            lista = lista.concat(textoDinero(item.costo));
        });
    }

    // Retornar...
    return lista;
}

function minutos(saldo, tarifaMinuto) {
    if (tarifaMinuto == 0) return 60;
    saldo = Math.round(1000 * saldo) / 1000;
    if (saldo < tarifaMinuto) return 0;
    return Math.floor(saldo / tarifaMinuto);
}

function textoCodigo(numero,path){
    var respuesta = []; 
    while (numero.length > 0) {           
        var par = numero.substring(0,2);
        if(Number(par)>9) {
            respuesta.push(path + par);
        } else if (par.length >= 2) {
            respuesta.push(path + '0');
            respuesta.push(path + par.substring(1,2));
        } else {
            respuesta.push(path + par.substring(0,1));
        }
        numero = numero.substring(2,numero.length); 
    }
    return respuesta;
}

function informarFallaColgar(canal, estadoAplicacion) {
    // KO, tocar mensaje de falla por problemas t√©cnicos
    tocarMensaje(canal, '/ivr/fallaDelSistema', -1, -1, false);

    // Definir estado
    canal.estadoAplicacion = estadoAplicacion;
}

function dateTime(epochMs) {
    var d = new Date(0);
    d.setUTCMilliseconds(epochMs);
    return ('0' + (d.getMonth() + 1)).slice(-2) + ('0' + d.getDate()).slice(-2) + '-' +
        ('0' + d.getHours()).slice(-2) + ('0' + d.getMinutes()).slice(-2) + ('0' + d.getSeconds()).slice(-2);
}
var EstadosFuncionGrabarMensaje = {
    TOCAR_INVITACION_GRABAR: 1,
    GRABAR_MENSAJE_VOZ: 2,
    SELECCIONAR_OPCION: 3,
    SELECCIONANDO_OPCION: 4
}

// Esta funcion solicita la grabacion de un mensaje
// retorna 0: mientras no finaliza
// retorna 1: el archivo se grabo con exito
// retorna 2: el archivo por alguna razon no se grabo
function funcionGrabarMensaje (canal, inicio, variables,
        prompt, name, maxDurationSeconds, maxSilenceSeconds, ifExists, terminateOn)
{
    var continuar = false,
        value = 0;

    if (inicio) {
        // inicializar primer estado de la funcion.
        if (variables.estadoFuncion[variables.nivel + 1]) {
            variables.estadoFuncion[variables.nivel + 1] = EstadosFuncionGrabarMensaje.TOCAR_INVITACION_GRABAR;
        } else {
            variables.estadoFuncion.push(EstadosFuncionGrabarMensaje.TOCAR_INVITACION_GRABAR);
        }
        
        // Otras inicializaciones
        variables.prompt = prompt;
        variables.name = name;
        variables.maxDurationSeconds = maxDurationSeconds;
        variables.maxSilenceSeconds = maxSilenceSeconds;
        variables.ifExists = ifExists;
        variables.terminateOn = terminateOn;
    }
    variables.nivel++;

    do {
        // Inicializar variable para que salga del do en el primer ciclo
        continuar = false;

        switch (variables.estadoFuncion[variables.nivel]) {
            case EstadosFuncionGrabarMensaje.TOCAR_INVITACION_GRABAR:
                // Prompt para grabar
                tocarMensaje(canal, '/achat/' + variables.prompt, -1, -1, false);
                variables.estadoFuncion[variables.nivel] = EstadosFuncionGrabarMensaje.GRABAR_MENSAJE_VOZ;
                break;

            case EstadosFuncionGrabarMensaje.GRABAR_MENSAJE_VOZ:
                variables.inicioGrabacion = Date.now();
                grabarMensaje(canal, variables.name, variables.maxDurationSeconds,
                        variables.maxSilenceSeconds, variables.ifExists, variables.terminateOn);
                variables.estadoFuncion[variables.nivel] = EstadosFuncionGrabarMensaje.SELECCIONAR_OPCION;
                break;

            case EstadosFuncionGrabarMensaje.SELECCIONAR_OPCION:
                variables.FinGrabacion = Date.now();
                solicitarDatos(canal, '2,3,4,5', true, 1, 3,
                        null, '/achat/tocarOpcionesMensajeVoz', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                        10, 5, false);
                variables.estadoFuncion[variables.nivel] = EstadosFuncionGrabarMensaje.SELECCIONANDO_OPCION;
                break;

            case EstadosFuncionGrabarMensaje.SELECCIONANDO_OPCION:
                var idOpcion = -1;
                if (canal.solicitarInformacion.informacionValida()) idOpcion = canal.solicitarInformacion.getInfo();
                if (idOpcion == '2') {
                    // Escuchar grabacion
                    tocarMensaje(canal, '/asterisk/' + variables.name, -1, -1, false);
                    variables.estadoFuncion[variables.nivel] = EstadosFuncionGrabarMensaje.SELECCIONAR_OPCION;
                } else if (idOpcion == '3') {
                    // Volver a grabar
                    variables.estadoFuncion[variables.nivel] = EstadosFuncionGrabarMensaje.TOCAR_INVITACION_GRABAR;
                    continuar = true;
                } else if (idOpcion == '4') {
                    // El usuario ha grabado su mensaje
                    value = 1;
                } else if (idOpcion == '5') {
                    // Cancela la grabacion
                    value = 2;
                } else {
                    // Opcion invalida o problemas seleccionandola...
                    tocarMensaje(canal, '/ivr/opcionInvalida', -1, -1, false);
                    variables.estadoFuncion[variables.nivel] = EstadosFuncionGrabarMensaje.SELECCIONAR_OPCION;
                }
        }
    } while (continuar);

    // Sale de la funcion
    variables.nivel--;
    return value;
}

function armarFechaHoraAchat(epochMilliseconds, variables, tipoTocarFecha) {
    //var fechaHora = new Date(epochMilliseconds),
    var fechaHora = ((tipoTocarFecha == 1) ? new Date(epochMilliseconds) : epochMilliseconds),
        fechaHoraActual = variables.ahora,
        lastEpoch = (variables.lastEpoch ? variables.lastEpoch : 0),
        lista = null;
    
    if (tipoTocarFecha == 1) {
        if (Math.floor(lastEpoch / 86400000) != Math.floor(epochMilliseconds / 86400000)) {
            // Tocar nombre dia, fecha, mes
            lista = [dias[fechaHora.getDay()], '/ivr/' + fechaHora.getDate(),
                '/ivr/de', meses[fechaHora.getMonth()]];
        }

        if (fechaHora.getHours() < 12) {
            if (lista) lista.push('/ivr/' + fechaHora.getHours(), '/ivr/y', '/ivr/' + fechaHora.getMinutes(), '/ivr/am');
            else lista = ['/ivr/' + fechaHora.getHours(), '/ivr/y', '/ivr/' + fechaHora.getMinutes(), '/ivr/am'];
        } else {
            if (fechaHora.getHours() == 12) {
                if (lista) lista.push('/ivr/' + fechaHora.getHours(), '/ivr/y', '/ivr/' + fechaHora.getMinutes(), '/ivr/pm');
                else lista = ['/ivr/' + fechaHora.getHours(), '/ivr/y', '/ivr/' + fechaHora.getMinutes(), '/ivr/pm'];
            } else {
                if (lista) lista.push('/ivr/' + (fechaHora.getHours() - 12), '/ivr/y', '/ivr/' + fechaHora.getMinutes(), '/ivr/pm');
                else lista = ['/ivr/' + (fechaHora.getHours() - 12), '/ivr/y', '/ivr/' + fechaHora.getMinutes(), '/ivr/pm'];
            }
        }
        // Actualizamos ultima fecha tocada
        variables.lastEpoch = epochMilliseconds;
    } else {
        var diasTransc = Math.floor((fechaHoraActual - fechaHora)/86400000);
        var diaActual = new Date(Number(fechaHoraActual));
        var diaDelMensaje = new Date(fechaHora);
        print("Horas: ", variables.ahora,epochMilliseconds,dias);
        if (diasTransc == 0 && (diaActual.getDay() == diaDelMensaje.getDay())) 
            lista = ['/achat/hoy'];
        else if (diasTransc == 0 && (diaActual.getDay() != diaDelMensaje.getDay()) || diasTransc == 1)
            lista = ['/achat/ayer'];
        else if (diasTransc > 1 && diasTransc <= 6)
            lista = ['/achat/hace', '/achat/' + diasTransc, '/achat/dias'];
        else if (diasTransc >= 7 && diasTransc < 15)
            lista = ['/achat/haceUnaSemana'];   
        else if (diasTransc >= 15 && diasTransc < 31) {
            var semanas = Math.floor(diasTransc / 7);
            lista = ['/achat/hace', '/achat/' + semanas, '/achat/semanas'];
        } else if (diasTransc >= 31 && diasTransc < 61) 
            lista = ['/achat/haceUnMes'];
        else if (diasTransc >= 61) {
            var mesesTransc = Math.floor(diasTransc / 30);
            lista = ['/achat/hace', '/achat/' + mesesTransc, '/achat/meses'];
        }
    }
    return lista;
        
}

var EstadosAchatTocarMensajes = {
    CONSULTAR_MENSAJES: 1,
    TOCANDO_FECHAHORA_MENSAJE: 2,
    TOCANDO_MENSAJE: 3,
    ACTUALIZANDO_ESTADO: 4,
    ACTUALIZANDO_ESTADO_BDDLOCAL: 5,
    FIN_FUNCION: 6
}

function funcionAchatTocarMensajes(canal, inicio, variables) {
    var value = 0,
        metaData = variables.metaData;

    if (inicio) {
        // inicializar variables
        variables.inicioMensajaesNuevos = true;
        // inicializar primer estado de la funcion.
        if (variables.estadoFuncion[variables.nivel + 1]) {
            variables.estadoFuncion[variables.nivel + 1] = EstadosAchatTocarMensajes.CONSULTAR_MENSAJES;
        } else {
            variables.estadoFuncion.push(EstadosAchatTocarMensajes.CONSULTAR_MENSAJES);
        }
    }
    variables.nivel++;

    do {
        // Inicializar variable para que salga del do en el primer ciclo
        continuar = false;
        print('funcionAchatTocarMensajes', variables.nivel, JSON.stringify(variables.estadoFuncion));

        switch (variables.estadoFuncion[variables.nivel]) {
            case EstadosAchatTocarMensajes.CONSULTAR_MENSAJES:
                print("Metadata Mensajes:" + metaData.mensajes);
                if (metaData.puntero < metaData.mensajes.length) {
                    if (metaData.mensajes[metaData.puntero][3] == 'recibidoIN') {
                        // Hay mensaje. Verificar si es el primer mensaje nuevo
                        var listaMensajes;
                        if (inicio) {
                            // Se llama la funcion por primera vez
                            // Se toca un mensaje indicando al usuario que inicia el toque de mensajes nuevos
                            listaMensajes = '/achat/susMensajesNuevoSon,';
                            listaMensajes += listToString(armarFechaHoraAchat(metaData.mensajes[metaData.puntero][2], variables, 2));
                            tocarMensaje(canal, listaMensajes, -1, -1, false);  
                        } else { 
                            // Siguientes llamados a la funcion...
                            listaMensajes = listToString(armarFechaHoraAchat(metaData.mensajes[metaData.puntero][2], variables, 2));
                            tocarMensaje(canal, listaMensajes, -1, -1, false);
                        }
                        variables.estadoFuncion[variables.nivel] = EstadosAchatTocarMensajes.TOCANDO_FECHAHORA_MENSAJE;
                    } else {
                        // Siguiente mensaje
                        metaData.puntero++;
                        continuar = true;
                    }
                } else {
                    // No hay mensajes, chaooooo
                    tocarMensaje(canal, (metaData.mensajes.length == 0 ? '/achat/noTieneMensajes' : '/achat/noTieneMensajesNuevos'),
                        -1, -1, false);
                    variables.estadoFuncion[variables.nivel] = EstadosAchatTocarMensajes.FIN_FUNCION;
                }
                break;

            case EstadosAchatTocarMensajes.TOCANDO_FECHAHORA_MENSAJE:
                // Termino de tocar la fecha hora del mensaje. Tocar el mensaje
                tocarMensaje(canal,
                    '/home/Grabaciones/Mensajes/chat_' + variables.idConversacion +
                        ':' + metaData.mensajes[metaData.puntero][0] +
                        ':' + metaData.mensajes[metaData.puntero][1],
                    -1, -1, false);
                variables.estadoFuncion[variables.nivel] = EstadosAchatTocarMensajes.TOCANDO_MENSAJE;
                break;

            case EstadosAchatTocarMensajes.TOCANDO_MENSAJE:
                // Proceder segun el estado del mensaje
                if (metaData.mensajes[metaData.puntero][3] == 'recibidoIN') {
                    // Actualizar estado remotamente
                    metaData.mensajes[metaData.puntero][3] = 'escuchadoIN';
                    var parametros = '{"idMensaje":' + metaData.mensajes[metaData.puntero][4] + ',' +
                        '"idInterno":"' + canal.dni + '",' +
                        '"estado":"ESCUCHADO"}';
                    consultaBaseDeDatos(canal, 0, null, 'achat.telefonia.actualizarEstadoMensaje',
                        parametros, null, false, 3, 5, false);
                    variables.estadoFuncion[variables.nivel] = EstadosAchatTocarMensajes.ACTUALIZANDO_ESTADO;
                } else {
                    // Siguiente mensaje
                    continuar = true;
                    metaData.puntero++;
                    variables.estadoFuncion[variables.nivel] = EstadosAchatTocarMensajes.CONSULTAR_MENSAJES;
                }
                break;

            case EstadosAchatTocarMensajes.ACTUALIZANDO_ESTADO:
                // Actualizar bandera de sincronizacion
                metaData.mensajes[metaData.puntero][5] =
                    (canal.consultaBdD.getInfo() && canal.consultaBdD.getInfo().indexOf('OK') >= 0 ? 1 : 0);
                // Actualizanado el estado del mensaje de entrada en la BdD Local
                var parametros = '{"idMensaje":' + metaData.mensajes[metaData.puntero][4] + ',' +
                        '"estado":"escuchadoIN"}';
                canal.inicializarConsultaLocal(null, 'achat.conversacion.actualizarEstadoMensajes', parametros, 3, 5, false);
                variables.estadoFuncion[variables.nivel] = EstadosAchatTocarMensajes.ACTUALIZANDO_ESTADO_BDDLOCAL;
                break;

            case EstadosAchatTocarMensajes.ACTUALIZANDO_ESTADO_BDDLOCAL:
                print("Respuesta de un update BDDlOCAL: " + canal.consultaLocal.getInfo());
                if (JSON.stringify(canal.consultaLocal.getInfo()).indexOf('OK') < 0) {
                    // no actualizo el estado en la BDD ... cosa muy rara..! 
                    print("No se actualizo el estado en la BDD");
                }
                metaData.puntero++;
                variables.estadoFuncion[variables.nivel] = EstadosAchatTocarMensajes.CONSULTAR_MENSAJES;
                continuar = true;
                break;

            case EstadosAchatTocarMensajes.FIN_FUNCION:
                variables.lastEpoch = 0;
                value = 1;
        }
    } while (continuar);

    // Sale de la funcion (aun no termina)
    variables.nivel--;
    return value;
}

var directorioAchatContactos = '/home/Grabaciones/Mensajes/Contactos';

function armarListaContactos(contactos, contenedor) {
    // Funcion que retorna el indice de cada contacto, el archivo que tiene el audio de cada contacto
    // y menciona la cantidad de mensajes nuevos de dicho contacto (solo si los tiene).
    var listaContactos = [];
    for (i = 0; i < contactos.length; i++) {
        listaContactos =
            listaContactos.concat('/achat/' + (i + 1),
                directorioAchatContactos + '_' + contenedor + ':' +
                contactos[i][0] + ':' + contactos[i][1])
        if (contactos[i][4] > 0) {
            if (contactos[i][4] == 1) 
                listaContactos = listaContactos.concat('/achat/mensaje');
            else if (contactos[i][4] > 1) 
                listaContactos = listaContactos.concat('/achat/tiene', '/achat/' + contactos[i][4], '/achat/mensajes');
        }
        if (contactos[i][5] == 'inactivo') {
            listaContactos = listaContactos.concat('/achat/contactoInactivo');
        } else if (contactos[i][5] == 'sinSaldo') {
            listaContactos = listaContactos.concat('/achat/contactoSinSaldo');
        }
    }
    return listaContactos;
}

var EstadosSeleccionContactoAchat = {
    SINCRONIZAR_CONTACTOS: 1,
    REVISANDO_CONTACTOS: 2,
    SINCRONIZANDO_CONTACTOS: 3,
    CONSULTANDO_METADATA_CONTACTOS: 4,
    SOLICITANDO_CONTACTOS: 5,
    TOCANDO_CONTACTO_SELECCIONADO: 6,
    CONFIRMANDO_CONTACTO_SELECCIONADO: 7,
    FINALIZAR_SELECCION_CONTACTOS: 8
}

var EstadosNavegando = {
    GREETING_CHAT: 1,
    SELECCIONAR_OPCION: 2,
    SELECCIONANDO_OPCION: 3,
    TOCANDO_FECHAHORA_MENSAJE: 4,
    CONVERTIENDO_AUDIO_WAVto3GPP: 5,
    GRABANDO_MENSAJE: 6,
    ADICIONANDO_MENSAJE_CHAT: 7,
    ENVIANDO_MENSAJE: 8
}

function navegarChat(canal, inicio, variables) {
    var value = 0,
        metaData = variables.metaData; 
    if (inicio) {
        // inicializar primer estado de la funcion.
        if (variables.estadoFuncion[variables.nivel + 1]) {
            variables.estadoFuncion[variables.nivel + 1] = EstadosNavegando.GREETING_CHAT;
        } else {
            variables.estadoFuncion.push(EstadosNavegando.GREETING_CHAT);
        }
    }
    variables.nivel++;

    do {
        // Inicializar variable para que salga del do en el primer ciclo
        continuar = false;

        print('navegarChat', variables.nivel, JSON.stringify(variables.estadoFuncion));
        switch (variables.estadoFuncion[variables.nivel]) {
            case EstadosNavegando.GREETING_CHAT:
                print("Contactos: " + variables.metaDataContactos.contactos[variables.idContacto - 1]);
                var contacto = variables.metaDataContactos.contactos[variables.idContacto - 1];
                greetingChat = ['/achat/navegarChat', directorioAchatContactos + '_' + canal.dni + ':' +
                        contacto[0] + ':' + contacto[1]];
                tocarMensaje(canal, greetingChat, -1, -1, true);
                variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION; 
                break;

            case EstadosNavegando.SELECCIONAR_OPCION:
                solicitarDatos(canal, '2,5,8,9,*,#', true, 1, 3,
                    canal.tocarMensaje.teclaInterrumpio, '/achat/vacio', '/achat/ayudaMenu', '/ivr/fallaSolicitud',
                    5, 3, false);
                variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONANDO_OPCION;
                break;

            case EstadosNavegando.SELECCIONANDO_OPCION:
                var idOpcion = -1;
                if (canal.solicitarInformacion.informacionValida()) idOpcion = canal.solicitarInformacion.getInfo();

                if (idOpcion == '2') {
                    // SUBIR UNA POSICION EN LOS MENSAJES
                    if (metaData.puntero == 0) {
                        // No tiene m√°s mensajes antiguos para escuchar
                        tocarMensaje(canal, '/achat/noTieneMensajesAntiguos', -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                        break;
                    }

                    // Si hay mensajes...
                    metaData.puntero--;
                    var listaMensajes = listToString(
                            armarFechaHoraAchat(metaData.mensajes[metaData.puntero][2], variables, 2));

                    if (metaData.mensajes[metaData.puntero][3].endsWith('OUT')) {
                        if (metaData.mensajes[metaData.puntero][3] == 'recibidoOUT') {
                            listaMensajes += ',/achat/RECIBIDO';
                        } else if (metaData.mensajes[metaData.puntero][3] == 'enviadoOUT') {
                            listaMensajes += ',/achat/ENVIADO';
                        } else {
                            listaMensajes += ',/achat/ESCUCHADO';
                        }
                    }

                    listaMensajes += ',/home/Grabaciones/Mensajes/chat_' + variables.idConversacion +
                            ':' + metaData.mensajes[metaData.puntero][0] + 
                            ':' + metaData.mensajes[metaData.puntero][1];

                    // tocamos fecha y mensajes
                    tocarMensaje(canal, listaMensajes, -1, -1, true);
                    variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                } else if (idOpcion == '8') {
                    // BAJAR UNA POSICION EN LOS MENSAJES
                    if (metaData.puntero < metaData.mensajes.length) {
                        if (++metaData.puntero < metaData.mensajes.length) {
                            var listaMensajes = listToString(
                                    armarFechaHoraAchat(metaData.mensajes[metaData.puntero][2], variables, 2));

                            if (metaData.mensajes[metaData.puntero][3].endsWith('OUT')) {
                                if (metaData.mensajes[metaData.puntero][3] == 'recibidoOUT') {
                                    listaMensajes += ',/achat/RECIBIDO';
                                } else if (metaData.mensajes[metaData.puntero][3] == 'enviadoOUT') {
                                    listaMensajes += ',/achat/ENVIADO';
                                } else {
                                    listaMensajes += ',/achat/ESCUCHADO';
                                }
                            }

                            listaMensajes += ',/home/Grabaciones/Mensajes/chat_' + variables.idConversacion +
                                    ':' + metaData.mensajes[metaData.puntero][0] + 
                                    ':' + metaData.mensajes[metaData.puntero][1];

                            // tocamos fecha y mensajes
                            tocarMensaje(canal, listaMensajes, -1, -1, true);
                            variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                        } else {
                            // No tiene m√°s mensajes recientes para escuchar
                            tocarMensaje(canal, '/achat/noTieneMasMensajes', -1, -1, false);
                            variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                        }
                    } else {
                        // No tiene m√°s mensajes recientes para escuchar
                        tocarMensaje(canal, '/achat/noTieneMasMensajes', -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                    }
                } else if (idOpcion == '5') {
                    if (metaData.puntero < metaData.mensajes.length && metaData.puntero >  0) {
                        var listaMensajes = listToString(
                                armarFechaHoraAchat(metaData.mensajes[metaData.puntero][2], variables, 1));
                        tocarMensaje(canal, listaMensajes, -1, -1, true);
                    } else {
                        tocarMensaje(canal, 'noExisteFechaParaEstaPosicionMensaje', -1, -1, true);
                    }
                    variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                } else if (idOpcion == '9') {
                    // Grabar mensaje
                    print("los Contacto son:" + variables.metaDataContactos.contactos[variables.idContacto - 1]);
                    if (variables.metaDataContactos.contactos[variables.idContacto - 1][5] != 'sinSaldo') {
                        variables.nombreGrabacion = variables.idConversacion.toString() + '_' + (new Date).getTime().toString();
                        funcionGrabarMensaje(canal, true, variables,
                            'grabeMensajeVoz',
                            variables.nombreGrabacion,
                            180, 10, 'overwrite', '#');
                        variables.estadoFuncion[variables.nivel] = EstadosNavegando.CONVERTIENDO_AUDIO_WAVto3GPP;
                    } else {
                        tocarMensaje(canal, '/achat/noPuedeDejarMensjcontactoSinSaldo', -1, -1, true);
                        variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                    }
                } else if (idOpcion == '*') {
                    // regresar a seleccionar Contactos
                    value = 1;
                } else if (idOpcion == '#') {
                    tocarMensaje(canal, '/achat/mensajeAyuda', -1, -1, true);
                    variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                } else {
                    tocarMensaje(canal, '/achat/opcionInvalida', -1, -1, false);
                    variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                }
                break;
            
            case EstadosNavegando.CONVERTIENDO_AUDIO_WAVto3GPP:
                var respuesta;
                if ((respuesta = funcionGrabarMensaje(canal, false, variables))) {
                    if (respuesta == 1) {
                        // Convertimos el audio de .wav a 3gpp 
                        var parametros = '{"nombreGrabacion":"' + variables.nombreGrabacion + '"}';
                        
                        print("Parametros para la conversion wav to 3gpp: " + parametros);
                        canal.inicializarConsultaLocal('/achat/enviandoMensaje', 
                                'achat.conversacion.enviandoMensaje', parametros, 10, 3, false);
                        variables.estadoFuncion[variables.nivel] = EstadosNavegando.GRABANDO_MENSAJE;
                    } else {
                        // Se arrepintio
                        variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                        continuar = true;
                    }
                }
                break;

            case EstadosNavegando.GRABANDO_MENSAJE:
                var respuesta;
                if (canal.consultaLocal.getInfo()) {
                    // Envia el mensaje de voz
                    var DuracionGrabacionMin = Math.floor((variables.FinGrabacion - variables.inicioGrabacion)/60000);
                    var DuracionGrabacionSeg = Math.floor((variables.FinGrabacion - variables.inicioGrabacion)/1000);
                    print("AudioDuracion: " +  DuracionGrabacionMin + ":" + DuracionGrabacionSeg);
                    var parametros = '{"idInterno":"' + canal.dni + '",' +
                        '"nombreGrabacion":"' + variables.nombreGrabacion + '",' +
                        '"duracion":' + 5 + ',' +
                        '"fechaHora":' + (new Date).getTime() + ',' +
                        '"idConversacion":' + variables.idConversacion  + '}';
                    adjunto = '/var/spool/asterisk/recording/' + variables.nombreGrabacion + '.3gp';
                    consultaBaseDeDatos(canal, 0, '/achat/enviandoMensaje', 'achat.telefonia.enviarMensaje',
                        parametros, adjunto, false, 10, 2, false);
                    variables.estadoFuncion[variables.nivel] = EstadosNavegando.ADICIONANDO_MENSAJE_CHAT;
                } else {
                    print("Fallo una simple conversion ffmpeg.... Too strange");
                    informarFallaColgar(canal, EstadosNavegando.FINALIZAR_MODULO);
                }
                break;

            case EstadosNavegando.ADICIONANDO_MENSAJE_CHAT:
                // Verificar si hubo respuesta
                var idMensaje;
                if (!canal.consultaBdD.getInfo()) {
                    estadoMensaje = "nuevoOUT";
                    idMensaje = -1;
                } else {
                    estadoMensaje = "enviadoOUT";
                    idMensaje = JSON.parse(canal.consultaBdD.getInfo()).idMensaje;
                }

                // Adicionar mensaje a la conversacion
                var parametros = '{"idConversacion":' + variables.idConversacion + ',' +
                    '"idInterno":"' + canal.dni + '",' + 
                    '"nombreGrabacion":"/var/spool/asterisk/recording/' + variables.nombreGrabacion + '.wav' + '",' +
                    '"directorioChat":"/home/Grabaciones/Mensajes/"' + ',' +
                    '"borrarMensaje":true' + ',' +
                    '"fechaHora":' + (new Date).getTime() + ',' +
                    '"estado":"' + estadoMensaje + '",' +
                    '"idMensaje":' + idMensaje + '}';
                canal.inicializarConsultaLocal((idMensaje == -1) ? '/achat/suMensajeDeVozSeraEnviadoLuego': null, 
                        'achat.conversacion.adicionarMensaje', parametros, 3, 5, false);
                variables.estadoFuncion[variables.nivel] = EstadosNavegando.ENVIANDO_MENSAJE;
                break;

            case EstadosNavegando.ENVIANDO_MENSAJE:
                if (canal.consultaLocal.getInfo()) {
                    // Actualizar metadata
                    print("newMessage: " + JSON.stringify(canal.consultaLocal.getInfo()));
                    metaData.mensajes.push(JSON.parse(canal.consultaLocal.getInfo()).registro);
                    metaData.puntero = metaData.mensajes.length - 1;
                    tocarMensaje(canal, '/achat/suMensajeDeVozHaSidoEnviado', -1, -1, false);
                    //metaData.mensajes[metaData.puntero][5] = 1;
                } else {
                    //metaData.mensajes[metaData.puntero][5] = 0;
                    informarFallaColgar(canal, EstadosNavegando.FINALIZAR_MODULO);
                }
                variables.estadoFuncion[variables.nivel] = EstadosNavegando.SELECCIONAR_OPCION;
                break;
        }
    } while (continuar);

    // Sale de la funcion (aun no termina)
    variables.nivel--;
    return value;
}

function seleccionContactoAchat(canal, inicio, variables) {
    var value = 0,
        metaDataContactos = variables.metaDataContactos;

    if (inicio) {
        // inicializar primer estado de la funcion.
        if (variables.estadoFuncion[variables.nivel + 1]) {
            variables.estadoFuncion[variables.nivel + 1] = EstadosSeleccionContactoAchat.SINCRONIZAR_CONTACTOS;
        } else {
            variables.estadoFuncion.push(EstadosSeleccionContactoAchat.SINCRONIZAR_CONTACTOS);
        }
    }
    variables.nivel++;

    do {
        // Inicializar variable para que salga del do en el primer ciclo
        continuar = false;
        print('seleccionUsuarioAchat', variables.nivel, JSON.stringify(variables.estadoFuncion));
        
        switch (variables.estadoFuncion[variables.nivel]) {
            case EstadosSeleccionContactoAchat.SINCRONIZAR_CONTACTOS:
                // COMANDO DE SINCRONIZACION DE CONTACTOS
                var parametros = '{"idInterno":"' + canal.dni + '"}';
                consultaBaseDeDatos(canal, 0, variables.tocarRingBackUnTono ?  '/achat/ringbackUnTono':'null', 
                        'achat.telefonia.consultarInformacion',
                        parametros, null, false, 3, 5, false);
                //variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.SINCRONIZANDO_CONTACTOS;
                variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.REVISANDO_CONTACTOS;
                break;
            
            case EstadosSeleccionContactoAchat.REVISANDO_CONTACTOS:
                // REVISA SI EXISTEN CONTACTOS NUEVOS Y ACTUALIZAR ESTADO DE LOS CONTACTOS
                
                // Verificar si hubo respuesta
                var parametros;
                if (!canal.consultaBdD.getInfo()) {
                    print("Ojo no hubo respuesta de sincronizaci√≥n de contactos");
                    parametros = Object.create(null);
                } else {
                    parametros = JSON.parse(canal.consultaBdD.getInfo());
                }
                parametros.idInterno = canal.dni;
                print("params leercontactos: ", JSON.stringify(parametros));

                canal.inicializarConsultaLocal(variables.tocarRingBackUnTono ?  '/achat/ringbackUnTono':'null', 
                        'achat.conversacion.revisarContactos', JSON.stringify(parametros), 15, 3, false);
                
                //variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.CONSULTANDO_METADATA_CONTACTOS;
                variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.SINCRONIZANDO_CONTACTOS;
                break;

            case EstadosSeleccionContactoAchat.SINCRONIZANDO_CONTACTOS:
                // Actualizar (si se debe) y leer metadata de contactos
                var parametros;
                if (!canal.consultaLocal.getInfo()) {
                    print("Ojo no hubo respuesta en el proceso de revision de contactos");
                    parametros = Object.create(null);
                } else {
                    parametros = JSON.parse(canal.consultaLocal.getInfo());
                }
                parametros.idInterno = canal.dni;
                parametros.uriWSClient = parameters.database.uri;
                
                canal.inicializarConsultaLocal(variables.tocarRingBackUnTono ?  '/achat/ringbackUnTono':'null', 
                        'achat.conversacion.leerContactos', JSON.stringify(parametros), 15, 3, false);
                variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.CONSULTANDO_METADATA_CONTACTOS;

                break; 

            case EstadosSeleccionContactoAchat.CONSULTANDO_METADATA_CONTACTOS:
                // Verificar si hubo respuesta
                if (!canal.consultaLocal.getInfo()) {
                    variables.idConversacion = -1;
                    continuar = true;
                    variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.FINALIZAR_SELECCION_CONTACTOS;
                    break;
                } else {
                    // Guardar metadata
                    variables.metaDataContactos = JSON.parse(canal.consultaLocal.getInfo());
                    metaDataContactos = variables.metaDataContactos;
                }
                print("metaDataContacto: " + JSON.stringify(metaDataContactos));

                var listaContactos = '/achat/welcomeToAchat,';
                if (metaDataContactos.contactos.length > 0 && metaDataContactos.contactos[0] != null) {
                    listaContactos += '/achat/susContactosSonSeleccioneUno,';
                    listaContactos += armarListaContactos(variables.metaDataContactos.contactos, canal.dni);
                    canal.initializeGetData('', true, -1, 3, null,
                        listaContactos, '/achat/reintentoSolicitarContacto', '/achat/fallaSolicitarContacto',
                        5, 2, true);
                    variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.SOLICITANDO_CONTACTOS;
                } else { 
                    tocarMensaje(canal, '/achat/ustedNoTieneContactos', -1, -1, false);
                    variables.idConversacion = -1;
                    variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.FINALIZAR_SELECCION_CONTACTOS;
                }
                break;

            case EstadosSeleccionContactoAchat.SOLICITANDO_CONTACTOS:
                if (canal.solicitarInformacion.informacionValida2()) {
                    var idContacto = canal.solicitarInformacion.getInfo();
                    variables.idContacto = idContacto;
                    if (idContacto > 0 && idContacto <= metaDataContactos.contactos.length && 
                            metaDataContactos.contactos[idContacto - 1][5] != 'inactivo') {
                        // ALMACENA LA ID DE CONVERSACION DEL CONTACTO ELEGIDO
                        variables.idConversacion = metaDataContactos.contactos[idContacto - 1][2];
                        continuar = true;
                        //variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.FINALIZAR_SELECCION_CONTACTOS;
                        variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.TOCANDO_CONTACTO_SELECCIONADO;
                    } else {
                        tocarMensaje(canal, '/achat/contactoInvalido', -1, -1, false);
                        variables.idConversacion = -1;
                        variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.FINALIZAR_SELECCION_CONTACTOS;
                    }
                } else {
                    tocarMensaje(canal, '/achat/contactoInvalido', -1, -1, false);
                    variables.idConversacion = -1;
                    variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.FINALIZAR_SELECCION_CONTACTOS;
                }
                break;
            
            case EstadosSeleccionContactoAchat.TOCANDO_CONTACTO_SELECCIONADO:
                var contactos = variables.metaDataContactos.contactos;
                var confirmarContactoSeleccionado = '/achat/ustedSeleccionoContacto,';
                confirmarContactoSeleccionado = 
                        confirmarContactoSeleccionado.concat(directorioAchatContactos + '_' + canal.dni + ':' + 
                        contactos[variables.idContacto - 1][0] + ':' + 
                        contactos[variables.idContacto - 1][1]);
                tocarMensaje(canal, confirmarContactoSeleccionado, -1, -1, true);
                variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.CONFIRMANDO_CONTACTO_SELECCIONADO;
                break;
            
            case EstadosSeleccionContactoAchat.CONFIRMANDO_CONTACTO_SELECCIONADO:
                if (canal.tocarMensaje.teclaInterrumpio) {
                    if (canal.tocarMensaje.teclaInterrumpio == '*') {
                        variables.estadoFuncion[variables.nivel] = EstadosSeleccionContactoAchat.SINCRONIZAR_CONTACTOS;
                        // marco * y eligio cambiar de contacto por lo tanto ya no es necesario tocar el ringbackUntono
                        variables.tocarRingBackUnTono = 0;
                        continuar = true;
                        break;
                    } 
                }
            case EstadosSeleccionContactoAchat.FINALIZAR_SELECCION_CONTACTOS:
                if (canal.inicioLlamada == -1 && variables.idConversacion != -1) {
                    canal.inicioLlamada = variables.ahora;
                    canal.achatTimeout = canal.inicioLlamada + (variables.tiempo*60000);
                    print("Inicio LLamada, TimeOut:", canal.inicioLlamada, canal.achatTimeout);
                    ChannelPool.addChannelToList(canal);
                    ChannelPool.listChannels();
                } 
                value = 1;
                break;
        }

    } while (continuar);

    // Sale de la funcion (aun no termina)
    variables.nivel--;
    return value;
}

var EstadosAchat = {
    GREETING_ACHAT: 1,
    OBTENER_ID_CONVERSACION: 2,
    OBTENIENDO_ID_CONVERSACION: 3,
    OBTENER_ID_MENSAJE_SALIDA_CONFIRMAR: 4,
    SINCRONIZAR: 5,
    SINCRONIZANDO: 6,
    ACTUALIZAR_MENSAJES_PENDIENTES: 7,
    CONSULTANDO_METADATA: 8,
    TOCANDO_MENSAJES_ACHAT: 9,
    NAVEGANDO_CHAT: 10,
    FINALIZAR_TELEFONIA: 11,
    TARIFICAR_ACHAT: 12,
    TARIFICANDO_ACHAT: 13,
    FINALIZAR_MODULO: 14
}

function achat(canal, ahora, inicio, idConversacion, tiempo) {
    var continuar,
        variables = null,
        metaData;

    // Verificar si es el inicio del modulo
    if (inicio) {
        // Inicializar variables
        variables = Object.create(null);
        variables.nivel = 0;
        variables.idConversacion = idConversacion;
        variables.tocarRingBackUnTono = 1;
        variables.tiempo = tiempo;

        // Definir m√≥dulo y estado
        canal.modulo = Modulos.ACHAT;
        variables.estadoFuncion = [EstadosAchat.OBTENER_ID_CONVERSACION];
    }

    do {
        // Inicializar variable para que salga del do en el primer ciclo
        continuar = false;

        // Recuperar variables
        if (!inicio) variables = JSON.parse(canal.variables);
        print('achat', variables.nivel, JSON.stringify(variables.estadoFuncion));
        metaData = variables.metaData;
        variables.ahora = ahora; 

        // Verificar si se colg√≥ la llamada
        if (canal.colgoLlamada && !variables.cerrandoChat) {
            variables.cerrandoChat = true;
            variables.estadoFuncion[variables.nivel] = EstadosAchat.FINALIZAR_TELEFONIA;
        }

        // M√°quina de estados
        switch (variables.estadoFuncion[variables.nivel]) {
            case EstadosAchat.OBTENER_ID_CONVERSACION:
                if (!idConversacion) {
                    // llamado a Achatt sin el contacto, lo solicitaremos
                    seleccionContactoAchat(canal, true, variables);
                    variables.estadoFuncion[variables.nivel] = EstadosAchat.OBTENIENDO_ID_CONVERSACION;
                } else {
                    variables.estadoFuncion[variables.nivel] = EstadosAchat.SINCRONIZAR;
                    continuar = true; 
                }
                break;

            case EstadosAchat.OBTENIENDO_ID_CONVERSACION:
                if (seleccionContactoAchat(canal, false, variables)) {
                    print("idCoversacion: " + variables.idConversacion);
                    if (variables.idConversacion != -1) {
                        variables.estadoFuncion[variables.nivel] = EstadosAchat.OBTENER_ID_MENSAJE_SALIDA_CONFIRMAR;
                        continuar = true;
                    } else {
                        // llamada a Achatt con un numero de contacto invalido (-1), finalizamos
                        finalizarTelefonia(canal, ahora);
                        variables.estadoFuncion[variables.nivel] = EstadosAchat.FINALIZAR_MODULO;
                    }
                }
                break;

            case EstadosAchat.OBTENER_ID_MENSAJE_SALIDA_CONFIRMAR:
                // Hallar primer mensaje sin escuchar
                var parametros = '{"idConversacion":' + variables.idConversacion + '}';
                canal.inicializarConsultaLocal(null, 'achat.conversacion.obtenerIdMensajeEnviado', 
                        parametros, 3, 5, false);
                variables.estadoFuncion[variables.nivel] = EstadosAchat.SINCRONIZAR;
                break;

            case EstadosAchat.SINCRONIZAR:
                if (!canal.consultaLocal.getInfo()) {
                    informarFallaColgar(canal, EstadosAchat.FINALIZAR_MODULO);
                    break;
                }
                // guardamos el id del ultimo mensaje que queremos saber su estado
                var idUltimoMensaje = canal.consultaLocal.getInfo();
                if (idUltimoMensaje == "null") idUltimoMensaje = -1;

                // Solicitar informacion de contactos del interno
                var parametros = '{"idConversacion":' + variables.idConversacion + "," +
                        '"idInterno":"' + canal.dni + '",' +
                        '"idUltimoMensaje":' + idUltimoMensaje + '}';
                print("Parametros:" + parametros);

                consultaBaseDeDatos(canal, 0, null, 'achat.telefonia.consultaSincronizacion',
                    parametros, null, false, 3, 5, false);
                variables.estadoFuncion[variables.nivel] = EstadosAchat.SINCRONIZANDO;
                break;

            case EstadosAchat.SINCRONIZANDO:
                // Verificar si hubo respuesta
                if (!canal.consultaBdD.getInfo()) {
                    print("Ojo no hubo respuesta de sincronizaci√≥n de Mensajes");
                    parametros = Object.create(null);
                } else {
                    parametros = JSON.parse(canal.consultaBdD.getInfo());
                }

                // armamos los parametros para consultar el metadata del idConversacion
                parametros.idInterno = canal.dni;
                parametros.uriWSClient = parameters.database.uri;
                parametros.idConversacion = variables.idConversacion;
                print("parametros LeerMensajesPendientes: ", JSON.stringify(parametros));

                // CONSULTAR METADATA
                canal.inicializarConsultaLocal(null, 'achat.conversacion.leerMetadata', 
                        JSON.stringify(parametros), 3, 5, false);
                variables.estadoFuncion[variables.nivel] = EstadosAchat.ACTUALIZAR_MENSAJES_PENDIENTES;
                break;

            case EstadosAchat.ACTUALIZAR_MENSAJES_PENDIENTES:
                if (!canal.consultaLocal.getInfo()) {
                    informarFallaColgar(canal, EstadosAchat.FINALIZAR_MODULO);
                    break;
                } else {
                    // Guardar metadata
                    variables.metaData = JSON.parse(canal.consultaLocal.getInfo());
                    metaData = variables.metaData;
                    variables.mensajesPendientes = JSON.parse(canal.consultaLocal.getInfo()).mensajesPendientes;

                    var parametros = '{"idInterno":"' + canal.dni + '",' +
                            '"mensajes":' + JSON.stringify(variables.mensajesPendientes) + '}'

                    // Respondemos al servidor con el estado de los ids mensajes que el nos pregunto
                    // (que se encuentran en variables.mensajesPendientes)
                    consultaBaseDeDatos(canal, 0, '/achat/updateInformat', 'achat.telefonia.actualizarEstadosMensajes',
                            parametros, null, false, 3, 5, false);
                            variables.estadoFuncion[variables.nivel] = EstadosAchat.CONSULTANDO_METADATA;
                } 
                break;

            case EstadosAchat.CONSULTANDO_METADATA:
                // Verificar si hubo respuesta
                if (!canal.consultaBdD.getInfo()) {
                    print("Ojo, no hubo sincronizacion de Mensajes Pendientes");
                } 
                // Tocar mensajes nuevos (si los hay)
                funcionAchatTocarMensajes(canal, true, variables);
                variables.estadoFuncion[variables.nivel] = EstadosAchat.TOCANDO_MENSAJES_ACHAT;
                break;

            case EstadosAchat.TOCANDO_MENSAJES_ACHAT:
                // Cuando termina de tocar mensajes nuevos, el usuario podra navegar en el chat
                if (funcionAchatTocarMensajes(canal, false, variables)) {
                    navegarChat(canal, true, variables);
                    variables.estadoFuncion[variables.nivel] = EstadosAchat.NAVEGANDO_CHAT;
                }
                break;

            case EstadosAchat.NAVEGANDO_CHAT:
                if (navegarChat(canal, false, variables)) {
                    variables.estadoFuncion[variables.nivel] = EstadosAchat.OBTENER_ID_CONVERSACION;
                    variables.idConversacion = null;
                    // marc√≥ * por lo tanto eligio cambiar de contacto y ya no es necesario tocar el ringbackUntono
                    variables.tocarRingBackUnTono = 0;
                    continuar = true;
                }
                break;

            case EstadosAchat.FINALIZAR_TELEFONIA:
                finalizarTelefonia(canal, ahora);
                variables.estadoFuncion[variables.nivel] = EstadosAchat.TARIFICAR_ACHAT;
                break;

            case EstadosAchat.TARIFICAR_ACHAT:
                var parametros = 
                '{"idInterno":"' + canal.dni + '",' +
                '"extensionTelefono":"' + canal.numeroExtension + '",' +
                '"numeroDestino":"355355",' +
                '"fechaHoraInicio":' + canal.inicioLlamada + ',' +
                '"fechaHoraFin":' + canal.finLlamada + ',' +
                '"idClasificacion":1,' +
                '"idTroncal":100,' +
                '"tarifa":"' + tarifas.fijoLocal.datos.tarifa + '"}';

                consultaBaseDeDatos(canal, 0, null, 'telefonia.registrarLlamadaAchat',
                        parametros, null, false, 3, 5, true);
                variables.estadoFuncion[variables.nivel] = EstadosAchat.TARIFICANDO_ACHAT;
                break;

            case EstadosAchat.TARIFICANDO_ACHAT:
                if (!canal.consultaBdD.getInfo()) {
                    print("Ojo, no hubo respuesta para la tarificaci√≥n...");
                }
                print("Respuesta de Tarifaci√≥n: " + canal.consultaBdD.getInfo());   
            case EstadosAchat.FINALIZAR_MODULO:
                finalizar(canal, ahora);
        }

        // Guardar las variables en el canal
        canal.variables = JSON.stringify(variables);
    } while (continuar);
}

// Estados para el m√≥dulo de atenci√≥n al cliente (*123)
var AtencionCliente = {
    SOLICITANDO_AGENTE: 1,
    CONSULTANDO_TRONCAL: 2,
    TOCANDO_FALLO_SOLICITUD_AGENTE: 3,
    TOCANDO_NO_HAY_AGENTES: 4,
    LLAMANDO: 5,
    FINALIZAR: 6
};

function atencionCliente(canal, ahora, inicio) {
    // Verificar si es el inicio
    if (inicio) {
        // Definir m√≥dulo
        canal.modulo = Modulos.ATENCION_CLIENTE;

        // Verificar horario (dia = 6: sabado, dia = 0: domingo, dia =  1 - 5: lunes - viernes)
        var dia = (new Date).getDay();
        var ms = (ahora - 5 * 3600000) % 86400000;
        var datosUsuario = JSON.parse(canal.datosUsuario);
        
        if (datosUsuario == null) {
               datosUsuario = Object.create(null);
            }

        datosUsuario.isTelefonicaUp = false;
        datosUsuario.isBitelUp = false;
        datosUsuario.codigoArea = codigoArea;
        datosUsuario.destino = canal.numeroDestino;
        datosUsuario.prefijoPenal = prefijoCarcel;
        canal.datosUsuario = JSON.stringify(datosUsuario);
            
        if (canal.numeroDestino.startsWith('*123')) {
            // ATENCION AL CLIENTE 
            if ((dia == 6 && 8 * 3600000 <= ms && ms <= 17 * 3600000) ||
                (dia == 0 && 8 * 3600000 <= ms && ms <= 18 * 3600000) ||
                (0 < dia && dia < 6 && 7 * 3600000 <= ms && ms <= 18 * 3600000)) {
                var variables = Object.create(null),
                    audios = '|';
                    for (var i = 1; i < 6; i++) {
                        audios = audios + '/ivr/moht' + ('00' + (Math.floor(Math.random() * 13) + 1)).substr(-2, 2) + '|';
                    }
                    canal.recordCall = true;
                    canal.recordingName = dateTime(ahora) + '_' + canal.dni;
                // Llamar e inicializar estado
                /*consultaBaseDeDatos(canal, 0, null,
                    'telefonia.getTrunk',
                    canal.datosUsuario,
                    null, false, 3, 5, false);
                canal.estadoAplicacion = AtencionCliente.CONSULTANDO_TRONCAL;*/
                canal.inicializarLlamarACD("IAX2/MoyobambaEntel/*123@IAX_ENTEL_176", '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
		//canal.inicializarLlamarACD("PJSIP/*123@Local156", '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
                canal.estadoAplicacion = AtencionCliente.LLAMANDO;
                return;
            } else {
                tocarMensaje(canal, '/ivr/llamadaFueraDeHorarioCallCenter', -1, -1, false);
                canal.estadoAplicacion = AtencionCliente.FINALIZAR; 
                return;
            }
        } else if (canal.numeroDestino.startsWith('*125')) {
            // ATENCION PARA RECARGA POR LISTAS (AZULITOS)
            var datosUsuario = JSON.parse(canal.datosUsuario);
            print("Validando Bandera: " + datosUsuario.empadronar);

            var variables = Object.create(null),
                                        audios = '|';
                        for (var i = 1; i < 6; i++) {
                              audios = audios + '/ivr/moht' + ('00' + (Math.floor(Math.random() * 13) + 1)).substr(-2, 2) + '|';
                        }

            if (((dia >= 1 && dia <= 6) && 6 * 3600000 <= ms && ms <= 18 * 3600000 && !datosUsuario.empadronar)
            || ((dia == 1 || dia == 5) && datosUsuario.empadronar && 14 * 3600000 <= ms && ms <= 17 * 3600000)
            || (dia > 1 && dia < 5) && datosUsuario.empadronar && ((7 * 3600000 <= ms && ms <= 13 * 3600000) 
            || (14 * 3600000 <= ms && ms <= 17 * 3600000))) {
                canal.recordCall = true;
                canal.recordingName = dateTime(ahora) + '_' + canal.dni + '_125';
                //canal.inicializarLlamarACD("*125@Local159", '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
                //canal.inicializarLlamarACD("PJSIP/121201", '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
                canal.inicializarLlamarACD("IAX2/MoyobambaEntel/1551@IAX_ENTEL_176", '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
            } else {
                tocarMensaje(canal, '/ivr/llamadaFueraDeHorarioCallCenter125', -1, -1, false);
                canal.estadoAplicacion = AtencionCliente.FINALIZAR; 
                return;
            }
        } else if(canal.numeroDestino.startsWith('*611')) {
            // LINEA DE AYUDA SOCIAL AL INTERNO (RESPONSABILIDAD SOCIAL)
            if ((dia >= 1 && dia <= 5) && 9 * 3600000 <= ms && ms <= 20 * 3600000) {
                canal.recordCall = true;
                canal.recordingName = dateTime(ahora) + '_' + canal.dni + '_611';
                //canal.inicializarLlamarACD("611@" + parameters.trunks.bitel.id, '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
                //canal.inicializarLlamarACD("IAX2/MoyobambaEntel/*612@IAX_ENTEL_176", '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
                llamarDestino(canal, 'IAX2/MoyobambaEntel/*612@IAX_ENTEL_176', 60, null,
                            '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                            '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else {
                tocarMensaje(canal, '/ivr/fueraHorarioAyudaSocial', -1, -1, false);
                canal.estadoAplicacion = AtencionCliente.FINALIZAR;
                return;
            }
        } else {
            tocarMensaje(canal, '/ivr/extensionInvalida', -1, -1, false);
            canal.estadoAplicacion = AtencionCliente.FINALIZAR;
            return;
        }
        
        canal.estadoAplicacion = AtencionCliente.LLAMANDO;
        return;     
    }

    var continuar = false,
        parametros;
    do {
        // Recuperar variables
        var variables;
        if (canal.variables == null) {
            variables = Object.create(null);
        } else {
            variables = JSON.parse(canal.variables);
        }

        // MAQUINA DE ESTADOS
        switch (canal.estadoAplicacion) {
            case AtencionCliente.CONSULTANDO_TRONCAL:
                var respuesta;
                if (!canal.consultaBdD.getInfo()
                    || (respuesta = JSON.parse(canal.consultaBdD.getInfo())).idTroncal == 0) {
                    // Falla o no hay troncal. Colgar la llamada
                    datosUsuario.idTroncal = 0;
                    canal.datosUsuario = JSON.stringify(datosUsuario);
                    finalizar(canal, ahora);
                    break;          
                }
                print("Respuesta GetTrunk:" + JSON.stringify(respuesta));
                
                var variables = Object.create(null),
                    audios = '|';
                for (var i = 1; i < 6; i++) {
                    audios = audios + '/ivr/moht' + ('00' + (Math.floor(Math.random() * 13) + 1)).substr(-2, 2) + '|';
                }
                canal.recordCall = true;
                canal.recordingName = dateTime(ahora) + '_' + canal.dni;
                canal.inicializarLlamarACD(respuesta.extension, '/ivr/ubicaAgente' + audios + '/ivr/noHayAgentesDisponibles');
                canal.estadoAplicacion = AtencionCliente.LLAMANDO;
                break;
            case AtencionCliente.LLAMANDO:
                //
                updateObject(variables, 'finLlamada', canal.finLlamada, canal);
                print(canal.variables);
                canal.uri = 'telefonia.finLlamadaAtencionCliente';
                canal.parametrosRegistrarLlamada = canal.variables;
            case AtencionCliente.FINALIZAR:
                finalizar(canal, ahora);
        }
    } while (continuar);
}

//---------- INICIO M√ìDULO CAMBIO DE CLAVE ----------
// Estados para el m√≥dulo de cambio de clave
var CambioClave = {
    SOLICITANDO_NUMERO_FRECUENTE: 1,
    VERIFICANDO_NUMERO_FRECUENTE: 2,
    SOLICITANDO_CLAVE: 3,
    VERIFICANDO_CLAVE: 4,
    REGISTRANDO_CAMBIO_CLAVE: 5,
    FINALIZAR_MODULO: 6
};

function cambioClave(canal, ahora, inicio, fhUltimaLlamada, cambioClave) {
    // Verificar si se colg√≥ la llamada
    if (canal.colgoLlamada) {
        // Terminar...
        finalizar(canal, ahora);
        return;
    }

    // Verificar si es el inicio del modulo
    if (inicio) {
        // Definir m√≥dulo
        canal.modulo = Modulos.CAMBIO_CLAVE;

        // Verificar si el interno tiene llamadas en el ultimo mes
        if (fhUltimaLlamada != null && ahora - 31 * 86400000 <= 1000 * fhUltimaLlamada && cambioClave != 1) {
            // Si tiene, solicitar numero frecuente
            solicitarDatos(canal, '', true, 0, 3, null,
                '/ivr/solicitarNumeroFrecuente', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud',
                10, 5, false);
            canal.estadoAplicacion = CambioClave.SOLICITANDO_NUMERO_FRECUENTE;
        } else {
            // No tiene, solicitar clave
            solicitarDatos(canal, '', true, 4, 3, null,
                '/ivr/asignarClave', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud',
                10, 5, false);
            canal.estadoAplicacion = CambioClave.SOLICITANDO_CLAVE;
        }
        return;
    }

    var continuar = false,
        parametros;
    do {
        // Recuperar variables
        var variables;
        if (canal.variables == null) {
            variables = Object.create(null);
        } else {
            variables = JSON.parse(canal.variables);
        }

        // MAQUINA DE ESTADOS
        switch (canal.estadoAplicacion) {
            case CambioClave.SOLICITANDO_NUMERO_FRECUENTE:
                //Si es informacion valida o el numero dado es menor a 15 digitos..
                if (canal.solicitarInformacion.informacionValida() &&
                 canal.solicitarInformacion.getInfo().length < 16) {
                    // Validar el numero
                    parametros = '{"idInterno":"' + canal.dni + '","numero":"' + canal.solicitarInformacion.getInfo() + '"}';
                    print(parametros);
                    consultaBaseDeDatos(canal, 0, null,
                        'telefonia.verificarNumeroFrecuente', parametros,
                        null, false, 3, 5, false);
                    canal.estadoAplicacion = CambioClave.VERIFICANDO_NUMERO_FRECUENTE;
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case CambioClave.VERIFICANDO_NUMERO_FRECUENTE:
                // Verificar si hubo respuesta
                var stringJson = canal.consultaBdD.getInfo();
                if (!stringJson) {
                    // Falla consultando...
                    informarFallaColgar(canal, CambioClave.FINALIZAR_MODULO);
                } else {
                    print(canal.dni + ' cambioClave: ' + stringJson);
                    var result = JSON.parse(stringJson);
                    if (result != 'KO' && result.numeroExitos > 0) {
                        // OK. Solicitar nueva clave
                        solicitarDatos(canal, '', true, 4, 3, null,
                            '/ivr/asignarClave', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud',
                            10, 5, false);
                        canal.estadoAplicacion = CambioClave.SOLICITANDO_CLAVE;
                    } else {
                        // KO. No permitir cambio de clave
                        tocarMensaje(canal, '/ivr/noSePermiteCambiarClave', -1, -1, false);

                        // Definir estado
                        canal.estadoAplicacion = CambioClave.FINALIZAR_MODULO;
                    }
                }
                break;

            case CambioClave.SOLICITANDO_CLAVE:
                if (canal.solicitarInformacion.informacionValida()) {
                    // Guardar la clave escogida, y rectificarla
                    updateObject(variables, 'clave', canal.solicitarInformacion.getInfo(), canal);
                    solicitarDatos(canal, '', true, 4, 3, null,
                        '/ivr/rectificarClave', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud',
                        10, 5, false);
                    canal.estadoAplicacion = CambioClave.VERIFICANDO_CLAVE;
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case CambioClave.VERIFICANDO_CLAVE:
                if (canal.solicitarInformacion.informacionValida()) {
                    // Comparar si digit√≥ la misma clave
                    if (variables.clave == canal.solicitarInformacion.getInfo()) {
                        // Claves iguales, registrar el cambio en la base de datos
                        parametros = '{"idInterno":"' + canal.dni + '",' +
                            '"extensionTelefono":"' + canal.numeroExtension + '",' +
                            '"claveNueva":"' + variables.clave + '"}';
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.cambiarClaveInterno', parametros,
                            null, false, 3, 5, false);
                        canal.estadoAplicacion = CambioClave.REGISTRANDO_CAMBIO_CLAVE;
                    } else {
                        // Falla, clave no coincide
                        tocarMensaje(canal, '/ivr/noCoincidePrimeraClave', -1, -1, false);

                        // Definir estado
                        canal.estadoAplicacion = CambioClave.FINALIZAR_MODULO;
                    }
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case CambioClave.REGISTRANDO_CAMBIO_CLAVE:
                // Si no hubo respuesta, informar y colgar
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, CambioClave.FINALIZAR_MODULO);
                } else {
                    // Registro exitoso, tocar mensaje de confirmaci√≥n
                    tocarMensaje(canal, '/ivr/cambioClaveExitoso', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = CambioClave.FINALIZAR_MODULO;
                }
                break;

            case CambioClave.FINALIZAR_MODULO:
                finalizar(canal, ahora);
        }
    } while (continuar);
}
//---------- FIN M√ìDULO CAMBIO DE CLAVE ----------
//---------- INICIO M√ìDULO CONSULTAS ----------
// Estados para el m√≥dulo de consultas
var Consultas = {
    SOLICITANDO_NUMERO_FRECUENTE: 1,
    VERIFICANDO_NUMERO_FRECUENTE: 2,
    CONSULTANDO_LISTA: 3,
    TOCANDO_LISTA: 4,
    FINALIZAR_MODULO: 5
};

function consultas(canal, ahora, inicio, fhUltimaLlamada) {
    // Verificar si se colg√≥ la llamada
    if (canal.colgoLlamada) {
        // Terminar...
        finalizar(canal, ahora);
        return;
    }

    // Verificar si es el inicio del m√≥dulo
    if (inicio) {
        // Inicializar m√≥dulo
        canal.modulo = Modulos.CONSULTAS;

        // Verificar si el interno tiene llamadas en el ultimo mes
        if (fhUltimaLlamada != null && ahora - 31 * 86400000 <= 1000 * fhUltimaLlamada) {
            // Si tiene, solicitar numero frecuente
            solicitarDatos(canal, '', true, 0, 3, null,
                '/ivr/solicitarNumeroFrecuente', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud',
                10, 5, false);
            canal.estadoAplicacion = Consultas.SOLICITANDO_NUMERO_FRECUENTE;
        } else {
            // Realizar la consulta requerida
            var parametros = '{"idInterno":"' + canal.dni + '",' +
                '"extensionTelefono":"' + canal.numeroExtension + '",' +
                '"tipoInfo":' + (canal.numeroDestino.startsWith('*103') ? 3 : 2) + '}';
            consultaBaseDeDatos(canal, 0, null,
                'telefonia.consultarInterno', parametros,
                null, false, 3, 5, false);
            canal.estadoAplicacion = Consultas.CONSULTANDO_LISTA;
        }
        return;
    }

    var continuar = false,
        parametros;
    do {
        // Recuperar variables
        var variables;
        if (canal.variables == null) {
            variables = Object.create(null);
        } else {
            variables = JSON.parse(canal.variables);
        }

        // MAQUINA DE ESTADOS
        switch (canal.estadoAplicacion) {
            case Consultas.SOLICITANDO_NUMERO_FRECUENTE:
                if (canal.solicitarInformacion.informacionValida()) {
                    // Validar el numero
                    parametros = '{"idInterno":"' + canal.dni + '","numero":"' + canal.solicitarInformacion.getInfo() + '"}';
                    print(parametros);
                    consultaBaseDeDatos(canal, 0, null,
                        'telefonia.verificarNumeroFrecuente', parametros,
                        null, false, 3, 5, false);
                    canal.estadoAplicacion = Consultas.VERIFICANDO_NUMERO_FRECUENTE;
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case Consultas.VERIFICANDO_NUMERO_FRECUENTE:
                // Verificar si hubo respuesta
                var stringJson = canal.consultaBdD.getInfo();
                if (!stringJson) {
                    // Falla consultando...
                    informarFallaColgar(canal, Consultas.FINALIZAR_MODULO);
                } else {
                    print(canal.dni + ' consultas: ' + stringJson);
                    var result = JSON.parse(stringJson);
                    if (result != 'KO' && result.numeroExitos > 0) {
                        // OK. realizar la consulta requerida
                        parametros = '{"idInterno":"' + canal.dni + '",' +
                            '"extensionTelefono":"' + canal.numeroExtension + '",' +
                            '"tipoInfo":' + (canal.numeroDestino.startsWith('*103') ? 3 : 2) + '}';
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.consultarInterno', parametros,
                            null, false, 3, 5, false);
                        canal.estadoAplicacion = Consultas.CONSULTANDO_LISTA;
                    } else {
                        // KO. No permitir la consulta
                        tocarMensaje(canal, '/ivr/noSePermiteLaConsulta', -1, -1, false);
                        // Definir estado
                        canal.estadoAplicacion = Consultas.FINALIZAR_MODULO;
                    }
                }
                break;

            case Consultas.CONSULTANDO_LISTA:
                // Verificar si hubo respuesta
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, Consultas.FINALIZAR_MODULO);
                } else {
                    // Guardar y analizar la respuesta
                    canal.datosUsuario = canal.consultaBdD.getInfo();
                    var datosUsuario = JSON.parse(canal.datosUsuario),
                        lista;

                    if (canal.numeroDestino.startsWith('*103')) {
                        // √öltimas tres recargas. Generar lista de mensajes
                        lista = textoRecargas(datosUsuario.interno.recargas);
                    } else {
                        // √öltimas tres llamadas. Generar lista de mensajes
                        lista = textoLlamadas(datosUsuario.interno.llamadas);
                    }

                    // Iniciar el toque de la lista
                    tocarMensaje(canal, lista, -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Consultas.TOCANDO_LISTA;
                }
                break;

            case Consultas.TOCANDO_LISTA:
            case Consultas.FINALIZAR_MODULO:
                finalizar(canal, ahora);
        }
    } while (continuar);
}
//---------- FIN M√ìDULO CONSULTAS ----------
var EstadosMaskPass = {
    TOCAR_CLAVE_MODO_SEGURO: 1,
    SOLICITAR_OPCION: 2,
    SOLICITANDO_OPCION: 3,
    FIN_FUNCION: 4
}

function functionMaskPass(canal, inicio, ahora) {
    var continuar,
        variables,
        value = 0;

    if (inicio) {
        // inicializar variables
        print('codAzulito', canal.dni, value);
        if (canal.variables && canal.variables != '') variables = JSON.parse(canal.variables);
        else variables = Object.create(null);
        variables.lista = ['*', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '#'];
        variables.clave = [];
        variables.puntero = -1;
        variables.mensaje = null;
        variables.nivel = 0;

        // Definir m√≥dulo y estado
        variables.estadoFuncion = [EstadosMaskPass.TOCAR_CLAVE_MODO_SEGURO];
    }

    do {
        // Inicializar variable para que salga del do en el primer ciclo
        continuar = false;

        // Recuperar variables
        if (!inicio) variables = JSON.parse(canal.variables);

        // Verificar si se colg√≥ la llamada
        if (canal.colgoLlamada) {
            variables.estadoFuncion[variables.nivel] = EstadosMaskPass.FIN_FUNCION;
            value = 2;
        }
        print('modoSeguro', canal.dni, variables.nivel, JSON.stringify(variables.estadoFuncion),
            JSON.stringify(variables.clave), variables.puntero, variables.mensaje, value);

        switch (variables.estadoFuncion[variables.nivel]) {
            case EstadosMaskPass.TOCAR_CLAVE_MODO_SEGURO:
                // Tocar mensaje inicial
                tocarMensaje(canal, '/ivrNewVoice/claveModoSeguro', -1, -1, true);
                variables.estadoFuncion[variables.nivel] = EstadosMaskPass.SOLICITAR_OPCION;
                break;

            case EstadosMaskPass.SOLICITAR_OPCION:
                // Si el puntero no esta definido, calcularlo con base en la fecha epoch (aleatorio)
                if (variables.puntero == -1) {
                    variables.puntero = 1 + (ahora % 10);
                    var tecla = variables.lista[variables.puntero];
                    variables.mensaje = '/ivrNewVoice/' + (tecla == '*' ? 'star' : (tecla == '#' ? 'michi' : tecla));
                }

                // Solicitar opcion
                canal.initializeGetData('4,5,6', true, 1, 1, null, variables.mensaje, null, null, 5, 5, false);
                variables.estadoFuncion[variables.nivel] = EstadosMaskPass.SOLICITANDO_OPCION;
                break;

            case EstadosMaskPass.SOLICITANDO_OPCION:
                // Validar marcacion del usuario
                if (canal.solicitarInformacion.informacionValida2()) {
                    variables.mensaje = "";
                    switch (canal.solicitarInformacion.getInfo()) {
                        case '4':
                            // Se mueve a la izquierda
                            if (variables.puntero > 0) variables.puntero--;
                            break;

                        case '6':
                            // Se mueve a la derecha
                            if (variables.puntero < (variables.lista.length - 1)) variables.puntero++;
                            break;

                        default:
                            // Marco la tecla 5, adicionar digito o simbolo a la clave
                            variables.clave.push(variables.lista[variables.puntero]);
                            variables.mensaje = '/ivrNewVoice/beep,';
                    }

                    // Definir siquiente mensaje a tocar
                    var tecla = variables.lista[variables.puntero];
                    variables.mensaje += '/ivrNewVoice/' + (tecla == '*' ? 'star' : (tecla == '#' ? 'michi' : tecla));
                } else {
                    // No selecciono ninguna opcion, tocar ayuda
                    if (variables.numFails) variables.numFails++;
                    else variables.numFails = 1;
                    if (variables.numFails > 5) {
                        // Simular falla
                        variables.clave[0] = '0';
                        variables.clave[1] = '0';
                        variables.clave[2] = '0';
                        variables.clave[3] = '0';
                        print("modo seguro fallo!!", canal.dni, ahora);
                    } else {
                        variables.mensaje = '/ivrNewVoice/ayudaClaveModoSeguro';
                    }
                }

                // Validar si ya se tiene la clave
                if (variables.clave.length < 4) {
                    // No ha finalizado. Se obliga a otro ciclo
                    continuar = true;
                    variables.estadoFuncion[variables.nivel] = EstadosMaskPass.SOLICITAR_OPCION;
                    break;
                } else {
                    // Ya finalizo. Omitir break
                    value = 1;
                }

            case EstadosMaskPass.FIN_FUNCION:
                // Termina la funcion
                print('codAzulito', canal.dni, value);
        }

        // Guardar las variables en el canal
        canal.variables = JSON.stringify(variables);
    } while (continuar);
    return value;
}

// Estados para el m√≥dulo de mensajes motivacionales
var Motivacion = {
    CONSULTANDO_ID_MENSAJE: 1,
    TOCANDO_MENSAJE_MOTIVACION: 2,
    FALLO_CONSULTA_MENSAJE: 3
};

function motivacion(canal, ahora) {
    switch (canal.estadoAplicacion) {
        case Motivacion.CONSULTANDO_ID_MENSAJE:
            // Si la llamada ha terminado, salir
            if (canal.colgoLlamada) {
                finalizar(canal, ahora);
                break;
            }

            // Verificar si hubo respuesta
            var datosMensaje = canal.consultaBdD.getInfo();
            if (!datosMensaje) {
                informarFallaColgar(canal, Motivacion.FALLO_CONSULTA_MENSAJE);
                break;
            }

            // Leer informaci√≥n
            datosMensaje = JSON.parse(datosMensaje);
            canal.idMensajeMotivacion = datosMensaje.idMensaje;
            tocarMensaje(canal,
                '/usr/local/papillon/subli/' + ('00' + datosMensaje.idMensaje.toString()).slice(-3),
                -1, -1, false);

            // Preparar comando WAMP para registrar la llamada
            canal.uri = 'telefonia.registrarMensajeEscuchado';
            canal.parametrosRegistrarLlamada =
                '{"idInterno":"' + canal.dni + '",' +
                '"extensionTelefono":"' + canal.numeroExtension + '",' +
                '"idMensaje":' + datosMensaje.idMensaje + ',' +
                '"fechaHoraInicio":' + ahora + ',' +
                '"fechaHoraFin":-1}';

            // Definir estado
            canal.estadoAplicacion = Motivacion.TOCANDO_MENSAJE_MOTIVACION;
            break;
        case Motivacion.TOCANDO_MENSAJE_MOTIVACION:
            // Actualizar fin de llamada y finalizar
            var parametrosRegistrarLlamada = canal.parametrosRegistrarLlamada;
            canal.parametrosRegistrarLlamada = parametrosRegistrarLlamada.replace('"fechaHoraFin":-1',
                '"fechaHoraFin":' + ahora);
        case Motivacion.FALLO_CONSULTA_MENSAJE:
            finalizar(canal, ahora);
    }
}

//---------- INICIO M√ìDULO PREREGISTRO ----------

// Estados para el m√≥dulo de preregistro
var Preregistro = {
    SOLICITANDO_DNI: 1,
    CONSULTANDO_CODIGO_AZULITO: 2,
    GRABAR_DATOS: 3,
    GRABANDO_DATOS: 4,
    SELECCIONANDO_OPCION: 5,
    TOCANDO_GRABACION: 6,
    TOCANDO_CODIGO_AZULITO: 7,
    GUARDANDO_PREREGISTRO: 8,
    FINALIZAR_MODULO: 9
}

var EstadosPreregistro = {
    SOLICITUD_EN_PROCESO: 'EN PROCESO',
    SOLICITUD_ACEPTADA: 'APROBADO',
    SOLICITUD_RECHAZADA: 'RECHAZADO'
}

function preRegistro(canal, ahora, inicio, solicitarDNI) {
    // Verificar si se colg√≥ la llamada
    if (canal.terminoLlamada) {
        // Terminar...
        finalizar(canal, ahora);
        return;
    }

    // Verificar si es el inicio del preregistro
    if (inicio) {
        // Definir m√≥dulo y estado
        canal.modulo = Modulos.PREREGISTRO;

        // Verificar si es un anexo valido
        if (anexosValidos.indexOf(Number(canal.numeroExtension)) == -1 ) {
            print("Anexo Invalido");
            tocarMensaje(canal, '/ivr/anexoInvalidoPreRegistro', -1, -1, false);
            canal.estadoAplicacion = Preregistro.FINALIZAR_MODULO;
            return;
        }

        // Inicializar variables
        var variables = Object.create(null);
        updateObject(variables, 'anexo', (canal.numeroExtension == '1000' ? '110401' : canal.numeroExtension), canal);

        if (solicitarDNI) {
            // Solicitar DNI
            solicitarDatos(canal, '', true, 0, 3, null, 
                '/ivr/solicitarDNI', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                10, 5, false);
            canal.estadoAplicacion = Preregistro.SOLICITANDO_DNI;
        } else {
            // Interno sin DNI (no tiene, no lo recuerda, mal registrado en INPE o extranjero)
            // Se consulta con '1' para que se le genere un codigo azulito de diez digitos
            var parametros = '{"idInterno":"1",' +
                    '"extensionTelefono":"' + variables.anexo + '",' +
                    '"tipoInfo":1' + '}';
            consultaBaseDeDatos(canal, 0, null, 
                'telefonia.consultarInterno', parametros, null, 
                false, 3, 5, false);
            canal.estadoAplicacion = Preregistro.CONSULTANDO_CODIGO_AZULITO;
        }
        return;
    }

    var continuar = false;
    do {
        // Recuperar variables
        var variables;
        variables = JSON.parse(canal.variables);

        // M√°quina de estados
        switch (canal.estadoAplicacion) {
            case Preregistro.SOLICITANDO_DNI:
                if (canal.solicitarInformacion.informacionValida()) {
                    // Validar el numero
                    var numero = canal.solicitarInformacion.getInfo();
                    if (numero.length == 8 || numero.length == 10) {
                        // Guardar y consultar
                        var parametros = '{"idInterno":"' + numero + '",' +
                                '"extensionTelefono":"' + variables.anexo + '",' +
                                '"tipoInfo":1' + '}';
                        consultaBaseDeDatos(canal, 0, null, 'telefonia.consultarInterno', 
                            parametros, null, false, 3, 5, false);
                        canal.estadoAplicacion = Preregistro.CONSULTANDO_CODIGO_AZULITO;
                    } else {
                        // Invalido...
                        tocarMensaje(canal, '/ivr/dniInvalido', -1, -1, false);
                        canal.estadoAplicacion = Preregistro.FINALIZAR_MODULO;
                    }
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case Preregistro.CONSULTANDO_CODIGO_AZULITO:
                // Verificar si hubo respuesta
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, Preregistro.FINALIZAR_MODULO);
                    break;
                }

                // Guardar y analizar la respuesta
                var datosUsuario = JSON.parse(canal.consultaBdD.getInfo());
                updateObject(variables, 'idInterno', datosUsuario.codigoAzulito, canal);
                if (!datosUsuario.codigoAzulito) {
                    // Un interno que ya esta registrado. Chaoooo...
                    tocarMensaje(canal, '/ivr/codigoEstaRegistrado', -1, -1, false);
                    canal.estadoAplicacion = Preregistro.FINALIZAR_MODULO;
                } else if (datosUsuario.estadoSolicitudEmpadronamiento == null) {
                    // Invitar grabacion de nombre, fecha nacimiento, nombre padres...
                    tocarMensaje(canal, '/ivr/grabeInfoPersonal', -1, -1, false);
                    canal.estadoAplicacion = Preregistro.GRABAR_DATOS;
                } else if (datosUsuario.estadoSolicitudEmpadronamiento == EstadosPreregistro.SOLICITUD_EN_PROCESO) {
                    tocarMensaje(canal, '/ivr/solicitudEnProceso', -1, -1, false);
                    canal.estadoAplicacion = Preregistro.GRABAR_DATOS;
                } else if (datosUsuario.estadoSolicitudEmpadronamiento == EstadosPreregistro.SOLICITUD_ACEPTADA) {
                    tocarMensaje(canal, '/ivr/suSolicitudFueValida', -1, -1, false);
                    canal.estadoAplicacion = Preregistro.FINALIZAR_MODULO;
                } else {
                    tocarMensaje(canal, '/ivr/suSolicitudFueRechazada', -1, -1, false);
                    canal.estadoAplicacion = Preregistro.FINALIZAR_MODULO;
                }
                break;

            case Preregistro.GRABAR_DATOS:
                grabarMensaje(canal, prefijoCarcel + "_" + variables.idInterno, 60, 10, 'overwrite', '#',
                        Preregistro.GRABANDO_DATOS);
                break;

            case Preregistro.GRABANDO_DATOS:
                solicitarDatos(canal, '2,3,4,5', true, 1, 3, null, 
                     '/ivr/tocarOpciones', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                     10, 5, false);
                canal.estadoAplicacion = Preregistro.SELECCIONANDO_OPCION;
                break;

            case Preregistro.SELECCIONANDO_OPCION:
                if (canal.solicitarInformacion.informacionValida()) {
                    var idOpcion = canal.solicitarInformacion.getInfo();
                    if (idOpcion == '2') {
                        // Escuchar grabacion
                        tocarMensaje(canal, '/asterisk/' + prefijoCarcel + '_' + variables.idInterno, -1, -1, false);
                        canal.estadoAplicacion = Preregistro.TOCANDO_GRABACION;
                    } else if (idOpcion == '3') {
                        // Volver a grabar
                        tocarMensaje(canal, '/ivr/grabeInfoPersonal', -1, -1, false);
                        canal.estadoAplicacion = Preregistro.GRABAR_DATOS;
                    } else if (idOpcion == '4') {
                        // Escuchar codigo azulito
                        var lista = textoNumero(variables.idInterno, 1);
                        canal.listaMensajes.clear();
                        lista.forEach(function(item) { canal.listaMensajes.add(item); });

                        // Iniciar el toque de la lista
                        tocarMensaje(canal, canal.listaMensajes.remove(), -1, -1, false);
                        canal.estadoAplicacion = Preregistro.TOCANDO_CODIGO_AZULITO;
                    } else if (idOpcion == '5') {
                        // Finaliza...
                        consultaBaseDeDatos(canal, 0, null, 'telefonia.solicitudEmpadronamiento', canal.variables, 
                            null, false, 3, 5, false)
                        canal.estadoAplicacion = Preregistro.GUARDANDO_PREREGISTRO;
                    } else {
                        solicitarDatos(canal, '2,3,4,5', true, 1, 3, null, 
                            '/ivr/tocarOpciones', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                            10, 5, false);
                        canal.estadoAplicacion = Preregistro.SELECCIONANDO_OPCION;
                    }
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case Preregistro.TOCANDO_GRABACION:
                solicitarDatos(canal, '2,3,4,5', true, 1, 3, null, 
                    '/ivr/tocarOpciones', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                    10, 5, false);
                canal.estadoAplicacion = Preregistro.SELECCIONANDO_OPCION;
                break;

            case Preregistro.TOCANDO_CODIGO_AZULITO:
                // Leer el siguiente mensaje, si lo hay...
                if (canal.listaMensajes.size() > 0) {
                    // Si hay mensaje. Tocarlo
                    tocarMensaje(canal, canal.listaMensajes.remove(), -1, -1, false);
                    canal.estadoAplicacion = Preregistro.TOCANDO_CODIGO_AZULITO;
                } else {
                    solicitarDatos(canal, '2,3,4,5', true, 1, 3, null, 
                        '/ivr/tocarOpciones', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                        10, 5, false);
                    canal.estadoAplicacion = Preregistro.SELECCIONANDO_OPCION;
                }
                break;

            case Preregistro.GUARDANDO_PREREGISTRO:
                tocarMensaje(canal, '/ivr/solicitudEmpadronamientoGuardada', -1, -1, false);
                canal.estadoAplicacion =  Preregistro.FINALIZAR_MODULO;
                break;

            case Preregistro.FINALIZAR_MODULO:
                finalizar(canal, ahora);
                break;
        }
    } while (continuar);
}
//---------- FIN MODULO PREREGISTRO ----------
//---------- INICIO M√ìDULO PREVENTA (LISTAS DE SOLICITUD DE RECARGAS) ----------
// Estados para el m√≥dulo de pre venta
var Preventa = {
    F_VALIDAR_ID_LISTA: 1,
    CONSULTAR_ID_LISTA: 2,
    CONSULTANDO_ID_LISTA: 3,
    TOCANDO_FALLO_CONSULTANDO_ID_LISTA: 4,
    TOCANDO_DATOS_PREVENTA: 5,
    TOCANDO_NO_SE_ABRIRAN_MAS_LISTAS: 6,
    SOLICITANDO_VALOR_RECARGA: 7,
    TOCANDO_VALOR_RECARGA_INVALIDO: 8,
    REGISTRANDO_PREVENTA: 9,
    TOCANDO_FALLO_REGISTRANDO_PREVENTA: 10,
    TOCANDO_PREVENTA_EXITOSA: 11,
    TOCANDO_ANEXO_INVALIDO_SOLICITUD_RECARGAS: 12
}

function textoConfirmacionPreventa(idLista, ordinal, valor) {
    var lista = [];

    lista.push('/ivr/laSolicitudDeRecargaPorUnValorDe');
    lista = lista.concat(textoDinero(valor));
    lista.push('/ivr/quedaRegistradaEnElPuesto');
    lista = lista.concat(textoNumero(ordinal));
    if (idLista == 0) lista.push('/ivr/deLaPrimeraLista');
    if (idLista == 1) lista.push('/ivr/deLaSegundaLista');

    // Retornar...
    return listToString(lista);
}

function textoInformarPreventa(mismaLista, idLista, ordinal, valor) {
    var lista = [];

    if (mismaLista) lista.push('/ivr/enEstaArea');
    else lista.push('/ivr/enOtraArea');
    lista.push('/ivr/tieneUnaSolicitudDeRecargaPorUnValorDe');
    lista = lista.concat(textoDinero(valor));
    lista.push('/ivr/enElPuesto');
    lista = lista.concat(textoNumero(ordinal));
    if (idLista == 0) lista.push('/ivr/deLaPrimeraLista');
    if (idLista == 1) lista.push('/ivr/deLaSegundaLista');

    // Retornar...
    return listToString(lista);
}

function preVenta(canal, ahora, inicio) {
    // Verificar si se colg√≥ la llamada
    if (canal.colgoLlamada) {
        // Terminar...
        finalizar(canal, ahora);
        return;
    }

    // Verificar si es el inicio de la preventa
    if (inicio) {
        // Definir m√≥dulo y estado
        canal.modulo = Modulos.PREVENTA;
        canal.estadoAplicacion = Preventa.CONSULTAR_ID_LISTA;
    }

    mainSwitch:
    while (true) {
        // Recuperar variables
        var variables;
        if (canal.variables == null) variables = Object.create(null);
        else variables = JSON.parse(canal.variables);

        // M√°quina de estados. El primer bloque son los estados tipo funci√≥n (F_NOMBRE_FUNCION)
        switch (canal.estadoAplicacion) {
            case Preventa.F_VALIDAR_ID_LISTA:
                if (variables.idLista > 2) {
                    // Ya no se abrir√°n m√°s listas
                    tocarMensaje(canal, '/ivr/loSentimosNoSeAbriranMasListas', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Preventa.TOCANDO_NO_SE_ABRIRAN_MAS_LISTAS;
                } else {
                    // Inicializar funci√≥n para solicitar valor
                    var mensaje = (variables.ordinal ? '/ivr/cambiarValorRecarga' : '/ivr/solicitarValorRecarga');
                    solicitarDatos(canal, '', true, 0, 3, null,
                        mensaje, '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud',
                        10, 5, false);

                    // Definir estado
                    canal.estadoAplicacion = Preventa.SOLICITANDO_VALOR_RECARGA;
                }
                break;

            case Preventa.CONSULTAR_ID_LISTA:
                var anexo = (canal.numeroExtension == '1000' ? prefijoCarcel + '001' : canal.numeroExtension);
                consultaBaseDeDatos(canal, 0, null,
                    'telefonia.consultaIdLista',
                    '{"idInterno":"' + canal.dni + '",' +
                    '"extensionTelefono":"' + anexo + '"}',
                    null, false, 3, 5, false);

                // Definir estado
                canal.estadoAplicacion = Preventa.CONSULTANDO_ID_LISTA;
                break;
            case Preventa.CONSULTANDO_ID_LISTA:
                // Verificar si hubo respuesta
                if (!canal.consultaBdD.getInfo()) {
                    print('no hubo respuesta, consulta idLista (' + ahora + ')');
                    print('codigoAzulito: ' + canal.dni);
                    print('anexo: ' + canal.numeroExtension);
                    informarFallaColgar(canal, Preventa.TOCANDO_FALLO_CONSULTANDO_ID_LISTA);
                    break;
                }

                // Leer resultado, actualizar variables
                var datosPreventa = JSON.parse(canal.consultaBdD.getInfo());
                variables.idLista = datosPreventa.idLista;
                variables.idArea = datosPreventa.idArea;
                variables.ordinal = datosPreventa.ordinal;
                canal.variables = JSON.stringify(variables);

                // idArea v√°lida?
                if (variables.idArea == null || variables.idLista == null) {
                    // El tel√©fono no sirve para solicitud de recargas (no tiene definida un area)
                    print('datos inv√°lidos, consulta idLista (' + ahora + '): ' + canal.consultaBdD.getInfo());
                    print('codigoAzulito: ' + canal.dni);
                    print('anexo: ' + canal.numeroExtension);
                    tocarMensaje(canal, '/ivr/anexoInvalidoParaSolicitudDeRecargas', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Preventa.TOCANDO_ANEXO_INVALIDO_SOLICITUD_RECARGAS;
                    break;
                }

                // Ya existe una solicitud de recarga ?
                if (datosPreventa.ordinal) {
                    // Si existe. Preparar lista de mensajes para informar de la misma
                    lista = textoInformarPreventa(datosPreventa.esLaMismaArea,
                        datosPreventa.idLista, datosPreventa.ordinal, datosPreventa.valor);

                    // Iniciar el play
                    tocarMensaje(canal, lista, -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Preventa.TOCANDO_DATOS_PREVENTA;
                } else {
                    // No existe. Validar id lista
                    canal.estadoAplicacion = Preventa.F_VALIDAR_ID_LISTA;
                    continue mainSwitch;
                }
                break;
            case Preventa.TOCANDO_DATOS_PREVENTA:
                // Validar horario
                canal.estadoAplicacion = Preventa.F_VALIDAR_ID_LISTA;
                continue mainSwitch;
                break;
            case Preventa.SOLICITANDO_VALOR_RECARGA:
                if (canal.solicitarInformacion.informacionValida()) {
                    // Validar el monto
                    variables.valorRecarga = Number(canal.solicitarInformacion.getInfo());
                    canal.variables = JSON.stringify(variables);
                    if (variables.valorRecarga > 0 && variables.valorRecarga < 1000) {
                        // Registrar la solicitud
                        var anexo = (canal.numeroExtension == '1000' ? prefijoCarcel + '001' : canal.numeroExtension);
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.registrarPreVentaRecargaV2',
                            '{"idArea":' + variables.idArea + ',' +
                            '"idListaArea":' + variables.idLista + ',' +
                            '"idInterno":"' + canal.dni + '",' +
                            '"extensionTelefono":"' + anexo + '",' +
                            '"valor":' + variables.valorRecarga + '}',
                            null, false, 3, 5, false);

                        // Definir estado
                        canal.estadoAplicacion = Preventa.REGISTRANDO_PREVENTA;
                    } else {
                        // Tocar aviso de preventa fall√≥
                        tocarMensaje(canal, '/ivr/valorRecargaInvalido', -1, -1, false);

                        // Definir estado
                        canal.estadoAplicacion = Preventa.TOCANDO_VALOR_RECARGA_INVALIDO;
                    }
                } else {
                    finalizar(canal, ahora);
                }
                break;
            case Preventa.REGISTRANDO_PREVENTA:
                // Verificar si hubo respuesta
                if (!canal.consultaBdD.getInfo()) {
                    print('no hubo respuesta, registrando preventa (' + ahora + ')');
                    print('codigoAzulito: ' + canal.dni);
                    print('anexo: ' + canal.numeroExtension);
                    informarFallaColgar(canal, Preventa.TOCANDO_FALLO_REGISTRANDO_PREVENTA);
                    break;
                }

                // Preparar lista para tocar mensaje de confirmaci√≥n
                var registroPreventa = JSON.parse(canal.consultaBdD.getInfo());
                lista = textoConfirmacionPreventa(variables.idLista,
                    registroPreventa.ordinal, variables.valorRecarga);

                // Iniciar el play
                tocarMensaje(canal, lista, -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = Preventa.TOCANDO_PREVENTA_EXITOSA;
                break;
            case Preventa.TOCANDO_PREVENTA_EXITOSA:
            case Preventa.TOCANDO_FALLO_CONSULTANDO_ID_LISTA:
            case Preventa.TOCANDO_ANEXO_INVALIDO_SOLICITUD_RECARGAS:
            case Preventa.TOCANDO_NO_SE_ABRIRAN_MAS_LISTAS:
            case Preventa.TOCANDO_VALOR_RECARGA_INVALIDO:
            case Preventa.TOCANDO_FALLO_REGISTRANDO_PREVENTA:
                finalizar(canal, ahora);
        }

        // Salir...
        break mainSwitch;
    }
}
//---------- FIN MODULO PREVENTA ----------

//------------INICIO CHANCHITA-------------
var GreetingPreRecarga = {
	TOCAR_INVITACION_GREETING_CHAT: 1,
	TOCANDO_INVITACION_GREETING_CHAT: 2,
	SELECCIONAR_OPCION: 3,
	SELECCIONANDO_OPCION: 4
}

function greetingPreRecarga(canal, inicio, variables) {
	var value = 0;
	if (inicio) {
		// inicializar primer estado de la funcion.
		if (variables.estadoFuncion[variables.nivel + 1]) {
			variables.estadoFuncion[variables.nivel + 1] = GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT;
		} else {
			variables.estadoFuncion.push(GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT);
		}
		// Otras inicializaciones
		variables.name = 'greetingsChanchita/' + variables.dni;
		variables.maxDurationSeconds = 5;
		variables.maxSilenceSeconds = 3;
		variables.ifExists = 'overwrite';
		variables.terminateOn = '#';
	}
	variables.nivel++;

	do {
		// Inicializar variable para que salga del do en el primer ciclo
		continuar = false;

		print("Greeting: " + variables.nivel + "," + variables.estadoFuncion[variables.nivel], variables.estadoFuncion.length);
		switch (variables.estadoFuncion[variables.nivel]) {	
			case GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT:
				tocarMensaje(canal, '/chanchita/invitacionGreeting', -1, -1, true);
				variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.TOCANDO_INVITACION_GREETING_CHAT;
				break;
			case GreetingPreRecarga.TOCANDO_INVITACION_GREETING_CHAT:
				grabarMensaje(canal, variables.name, variables.maxDurationSeconds,
					variables.maxSilenceSeconds, variables.ifExists, variables.terminateOn);
				variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONAR_OPCION;
				break;
			case GreetingPreRecarga.SELECCIONAR_OPCION:
				solicitarDatos(canal, '2,3,4', true, 1, 3,
					null, '/chanchita/tocarOpcionesMensajeVoz', '/chanchita/reintentoSolicitud', '/chanchita/fallaSolicitud', 
					10, 5, false);
				variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONANDO_OPCION;
				break;
			case GreetingPreRecarga.SELECCIONANDO_OPCION:
				var idOpcion = -1;
				if (canal.solicitarInformacion.informacionValida()) idOpcion = canal.solicitarInformacion.getInfo();
				print(idOpcion);
				if (idOpcion == '2') {
					// Escuchar grabacion
					tocarMensaje(canal, '/var/spool/asterisk/recording/' + variables.name, -1, -1, false);
					variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONAR_OPCION;
				} else if (idOpcion == '3') {
					// Volver a grabar
					variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT;
					continuar = true;	
				} else if (idOpcion == '4') {
					// sale de modulo grabacion..
					value = 1;
				} else {
					// Opcion invalida o problemas seleccionandola...
					tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
					variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONAR_OPCION;
				}
				break;
		}
	} while (continuar);

	// Sale de la funcion (aun no termina)
	variables.nivel--;
	return value;
}

//INICIOPREVENTA

function validarMontoIngresadoPreRecarga(monto){
	return (monto >= 0 && monto < 1000) ? true : false;  
}

function validarMontoIngresadoPreRecargaChanchita(monto){
	return (monto >= 1 && monto <= 100) ? true : false;  
}

function leerCantidad(cantidad,path){
	if(!path) path='/chanchita/';
	var texto = [];
	var cantidadIng = Math.abs(cantidad);
	var cantidadStr = String(cantidadIng);
	cantidadStr = cantidadStr.split(".")
	  if (cantidadStr[0].length <= 6){
	  // dividimos la cantidad en centenas
		var centenas = [];
		var fin = cantidadStr[0].length;
		while(fin>0){
			if(fin-3>=0) centenas.push(cantidadStr[0].substring(fin-3,fin));
			else centenas.push(cantidadStr[0].substring(0,fin));
			fin -= 3;
		}
		centenas = centenas.reverse();
	  	// insertamos en "numeracionDecimal" los valores de "numeraciones" de acuerdo a las centenas
	  	var numeracionDecimal = [];
	  	var numeraciones = [path + 'mil',path + 'soles'];
		numeracionDecimal = numeraciones.slice(-centenas.length);

		for(var i in centenas){
			var soles = Number(centenas[i]);
			if (soles == 1) {
				texto.push(path + 'un');
			} else if (soles >= 2 && soles <= 999) {
		  		texto.push(path + soles);
			}		
		 	if(soles == 0 && centenas.length == 1) texto.push(path + '0',path + 'soles');
			else if(soles == 1 && centenas.length == 1) texto.push(path + 'sol');
		 	else texto.push(numeracionDecimal[i]);		
	  	}
	  	// centimos
		if(cantidadStr[1]){
			var centimos = cantidadStr[1];
			texto.push(path + 'con');
			if(centimos.length==1) texto.push(path +(Number(centimos*10)).toString());
			else texto.push( path +(Number(centimos)).toString());
			texto.push(path + 'centimos');
		}
	} else {
	  texto.push(path + 'montoDemasiadoAlto');
	}
	print(texto);
	return texto;
  }


  var PreVentaV2 = {
	SOLICITAR_DNI: 1,
	SOLICITANDO_DNI: 2,
	SOLICITAR_NUMERO_LISTA: 3, 
	VALIDANDO_COD_AZULITO:4,
	TOCANDO_COLABORADOR_LISTA: 5,
	CONSULTAR_PRERECARGAS_INTERNO: 6,
	CONSULTANDO_PRERECARGAS_INTERNO: 7,
	VALIDAR_EXISTENCIA_GREETING: 8,
	VALIDANDO_EXISTENCIA_GREETING: 9,
	GRABANDO_GREETING: 10,
	SOLICITAR_PRERECARGA: 11,
	SOLICITANDO_PRERECARGA: 12,
	GUARANDO_PRERECARGA: 13,
	FINALIZAR_MODULO: 14,
	TOCANDO_SISTEMA_FUERA_HORARIO: 15,
	TOCANDO_FALLO_CONSULTA_DATOS_USUARIO: 16,
	TOCANDO_NO_ESTA_BASE_DATOS_INPE: 17,
	ESTA_CUENTA_NO_SE_PUEDE_USAR: 18,
};

function preVentaV2(canal, ahora, inicio, variables) {

	if (inicio) {
		if (variables.estadoFuncion[variables.nivel + 1]) {
			variables.estadoFuncion[variables.nivel + 1] = PreVentaV2.VALIDAR_EXISTENCIA_GREETING;
		} else {
			variables.estadoFuncion.push(PreVentaV2.VALIDAR_EXISTENCIA_GREETING);
		}
		
		variables.dni = canal.dni;
		variables.maximoInternosPorLista = 15;
	}
	variables.nivel++;
	print("preVenta21: " + variables.nivel);
	do {
		// Recuperar variables
		var continuar = false;

		print("entre aqui: " + variables.estadoFuncion[variables.nivel], variables.estadoFuncion.length);
		switch (variables.estadoFuncion[variables.nivel]) {
			case PreVentaV2.VALIDAR_EXISTENCIA_GREETING:
				//variables.dni = canal.dni;
				var parametros = '{"codAzulito":"' + variables.dni + '"}';
				canal.inicializarConsultaLocal(null, 'preRecargas.consultarGreeting', 
					parametros, 3, 5, false);
				variables.estadoFuncion[variables.nivel] = PreVentaV2.VALIDANDO_EXISTENCIA_GREETING;
				
				break;
			
			case PreVentaV2.VALIDANDO_EXISTENCIA_GREETING:
				if (canal.consultaLocal.getInfo()) {
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					if (respuestaConsulta.resultado.startsWith("OK")) {
						if (respuestaConsulta.motivo) {
							if (respuestaConsulta.motivo.startsWith("noGreeting")) {
								greetingPreRecarga(canal, true, variables);
								variables.estadoFuncion[variables.nivel] = PreVentaV2.GRABANDO_GREETING;
							} else {
								// ya tiene un saludo..
								continuar = true;
								variables.estadoFuncion[variables.nivel] = PreVentaV2.SOLICITAR_NUMERO_LISTA;
							}
						}
					} else {
						finalizar(canal, ahora);
					}
				} else {
					finalizar(canal, ahora);
				}
				break;

			case PreVentaV2.GRABANDO_GREETING:
				if (respuesta = greetingPreRecarga(canal, false, variables))
					if (respuesta == 1) {
						var parametros = '{"codAzulito":"' + variables.dni + '"}';
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarGreeting', 
							parametros, 3, 5, false);
						variables.estadoFuncion[variables.nivel] = PreVentaV2.SOLICITAR_NUMERO_LISTA;
					} 
				break;
			
			case PreVentaV2.SOLICITAR_NUMERO_LISTA:
				solicitarDatos(canal, '', true, 0, 3, null, '/chanchita/solicitarLista',
					'/chanchita/reintentoIdLista', '/chanchita/fallaSolicitud', 10, 5, false);
				variables.estadoFuncion[variables.nivel] = PreVentaV2.CONSULTAR_PRERECARGAS_INTERNO;
				break;

			case PreVentaV2.CONSULTAR_PRERECARGAS_INTERNO:
				if (canal.solicitarInformacion.informacionValida()) {
					variables.idLista = canal.solicitarInformacion.getInfo();
					print("# Lista: ",variables.idLista);
					var parametros = '{"codAzulito":"' + variables.dni + '","idLista":' + variables.idLista + '}';
					canal.inicializarConsultaLocal(null, 'preRecargas.consultarRecargas', 
						parametros, 3, 5, false);
					variables.estadoFuncion[variables.nivel] = PreVentaV2.CONSULTANDO_PRERECARGAS_INTERNO;
				} else {
					finalizar(canal, ahora);
				}
				break;
			
			case PreVentaV2.CONSULTANDO_PRERECARGAS_INTERNO:
				print(canal.consultaLocal.getInfo());
				if (canal.consultaLocal.getInfo()) {
					// {"resultado":"OK", preRecarga:{"correlativo":1, "monto": 5}}
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					if (respuestaConsulta.resultado.startsWith("OK")) {
						variables.colaborador = respuestaConsulta.colaborador;
						if (respuestaConsulta.motivo) {
							if (respuestaConsulta.motivo.startsWith("noRecargaListaPedida")) {
								tocarMensaje(canal, '/chanchita/noRecargaListaPedida',  -1, -1, false);
								variables.estadoFuncion[variables.nivel] = PreVentaV2.FINALIZAR_MODULO;
							} else if (respuestaConsulta.motivo.startsWith("listaNoExiste")) {
								tocarMensaje(canal, '/chanchita/listaNoExiste',  -1, -1, false);
								variables.estadoFuncion[variables.nivel] = PreVentaV2.FINALIZAR_MODULO;
							} else if (respuestaConsulta.motivo.startsWith("AunTieneUnaListaPorCerrar")) {
								tocarMensaje(canal, '/chanchita/AunTieneUnaListaPorCerrar',  -1, -1, false);
								variables.estadoFuncion[variables.nivel] = PreVentaV2.FINALIZAR_MODULO;
							} else {
								// no tiene recargas... 
								variables.estadoFuncion[variables.nivel] = PreVentaV2.SOLICITAR_PRERECARGA;
								continuar = true;
							}
						} else {
							var monto = respuestaConsulta.monto;
							var estadoLista = respuestaConsulta.estadoLista;
							var pago = respuestaConsulta.pago;

							var listaCantMonto = ['/chanchita/ustedTieneUnaPrerecargaDe', '/chanchita/' + monto, 
								'/chanchita/soles', '/chanchita/enLista', '/chanchita/' + variables.idLista, '/chanchita/suEstadoEs', 
								'/chanchita/' + estadoLista, '/chanchita/suColaboradorEs', 
								'/var/spool/asterisk/recording/greetingsChanchita/' + variables.colaborador];
							// si aun el colaborador no ha actulizado el estado de pago de la recarga, puede modificar su valor
							if (pago == 0 && estadoLista=="abierta") {
								listaCantMonto.push('/chanchita/cuelgueAhoraOactualiceValorDeRecarga');
								tocarMensaje(canal, listToString(listaCantMonto),-1, -1, true);
								variables.estadoFuncion[variables.nivel] = PreVentaV2.SOLICITAR_PRERECARGA;
							} else {
								tocarMensaje(canal, listToString(listaCantMonto),-1, -1, true);
								variables.estadoFuncion[variables.nivel] = PreVentaV2.FINALIZAR_MODULO;
							}							
						}
					} else {
						finalizar(canal, ahora);
					}
				} else {
					finalizar(canal, ahora);
				}
				break;
			
			case PreVentaV2.SOLICITAR_PRERECARGA:
				solicitarDatos(canal, '', true, 0, 3, null, '/chanchita/marquePreRecargue',
					'/chanchita/marquePreRecargue', '/chanchita/fallaSolicitud', 10, 5, false);
				variables.estadoFuncion[variables.nivel] = PreVentaV2.SOLICITANDO_PRERECARGA;	
				break;

			case PreVentaV2.SOLICITANDO_PRERECARGA:
				if (canal.solicitarInformacion.informacionValida()) {
					variables.montoIngresado = canal.solicitarInformacion.getInfo();
					if (validarMontoIngresadoPreRecargaChanchita(variables.montoIngresado)) {
						var parametros = '{"codAzulito":"' + variables.dni + '",' +
							'"idLista":"' + variables.idLista + '",' +
							'"fechaHora":"' + ahora + '",' +
							'"monto":"' + variables.montoIngresado + '",' +
							'"maximoInternosPorLista":"' + variables.maximoInternosPorLista + '"}';
						print("parametros: ",parametros);
						canal.inicializarConsultaLocal(null, 'preRecargas.solicitarPreRecarga', 
							parametros, 3, 5, false);
						variables.estadoFuncion[variables.nivel] = PreVentaV2.GUARANDO_PRERECARGA;
					} else {
						tocarMensaje(canal, '/chanchita/montoInvalido',-1,-1, true);
						variables.estadoFuncion[variables.nivel] = PreVentaV2.SOLICITAR_PRERECARGA;
					}
				} else {
					finalizar(canal, ahora);
				}
				break;
			
			case PreVentaV2.GUARANDO_PRERECARGA:
				print("GUARANDO_PRERECARGA: ",canal.consultaLocal.getInfo());
				if (canal.consultaLocal.getInfo()) {
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					if (respuestaConsulta.resultado.startsWith("OK")) {
						if (variables.montoIngresado != 0) {
							correlativo = respuestaConsulta.correlativo;
							tocarMensaje(canal, '/chanchita/recargaGuardadaEnLaPos,' + '/directorio/' + correlativo + 
								',/chanchita/suColaboradorEs' + ',/var/spool/asterisk/recording/greetingsChanchita/' + 
								variables.colaborador, -1, -1, true);
						} else {
							tocarMensaje(canal, '/chanchita/recargaEliminadoPabellon', -1, -1, true);
						}
					} else {
						print("else...");
						// El numero de extension no esta asociada a ninguna area o ingreso un valor de cero soles..
						if (respuestaConsulta.mensaje.startsWith("failValor")) 
							tocarMensaje(canal, '/chanchita/montoInvalido', -1, -1, true);
						if (respuestaConsulta.mensaje.startsWith("listaLlena")) 
							tocarMensaje(canal, '/chanchita/listaLlena', -1, -1, true);
						else 
							tocarMensaje(canal, '/chanchita/extensionNoValida', -1, -1, true);
					}
					variables.estadoFuncion[variables.nivel] = PreVentaV2.FINALIZAR_MODULO;
				} else {
					finalizar(canal, ahora);
				}
				break;

			case PreVentaV2.TOCANDO_SISTEMA_FUERA_HORARIO:
			case PreVentaV2.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO:
			case PreVentaV2.TOCANDO_NO_ESTA_BASE_DATOS_INPE:
			case PreVentaV2.ESTA_CUENTA_NO_SE_PUEDE_USAR:
			case PreVentaV2.FINALIZAR_MODULO:
				finalizar(canal, ahora);
				break;
		}
	} while (continuar);
	variables.nivel--;
	return 0;
}

//FINPREVENTA

//INICIO chanchitaColaborador

var ChanchitaColaborador = {
	CONSULTAR_LISTA: 1,
	CONSULTANDO_LISTA: 2,
	ACTUALIZAR_ESTADO_RECARGA: 3,
	ACTUALIZANDO_ESTADO_RECARGA: 4,
	VALIDAR_LISTA: 5,
	VALIDANDO_LISTA: 6,
	SOLICITAR_CIERRE_DE_LISTA: 7,
	CERRAR_LISTA: 8,
	CERRANDO_LISTA: 9,
	FINALIZAR: 10
};

function chanchitaColaborador(canal, ahora, inicio){
	if (inicio) {
		print("inicio..................");
		if (canal.variables && canal.variables != '') variables = JSON.parse(canal.variables);
		else variables = Object.create(null);
		variables.posicionLista=0;
		variables.nivel=0;
		variables.tocarOpciones = true;		
		// Definir m√≥dulo y estado
		canal.modulo = Modulos.CHANCHITA_COLABORADOR;
		variables.estadoFuncion = [ChanchitaColaborador.CONSULTAR_LISTA];
		canal.variables = JSON.stringify(variables);
	}
	var estado = { 1:'pago', 0:'noPago' };
	var continuar = false;
	do {
		continuar = false;
		if (canal.variables == null) {
			variables = Object.create(null);
		} else {
			variables = JSON.parse(canal.variables);
		}
		if (canal.colgoLlamada) {
			// Terminar...
			finalizar(canal, ahora);
			return;
		}
		//print("CHANCHITA: ",variables.estadoFuncion[variables.nivel]);
		switch(variables.estadoFuncion[variables.nivel]){
			case ChanchitaColaborador.CONSULTAR_LISTA:				
				var parametros = Object.create(null);
				parametros.codAzulito = canal.dni;
				parametros.extension = canal.numeroExtension;	
				canal.inicializarConsultaLocal(null, 'preRecargas.obtenerLista', 
					JSON.stringify(parametros), 3, 5, false);
				variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.CONSULTANDO_LISTA;								
				break;
			case ChanchitaColaborador.CONSULTANDO_LISTA:
				if (canal.consultaLocal.getInfo()) {
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					var audio = '/chanchita/bienvenidoRecargasChanchita,';	

					if (respuestaConsulta.resultado == "OK") {
						variables.preRecargas = JSON.parse(respuestaConsulta.mensaje);
						if (variables.preRecargas.lista){
							// si tiene recargas pagadas, se le informa.
							var total = 0;
							var numeroDeRecargas = 0;
							print(JSON.stringify(variables.preRecargas.lista));
							for (i in variables.preRecargas.lista){
								if(variables.preRecargas.lista[i].pago)	{
									total += variables.preRecargas.lista[i].monto;
									numeroDeRecargas++;
								}
							}
							if (total>0){
								audio += '/chanchita/numeroDeRecargasPagadas' +
									',/chanchita/' + numeroDeRecargas.toString() + 
									',/chanchita/ustedDebeTener,' + leerCantidad(total,'/chanchita/');
									tocarMensaje(canal, audio, -1, -1, false);
							} else {
								continuar = true;
							}							
							variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.ACTUALIZAR_ESTADO_RECARGA;
						} else {
							audio += '/chanchita/noTienePreRecargas';
							tocarMensaje(canal, audio, -1, -1, false);	
							variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.FINALIZAR;
						}
					} else {
						if (respuestaConsulta.mensaje == "listaCerrada"){
							audio += '/chanchita/listaCerrada';
							tocarMensaje(canal, audio, -1, -1, false);
						} else {
							audio += '/chanchita/codAzuNoAsociado';
							tocarMensaje(canal, audio, -1, -1, false);
						}								
						variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.FINALIZAR;
					}
				} else {
					// Terminar...
					finalizar(canal, ahora);					
				}
				break;
			case ChanchitaColaborador.ACTUALIZAR_ESTADO_RECARGA:
				var audio = "";
				var keyEstado = variables.preRecargas.lista[variables.posicionLista].pago;
				//print("keyEstado: ",keyEstado);
				if (variables.tocarOpciones){
					audio += "/chanchita/opciones1pago2noPago0pasar,";
					variables.tocarOpciones = false;
				}
				// nombre grabado por el interno 
				audio += '/var/spool/asterisk/recording/greetingsChanchita/' + variables.preRecargas.lista[variables.posicionLista].codAzulito + ',';
				// saldo preRecarga
				audio += leerCantidad(variables.preRecargas.lista[variables.posicionLista].monto,'/chanchita/') + ',';
				// estado: pag√≥ o no pag√≥
				audio += '/chanchita/' + estado[keyEstado];
				//print("audio: ",audio);
				solicitarDatos(canal, '', true, 1, 3, null,	audio,
					'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
				variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.ACTUALIZANDO_ESTADO_RECARGA;
				break;
			case ChanchitaColaborador.ACTUALIZANDO_ESTADO_RECARGA:
				//print("ACTUALIZANDO_ESTADO_RECARGA");
				if(canal.solicitarInformacion.informacionValida()){
					var opcion = Number(canal.solicitarInformacion.getInfo());
					// siguiente						
					if(opcion == 0) {	
						print("opci√≥n marcada: " + opcion + " correlativo" + variables.preRecargas.lista[variables.posicionLista].correlativo +
						" monto: " + variables.preRecargas.lista[variables.posicionLista].monto);					
						variables.posicionLista ++;						
						continuar = true;			
					//actualizando a estado pag√≥
					} else if (opcion == 1) {
						variables.preRecargas.lista[variables.posicionLista].pago = 1;
						print("opci√≥n marcada: " + opcion + " correlativo" + variables.preRecargas.lista[variables.posicionLista].correlativo +
						" monto: " + variables.preRecargas.lista[variables.posicionLista].monto);
						variables.posicionLista ++;						
						continuar = true;
					//actualizando a estado no pag√≥
					} else if (opcion == 2) {
						variables.preRecargas.lista[variables.posicionLista].pago = 0; 
						print("opci√≥n marcada: " + opcion + " correlativo" + variables.preRecargas.lista[variables.posicionLista].correlativo +
						" monto: " + variables.preRecargas.lista[variables.posicionLista].monto);
						variables.posicionLista ++;						
						continuar = true;
					} else if (opcion == 3) {
                        print("opci√≥n marcada: " + opcion + " correlativo" + variables.preRecargas.lista[variables.posicionLista].correlativo +
                        " monto: " + variables.preRecargas.lista[variables.posicionLista].monto);
                        if (variables.posicionLista > 0) variables.posicionLista --;											
                        continuar = true;
                    } else {
						tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
						variables.tocarOpciones = true;	
					}
					//print("logitud de lista: ",variables.preRecargas.lista.length);
					if (variables.posicionLista < variables.preRecargas.lista.length) {
						variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.ACTUALIZAR_ESTADO_RECARGA;
					} else {
						variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.VALIDAR_LISTA;
					}										
				} else{
					// Terminar...
					finalizar(canal, ahora);
				}	
				break;
			case ChanchitaColaborador.VALIDAR_LISTA:
				var total = 0;
				var numeroDeRecargas = 0;
				print(JSON.stringify(variables.preRecargas.lista));
				for (i in variables.preRecargas.lista){					
					if(Number(variables.preRecargas.lista[i].pago) == 1)	{
						total += variables.preRecargas.lista[i].monto;
						print("validacion, correlativo: ",variables.preRecargas.lista[i].correlativo , "monto",variables.preRecargas.lista[i].monto);
						numeroDeRecargas++;
					}
				}
				var audio = '/chanchita/numeroDeRecargasPagadas' +
					',/chanchita/' + numeroDeRecargas.toString() +
					',/chanchita/ustedDebeTener,' + leerCantidad(total,'/chanchita/') +
					',/chanchita/marque1paraActualizarListaPreRecargas';
				//print("audio2: ",audio);
				solicitarDatos(canal, '', true, 1, 3, null,	audio,
					'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
				variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.VALIDANDO_LISTA;
				break;
			case ChanchitaColaborador.VALIDANDO_LISTA:
				if(canal.solicitarInformacion.informacionValida()){
					var opcion = Number(canal.solicitarInformacion.getInfo());		
					//validando lista
					if (opcion == 1) {
						var parametros = Object.create(null);
						parametros.lista  =  JSON.stringify(variables.preRecargas.lista);
						print("parametros: ",JSON.stringify(parametros));
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarLista', 
							JSON.stringify(parametros), 3, 5, false);							
						variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.SOLICITAR_CIERRE_DE_LISTA;
					//actualizando a estado no pag√≥
					} else {
						tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.VALIDAR_LISTA;
					}
				} else {
					// Terminar...
					finalizar(canal, ahora);
				}
				break;
			case ChanchitaColaborador.SOLICITAR_CIERRE_DE_LISTA:
				if(canal.solicitarInformacion.informacionValida()){
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					print(respuestaConsulta);					
					if (respuestaConsulta.resultado == "OK") {
						solicitarDatos(canal, '', true, 1, 3, null,	'/chanchita/actualizacionExitosaMarque1ParaCerrarLista',
							'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
					} else {
						tocarMensaje(canal, '/chanchita/fallaCierreDeLista', -1, -1, false);					
					}
					variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.CERRAR_LISTA;
				} else {
						// Terminar...
						finalizar(canal, ahora);
				}					
				break;
			case ChanchitaColaborador.CERRAR_LISTA:	
				if(canal.solicitarInformacion.informacionValida()){
					var opcion = Number(canal.solicitarInformacion.getInfo());		
					//validando lista
					if (opcion == 1) {
						for (i in variables.preRecargas.lista){
							variables.preRecargas.lista[i].estadoLista="cerradaColaborador";
						}
						var parametros = Object.create(null);
						parametros.lista  =  JSON.stringify(variables.preRecargas.lista);						// 
						print("parametros: ",JSON.stringify(parametros));
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarLista', 
							JSON.stringify(parametros), 3, 5, false);							
						variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.CERRANDO_LISTA;
					//actualizando a estado no pag√≥
					} else {
						tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.SOLICITAR_CIERRE_DE_LISTA;
					}
				} else {
					// Terminar...
					finalizar(canal, ahora);
				}	
				break;
			case ChanchitaColaborador.CERRANDO_LISTA:
				if(canal.solicitarInformacion.informacionValida()){
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					print(respuestaConsulta);					
					if (respuestaConsulta.resultado == "OK" && respuestaConsulta.mensaje=="procesadas") {
						tocarMensaje(canal, '/chanchita/cierreDeListaExitoso', -1, -1, false);
					} else if (respuestaConsulta.resultado == "OK" && respuestaConsulta.mensaje=="listaIncompleta") {
						tocarMensaje(canal, '/chanchita/recargasPendientesColaborador', -1, -1, false);					
					} else {
						tocarMensaje(canal, '/chanchita/fallaCierreDeLista', -1, -1, false);					
					}
					variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.FINALIZAR;
				} else {
						// Terminar...
						finalizar(canal, ahora);
				}					
				variables.estadoFuncion[variables.nivel] = ChanchitaColaborador.FINALIZAR;			
				break;
			case ChanchitaColaborador.FINALIZAR:
				// Terminar...
				finalizar(canal, ahora);
				break;
		}
		// Guardar las variables en el canal
		canal.variables = JSON.stringify(variables);
	} while(continuar)
}

//FINchanchitaColaborador

//iniciocerrarchamcha
var CerrarChancha = {
	VERIFICAR_PERFIL: 1,
	SOLICITAR_LISTA: 2,
	SOLICITANDO_LISTA: 3,
	CONSULTANDO_MONTO_LISTAS: 4,
	PEDIR_AUTORIZACION_CERRAR_LISTA: 5,
	PROCESAR_LISTA: 6,
	PROCESANDO_LISTA: 7,
	CERRAR_LISTA_LOCAL:8,
	CERRANDO_LISTA_LOCAL: 9,
    OPCION_INGRESAR_NUEVA_LISTA: 10,
	OPCIONES_INGRESANDO_NUEVA_LISTA:11,
	FINALIZAR_MODULO: 12
};

function cerrarChancha(canal, ahora, inicio) {
	// Verificar si se colg√≥ la llamada
	var variables = null;

	if (inicio) {
		if (canal.variables && canal.variables != '') variables = JSON.parse(canal.variables);
		else variables = Object.create(null);
		variables.nivel = 0;
		variables.tarificar = false;
		variables.montoMinimo = 1;
		variables.cantidadMinRecargasPagadas = 1;
		// Definir m√≥dulo y estado
		canal.modulo = Modulos.CERRAR_CHANCHA;
		variables.estadoFuncion = [CerrarChancha.VERIFICAR_PERFIL];
		canal.variables = JSON.stringify(variables);
	}

	do {
		// Recuperar variables
		var continuar = false;
		if (canal.variables == null) {
			variables = Object.create(null);
		} else {
			variables = JSON.parse(canal.variables);
		}

		// Verificar si se colg√≥ la llamada
		if (canal.colgoLlamada) {
			// Terminar...
			finalizar(canal, ahora);
			return;
		}
		print("cerrarChancha:"+ variables.estadoFuncion[variables.nivel]);
		switch (variables.estadoFuncion[variables.nivel]) {
			case CerrarChancha.VERIFICAR_PERFIL:
				datosUsuario = JSON.parse(canal.datosUsuario);
				if(Number(datosUsuario.interno.tipo) == 11){
					variables.estadoFuncion = [CerrarChancha.SOLICITAR_LISTA];
					continuar = true;
				} else {
					tocarMensaje(canal, '/chanchita/personalNoAutorizado',  -1, -1, false);
					variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
				}				
				break;
			/*case CerrarChancha.SOLICITAR_CLAVE_AZULITO:
				solicitarDatos(canal, '', true, 4, 3, null, '/chanchita/claveChanchitaAzulito',
					'/chanchita/reintentoClaveChanchitaAzulito', '/chanchita/fallaSolicitud', 10, 5, false);
				variables.estadoFuncion = [CerrarChancha.SOLICITANDO_CLAVE_AZULITO];
				break;
			
			case CerrarChancha.SOLICITANDO_CLAVE_AZULITO:				
				if (canal.solicitarInformacion.informacionValida()){
					var parametros = Object.create(null);
					parametros.passChanchita = canal.solicitarInformacion.getInfo();
					parametros.prefijoPenal = prefijoCarcel;
					canal.inicializarConsultaLocal(null, 'preRecargas.getPassPreRecargas', 
						JSON.stringify(parametros), 3, 5, false);
					variables.estadoFuncion = [CerrarChancha.SOLICITAR_MONTO_LISTA];
				} else {
					finalizar(canal, ahora);
				}
				break;*/

			case CerrarChancha.SOLICITAR_LISTA:			
				solicitarDatos(canal, '', true, 0, 3, null, '/chanchita/solicitarListaCerrar',
					'/chanchita/solicitarListaCerrar', '/chanchita/fallaSolicitud', 10, 5, false);
				variables.estadoFuncion = [CerrarChancha.SOLICITANDO_LISTA];
				break;
			
			case CerrarChancha.SOLICITANDO_LISTA:
				if (canal.solicitarInformacion.informacionValida()) {
					variables.idLista = canal.solicitarInformacion.getInfo();
					print("variables.idLista:"+variables.idLista);
					var parametros = '{"idLista":' + variables.idLista + '}';
					canal.inicializarConsultaLocal(null, 'preRecargas.consultarMontoListas', 
						parametros, 3, 5, false);
					variables.estadoFuncion = [CerrarChancha.CONSULTANDO_MONTO_LISTAS];
				} else {
					finalizar(canal, ahora);
				}
				break;
			
			case CerrarChancha.CONSULTANDO_MONTO_LISTAS:
				print(canal.consultaLocal.getInfo());
				if (canal.consultaLocal.getInfo()) {
					// {"resultado":"OK", preRecarga:{"correlativo":1, "monto": 5}}
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					if (respuestaConsulta.resultado.startsWith("OK")) {
						if (respuestaConsulta.motivo) {
							if (respuestaConsulta.motivo.startsWith("sinRecargasOInvalida")) {
								tocarMensaje(canal, '/chanchita/sinRecargasOInvalida',  -1, -1, false);
								variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
							} else {
								finalizar(canal, ahora);
							}
						} else {
							variables.montoT = respuestaConsulta.montoTotal;
							variables.cantRecargas = respuestaConsulta.cantRecargas;
							variables.recargasPagadas = respuestaConsulta.recargasPagadas;

							var listaCantMonto = ['/chanchita/ustedTieneUnMontoTotalDe', leerCantidad(variables.montoT, '/chanchita/'), 
								'/chanchita/enLista', '/chanchita/' + variables.idLista, '/chanchita/queTiene', 
								'/chanchita/' + variables.recargasPagadas, '/chanchita/recargasPagadas'];
							
							tocarMensaje(canal, listToString(listaCantMonto),-1, -1, true);
							variables.estadoFuncion = [CerrarChancha.PEDIR_AUTORIZACION_CERRAR_LISTA];
						}
					} else {
						finalizar(canal, ahora);
					}
				} else {
					finalizar(canal, ahora);
				}
				break;

			case CerrarChancha.PEDIR_AUTORIZACION_CERRAR_LISTA:
				solicitarDatos(canal, '', true, 1, 3, null, '/chanchita/marqueUnoParaProcesaryDosParaCancelar',
					'/chanchita/marqueUnoParaProcesaryDosParaCancelar', '/chanchita/fallaSolicitud', 10, 5, false);
				variables.estadoFuncion = [CerrarChancha.PROCESAR_LISTA];
				break;
			
			case CerrarChancha.PROCESAR_LISTA:
				if (canal.solicitarInformacion.informacionValida()) {
					variables.idOpcion = canal.solicitarInformacion.getInfo();
					var parametros = Object.create(null);
					if (variables.idOpcion == 1 ) {
						if(variables.montoT >= variables.montoMinimo && 
								variables.recargasPagadas >= variables.cantidadMinRecargasPagadas){
							// obtenermos la lista que se enviar√° a telef√≥nica
							parametros.idLista = variables.idLista;
							canal.inicializarConsultaLocal(null, 'preRecargas.obtenerListaCerradaColaborador', 
								JSON.stringify(parametros), 3, 5, false);
							variables.estadoFuncion = [CerrarChancha.PROCESANDO_LISTA]
						}
						else{
							tocarMensaje(canal, '/chanchita/requisitosMinDeAprobacion',  -1, -1, false);
							variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
						}
					} else if(variables.idOpcion == 2){
						parametros.idLista = variables.idLista;
						parametros.estadoLista = "cancelarLista";
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarMontoLista', 
							JSON.stringify(parametros), 3, 5, false);
                            variables.estadoFuncion = [CerrarChancha.CERRANDO_LISTA_LOCAL];
					}
					else {
						finalizar(canal, ahora);
					}
				} else {
					finalizar(canal, ahora);
				}
				break;
			
			case CerrarChancha.PROCESANDO_LISTA:
				if (canal.consultaLocal.getInfo()) {
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					if (respuestaConsulta.resultado.startsWith("OK")) {
						if (respuestaConsulta.motivo) {
							if (respuestaConsulta.motivo.startsWith("listaNoExiste")) {
								tocarMensaje(canal, '/chanchita/listaNoExiste',  -1, -1, false);
								variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
							} else {
								finalizar(canal, ahora);
							}
						} else {							
							if (respuestaConsulta.length == 0) {
								// No deberia pasar nunca..
								tocarMensaje(canal, '/chanchita/listaIngresadaSinRecargas',  -1, -1, false);
								variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
							} else {
								var parametros = Object.create(null);
								parametros.idColaborador = respuestaConsulta.colaborador;
								parametros.prefijoPenal = prefijoCarcel;
								parametros.jsonListaRecargas = respuestaConsulta.jsonUpdateTelef;
								print("procesando lista",JSON.stringify(parametros));
								// se env√≠a la lista a telefonica
								consultaBaseDeDatos(canal, 0, null,
									'telefonia.recargasChanchita',JSON.stringify(parametros),
									null, false, 3, 5, false);
								//tocarMensaje(canal, '/chanchita/listaProcesadaExito',-1, -1, true);
								variables.estadoFuncion = [CerrarChancha.CERRAR_LISTA_LOCAL];
							}
						}
					} else {
						finalizar(canal, ahora);
					}
				}
				break;
			
			case CerrarChancha.CERRAR_LISTA_LOCAL:
				// Se eval√∫a si actuliz√≥ la bdd principal para proceder con el cierre local				
				if (canal.consultaBdD.getInfo()) {
					var respuesta = JSON.parse(canal.consultaBdD.getInfo());
					if (respuesta.result == 'OK' && respuesta.estado == 'actualizacionCompleta'){
						print("respuesta: ",JSON.stringify(canal.consultaBdD.getInfo()));
						var parametros = Object.create(null);						
						parametros.idLista = variables.idLista;
						parametros.estadoLista = "procesarLista";
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarMontoLista', 
							JSON.stringify(parametros), 3, 5, false);
						variables.estadoFuncion = [CerrarChancha.CERRANDO_LISTA_LOCAL];
					} else if (respuesta.result == 'OK' && respuesta.estado == 'sesionAbiertaOtraFecha'){
						tocarMensaje(canal, '/chanchita/sesionAbiertaDeOtraFecha',-1, -1, true);
						variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
					} else if (respuesta.result == 'OK' && respuesta.estado == 'abrirSesion'){
						tocarMensaje(canal, '/chanchita/primeroAbrirSesion',-1, -1, true);
						variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
					} else {
						tocarMensaje(canal, '/chanchita/listaNoProcesada',-1, -1, true);
						variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
					}
				} else{
					print("bad!!!");
					tocarMensaje(canal, '/chanchita/listaNoProcesada',-1, -1, true);
					variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];						
				}				
				break;
			case CerrarChancha.CERRANDO_LISTA_LOCAL:
				if (canal.consultaLocal.getInfo()) {
					var respuesta = JSON.parse(canal.consultaLocal.getInfo());
					if (respuesta.motivo == 'procesada'){
						tocarMensaje(canal, '/chanchita/listaProcesadaExito',-1, -1, true);
                        print("procesada.....",canal.consultaLocal.getInfo());
					} else if (respuesta.motivo == 'cancelada'){
						print("cancelada.....",canal.consultaLocal.getInfo());
						tocarMensaje(canal, '/chanchita/listaCanceladaExito',-1, -1, true);
					}
					variables.estadoFuncion = [CerrarChancha.OPCION_INGRESAR_NUEVA_LISTA];
				} else {
					tocarMensaje(canal, '/chanchita/listaNoProcesada',-1, -1, true);
					variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
				}
				break;
            case CerrarChancha.OPCION_INGRESAR_NUEVA_LISTA:
                solicitarDatos(canal, '', true, 1, 3, null, '/chanchita/opcionesIngresarNuevaLista',
                    '/chanchita/reintento', '/chanchita/fallaSolicitud', 10, 5, false);
                    variables.estadoFuncion = [CerrarChancha.OPCIONES_INGRESANDO_NUEVA_LISTA];
                    break;

            case CerrarChancha.OPCIONES_INGRESANDO_NUEVA_LISTA:		
                if (canal.solicitarInformacion.informacionValida()) {
                    variables.Opcion = canal.solicitarInformacion.getInfo();
                    if(variables.Opcion == 1){
                        continuar = true;
                        variables.estadoFuncion = [CerrarChancha.SOLICITAR_LISTA];
                    }else{
                        tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, true);
                        variables.estadoFuncion = [CerrarChancha.OPCION_INGRESAR_NUEVA_LISTA];	
                    }
                }else{
                    continuar = true;
                    variables.estadoFuncion = [CerrarChancha.FINALIZAR_MODULO];
                }
                break;
			case CerrarChancha.FINALIZAR_MODULO:
				finalizar(canal, ahora);
				break;
		}

		// Guardar las variables en el canal
		canal.variables = JSON.stringify(variables);
	} while(continuar);
};

//--------------------PreVentaColaborador-------------------------
var PreVentaColaborador = {
	CONSULTAR_LISTA: 1,
	CONSULTANDO_LISTA: 2,
	INGRESAR_DNI: 3,
	INGRESANDO_DNI: 4,
	CONSULTAR_RECARGA_INTERNO: 5,
	CONSULTANDO_RECARGA_INTERNO: 6,
	VALIDAR_EXISTENCIA_GREETING: 7,
	VALIDANDO_EXISTENCIA_GREETING: 8,
	GRABANDO_GREETING: 9,
	INGRESAR_MONTO: 10,
	INGRESANDO_MONTO: 11,
	ACTUALIZANDO_PRE_RECARGA: 12,
	INFORMANDO_RECARGAS_AGREGADAS: 13,
	VALIDAR_PRE_RECARGAS: 14,
	VALIDANDO_PRE_RECARGAS: 15,
	FINALIZAR: 16
};

function preVentaColaborador(canal, ahora, inicio){
	if (inicio) {
		if (canal.variables && canal.variables != '') variables = JSON.parse(canal.variables);
		else variables = Object.create(null);
		variables.posicionLista=0;
		variables.nivel=0;
		variables.tocarOpciones = true;	
		variables.listaPreRecarga = [];
		variables.numeroRecargasPermitidas = 1000;	
		// Definir m√≥dulo y estado
		canal.modulo = Modulos.PRE_VENTA_COLABORADOR;
		variables.estadoFuncion = [PreVentaColaborador.CONSULTAR_LISTA];
		canal.variables = JSON.stringify(variables);
	}
	var continuar = false;
	do {
		continuar = false;
		if (canal.variables == null) {
			variables = Object.create(null);
		} else {
			variables = JSON.parse(canal.variables);
		}
		if (canal.colgoLlamada) {
			// Terminar...
			finalizar(canal, ahora);
			return;
		}
		//print("preventa: ",variables.estadoFuncion[variables.nivel]);
		switch(variables.estadoFuncion[variables.nivel]){
			case PreVentaColaborador.CONSULTAR_LISTA:
				//obtenemos los datos de la lista como idLista, version y cant de recargas pagadas				
				var parametros = Object.create(null);
				print("canal.dni",canal.dni);
				parametros.codAzulito = canal.dni;
				canal.inicializarConsultaLocal(null, 'preRecargas.obtenerDatosPreRecargaColaborador', 
					JSON.stringify(parametros), 3, 5, false);
				variables.estadoFuncion[variables.nivel] = PreVentaColaborador.CONSULTANDO_LISTA;								
				break;

			case PreVentaColaborador.CONSULTANDO_LISTA:
				if (canal.consultaLocal.getInfo()) {
					datosPreRecarga = JSON.parse(canal.consultaLocal.getInfo())
					if (datosPreRecarga.mensaje == "abierta" ){
						variables.idLista = datosPreRecarga.idLista;
						variables.version = datosPreRecarga.version;
						variables.cantidadInternosLista = datosPreRecarga.cantidadInternosLista;
						if(variables.cantidadInternosLista < variables.numeroRecargasPermitidas) {
							continuar = true;
							variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESAR_DNI;
						} else {
							tocarMensaje(canal, '/chanchita/llegoAlLimiteDeRecargasPorChanchita',-1,-1, true);
							variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INFORMANDO_RECARGAS_AGREGADAS;
						}											
					} else if (datosPreRecarga.mensaje == "codAzuNoAsociado") {
						tocarMensaje(canal, '/chanchita/codAzuNoAsociado', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.FINALIZAR;
					} else {
						tocarMensaje(canal, '/chanchita/listaCerradaColaborador', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.FINALIZAR;
					}			
				} else {
					continuar = true;
					variables.estadoFuncion[variables.nivel] = PreVentaColaborador.FINALIZAR;
				}
				break;

			case PreVentaColaborador.INGRESAR_DNI:										
				// ingresar dni# + monto# + 0# para salir
				var audio = '';
				if (variables.tocarOpciones){
					audio += '/chanchita/ingresarDniIngresarMonto,';
					variables.tocarOpciones = false;
				}
				audio += '/chanchita/codigoAzulito';
				solicitarDatos(canal, '', true, 0, 3, null,audio,
					'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
				variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESANDO_DNI;
				break;

			case PreVentaColaborador.INGRESANDO_DNI:
				if (canal.solicitarInformacion.informacionValida()) {					
					if (canal.solicitarInformacion.getInfo() != "0" ){	
						variables.dni=canal.solicitarInformacion.getInfo()
						// validamos que exista el codAzulito en la BDD
						consultaBaseDeDatos(canal, 0, null,
							'telefonia.consultarInterno',
							'{"idInterno":"' + variables.dni + '",' +
								'"extensionTelefono":"' + canal.numeroExtension + '",' +
								'"tipoInfo":1}',
							null, false, 3, 5, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.CONSULTAR_RECARGA_INTERNO;

					// marc√≥ "0#", deja de ingresar recargas.
					} else {
						continuar = true;
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INFORMANDO_RECARGAS_AGREGADAS;
					}
				} else {
					finalizar(canal, ahora);
				}
				break;				
			
			case PreVentaColaborador.CONSULTAR_RECARGA_INTERNO:
				if(canal.consultaBdD.getInfo()){
					var consultaInterno = JSON.parse(canal.consultaBdD.getInfo());
					if(consultaInterno.existeBdD && consultaInterno.interno.estado == "ACTIVO"){
						// consultamos si el interno tiene una preRecarga en otra lista o en la misma lista.
						var parametros = Object.create(null);
						parametros.idLista = variables.idLista;
						parametros.codAzulito = variables.dni;
						canal.inicializarConsultaLocal(null, 'preRecargas.consultarRecargaInterno', 
							JSON.stringify(parametros), 3, 5, false);	
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.CONSULTANDO_RECARGA_INTERNO;						
					} else {
						variables.tocarOpciones = true;
						tocarMensaje(canal, '/chanchita/dniNoExiste', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESAR_DNI;
					}					
				} else {
					finalizar(canal, ahora);
				}
				break;
			
			case PreVentaColaborador.CONSULTANDO_RECARGA_INTERNO:
				if(canal.consultaLocal.getInfo()){
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					// mensaje = "recargar", cuando no tiene recargas o la tiene en la misma lista (actualizar)									
					if (respuestaConsulta.mensaje == "recargar") {
						continuar = true;
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.VALIDAR_EXISTENCIA_GREETING;
					} else {
						variables.tocarOpciones = true;
						tocarMensaje(canal, '/chanchita/tieneUnaRecargaEnOtraLista', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESAR_DNI;
					}
				} else {
					finalizar(canal, ahora);
				}
				break;
		
			case PreVentaColaborador.VALIDAR_EXISTENCIA_GREETING:
				var parametros = Object.create(null);
				parametros.codAzulito = variables.dni;
				canal.inicializarConsultaLocal(null, 'preRecargas.consultarGreeting', 
					JSON.stringify(parametros), 3, 5, false);
				variables.estadoFuncion[variables.nivel] = PreVentaColaborador.VALIDANDO_EXISTENCIA_GREETING;	
				break;
			
			case PreVentaColaborador.VALIDANDO_EXISTENCIA_GREETING:
				if (canal.consultaLocal.getInfo()) {
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					if (respuestaConsulta.resultado.startsWith("OK")) {
						if (respuestaConsulta.motivo) {
							if (respuestaConsulta.motivo.startsWith("noGreeting")) {								
								greetingPreRecarga(canal, true, variables);
								variables.estadoFuncion[variables.nivel] = PreVentaColaborador.GRABANDO_GREETING;
							} else {
								// ya tiene un saludo..
								continuar = true;
								variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESAR_MONTO;
							}
						}
					} else {
						finalizar(canal, ahora);
					}
				} else {
					finalizar(canal, ahora);
				}
				break;

			case PreVentaColaborador.GRABANDO_GREETING:
				if (respuesta = greetingPreRecarga(canal, false, variables))
					if (respuesta == 1) {
						var parametros = Object.create(null);
						parametros.codAzulito = variables.dni;
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarGreeting', 
							JSON.stringify(parametros), 3, 5, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESAR_MONTO;
					} 
				break;

			case PreVentaColaborador.INGRESAR_MONTO:
				if(canal.consultaBdD.getInfo()){
					var consultaInterno = JSON.parse(canal.consultaBdD.getInfo());
					if(consultaInterno.existeBdD){
						solicitarDatos(canal, '', true, 0, 3, null,'/chanchita/monto',
							'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESANDO_MONTO;						
					} else {
						variables.tocarOpciones = true;
						tocarMensaje(canal, '/chanchita/dniNoExiste', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESAR_DNI;
					}					
				} else {
					// fall√≥ consulta FINALIZAR
					finalizar(canal, ahora);
				}
				break;

			case PreVentaColaborador.INGRESANDO_MONTO:
				if (canal.solicitarInformacion.informacionValida()) {
					variables.montoIngresado = Number(canal.solicitarInformacion.getInfo());
					if (validarMontoIngresadoPreRecargaChanchita(variables.montoIngresado)){ 	
						// subimos la recarga
						var listaPreRecarga = [];
						var preRecarga = Object.create(null);
						preRecarga.idLista = variables.idLista;
						preRecarga.version = variables.version;
						preRecarga.codAzulito = variables.dni;
						preRecarga.monto = variables.montoIngresado;
						preRecarga.pago = 1;
						preRecarga.fechaHora = Date.now();
						preRecarga.estadoLista = "abierta";					
						print(JSON.stringify(listaPreRecarga));

						// insertamos o actualizamos las preRecargas para obtener los montos ingresados						
						var insertar = true;
						if(variables.listaPreRecarga.length > 0){
							for(var pos in variables.listaPreRecarga){
								if (variables.listaPreRecarga[pos].codAzulito == variables.dni){
									variables.listaPreRecarga[pos].monto = variables.montoIngresado;
									insertar = false;
								}
							}
						}
						if (insertar){							
							variables.listaPreRecarga.push(preRecarga);							
						}
						print("lista............: ",JSON.stringify(variables.listaPreRecarga));
						print("cant internos.........: ",variables.cantidadInternosLista);
						listaPreRecarga.push(preRecarga);
						var parametros = Object.create(null);
						parametros.lista  =  JSON.stringify(listaPreRecarga);
						canal.inicializarConsultaLocal(null, 'preRecargas.registrarPreRecargasColaborador', 
							JSON.stringify(parametros), 3, 5, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.ACTUALIZANDO_PRE_RECARGA;
					} else {
						tocarMensaje(canal, '/chanchita/montoInvalido',-1,-1, true);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.INGRESAR_MONTO;
					}
				} else {
					finalizar(canal, ahora);
				}
				break;

			case PreVentaColaborador.ACTUALIZANDO_PRE_RECARGA:
				if(canal.consultaLocal.getInfo()){
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());									
					if (respuestaConsulta.resultado == "OK") {
						print("cant internos: ",variables.cantidadInternosLista);
						tocarMensaje(canal, '/chanchita/recargaAgregada',-1,-1, true);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.CONSULTAR_LISTA;						
					} else {
						tocarMensaje(canal, '/chanchita/falloActualizacionDeListaPreRecargas', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = PreVentaColaborador.FINALIZAR;					
					}					
				} else {
						// Terminar...
						finalizar(canal, ahora);
				}	
				break;

			case PreVentaColaborador.INFORMANDO_RECARGAS_AGREGADAS:
				var total = 0;
				var numeroDeRecargas = 0;
				print(JSON.stringify(variables.listaPreRecarga));
				for (var pos in variables.listaPreRecarga){					
					if(Number(variables.listaPreRecarga[pos].pago) == 1)	{
						total += variables.listaPreRecarga[pos].monto;
						print("validacion, correlativo: ", "monto",variables.listaPreRecarga[pos].monto);
						numeroDeRecargas++;
					}
				}
				if (numeroDeRecargas > 0) {
					// tocamos numero de recargas ingresadas y el monto total de esas recargas (lista ivr)
					var audio = '/chanchita/numeroDeRecargasIngresadasEnEsteMomento' +
						',/chanchita/' + numeroDeRecargas.toString() +
						',/chanchita/ustedDebeTener,' + leerCantidad(total,'/chanchita/');
					tocarMensaje(canal, audio, -1, -1, false);					
				} else {
					continuar = true;					
				}
				variables.estadoFuncion[variables.nivel] = PreVentaColaborador.VALIDAR_PRE_RECARGAS;
				break;			
		
			case PreVentaColaborador.VALIDAR_PRE_RECARGAS:
				validarPreRecargas(canal, true, variables,ahora);
				variables.estadoFuncion[variables.nivel] = PreVentaColaborador.VALIDANDO_PRE_RECARGAS;
				break;
			
			case PreVentaColaborador.VALIDANDO_PRE_RECARGAS:
				//print("regresa de la funcion consulta...........................");
				if (validarPreRecargas(canal, false, variables,ahora)){
					continuar = true;
					variables.estadoFuncion[variables.nivel] = PreVentaColaborador.FINALIZAR;
				}
				break;
			
			case PreVentaColaborador.FINALIZAR:
				// Terminar...
				finalizar(canal, ahora);
		}// Guardar las variables en el canal
		canal.variables = JSON.stringify(variables);
	} while(continuar)
}

// MODULOS CHANCHITA 
var GreetingPreRecarga = {
	TOCAR_INVITACION_GREETING_CHAT: 1,
	TOCANDO_INVITACION_GREETING_CHAT: 2,
	SELECCIONAR_OPCION: 3,
	SELECCIONANDO_OPCION: 4
}

function greetingPreRecarga(canal, inicio, variables) {
	var value = 0;
	if (inicio) {
		// inicializar primer estado de la funcion.
		if (variables.estadoFuncion[variables.nivel + 1]) {
			variables.estadoFuncion[variables.nivel + 1] = GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT;
		} else {
			variables.estadoFuncion.push(GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT);
		}
		// Otras inicializaciones
		variables.name = 'greetingsChanchita/' + variables.dni;
		variables.maxDurationSeconds = 5;
		variables.maxSilenceSeconds = 3;
		variables.ifExists = 'overwrite';
		variables.terminateOn = '#';
	}
	variables.nivel++;

	do {
		// Inicializar variable para que salga del do en el primer ciclo
		continuar = false;

		print("Greeting: " + variables.nivel + "," + variables.estadoFuncion[variables.nivel], variables.estadoFuncion.length);
		switch (variables.estadoFuncion[variables.nivel]) {	
			case GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT:
				tocarMensaje(canal, '/chanchita/invitacionGreeting', -1, -1, true);
				variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.TOCANDO_INVITACION_GREETING_CHAT;
				break;
			case GreetingPreRecarga.TOCANDO_INVITACION_GREETING_CHAT:
				grabarMensaje(canal, variables.name, variables.maxDurationSeconds,
					variables.maxSilenceSeconds, variables.ifExists, variables.terminateOn);
				variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONAR_OPCION;
				break;
			case GreetingPreRecarga.SELECCIONAR_OPCION:
				solicitarDatos(canal, '2,3,4', true, 1, 3,
					null, '/chanchita/tocarOpcionesMensajeVoz', '/chanchita/reintentoSolicitud', '/chanchita/fallaSolicitud', 
					10, 5, false);
				variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONANDO_OPCION;
				break;
			case GreetingPreRecarga.SELECCIONANDO_OPCION:
				var idOpcion = -1;
				if (canal.solicitarInformacion.informacionValida()) idOpcion = canal.solicitarInformacion.getInfo();
				print(idOpcion);
				if (idOpcion == '2') {
					// Escuchar grabacion
					tocarMensaje(canal, '/var/spool/asterisk/recording/' + variables.name, -1, -1, false);
					variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONAR_OPCION;
				} else if (idOpcion == '3') {
					// Volver a grabar
					variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.TOCAR_INVITACION_GREETING_CHAT;
					continuar = true;	
				} else if (idOpcion == '4') {
					// sale de modulo grabacion..
					value = 1;
				} else {
					// Opcion invalida o problemas seleccionandola...
					tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
					variables.estadoFuncion[variables.nivel] = GreetingPreRecarga.SELECCIONAR_OPCION;
				}
				break;
		}
	} while (continuar);

	// Sale de la funcion (aun no termina)
	variables.nivel--;
	return value;
}

//ESTADO CHANCHITA EXTERNA

var EstadoChanchitaExterna = {
	INGRESAR_CODIGO_TRANSACCION: 1,
	CONSULTAR_CODIGO_TRANSACCION: 2,
	CONSULTANDO_CODIGO_TRANSACCION: 3,
	OBTENER_CODIGO_TRANSACCION: 4,
	OBTENIENDO_CODIGO_TRANSACCION: 5,
	FINALIZAR: 6
}

function estadoChanchitaExterna(canal, ahora, inicio){
	print('Ingresa a Chanchita Externa')
	if (inicio) {
		if (canal.variables && canal.variables != '') variables = JSON.parse(canal.variables);
		else variables = Object.create(null);
		// Definir m√≥dulo y estado
		variables.nivel=0;
		canal.modulo = Modulos.ESTADO_CHANCHITA_EXTERNA;
		variables.estadoFuncion = [EstadoChanchitaExterna.INGRESAR_CODIGO_TRANSACCION];
		canal.variables = JSON.stringify(variables);
	}
	var continuar = false;
	do {
		continuar = false;
		if (canal.variables == null) {
			variables = Object.create(null);
		} else {
			variables = JSON.parse(canal.variables);
		}
		if (canal.colgoLlamada) {
			// Terminar...
			finalizar(canal, ahora);
			return;
		}
		print("chanchitaExterna: ",variables.estadoFuncion[variables.nivel]);
		switch(variables.estadoFuncion[variables.nivel]){

			case EstadoChanchitaExterna.INGRESAR_CODIGO_TRANSACCION: 
			//INGRESE NRO. DE TRANSACCI√ìN# O MARQUE 0# PARA CONSULTAR SU CHANCHITA EXTERNA 
				solicitarDatos(canal, '', true, 0, 3, null,'/chanchita/ingresarCodigoTransaccion',
					'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 15, 10, false);
				variables.estadoFuncion[variables.nivel] = EstadoChanchitaExterna.CONSULTAR_CODIGO_TRANSACCION;
			break;
			case EstadoChanchitaExterna.CONSULTAR_CODIGO_TRANSACCION:
				if (canal.solicitarInformacion.informacionValida()) {					
					if (canal.solicitarInformacion.getInfo() != "0" ){
						//CONSULTA EL NRO DE TRANSACCION A TELEF
						jsonParametros= Object.create(null);
						parametros= Object.create(null);

						jsonParametros.codTransaccion = canal.solicitarInformacion.getInfo();
						parametros.jsonParametros =  JSON.stringify(jsonParametros);

						consultaBaseDeDatos(canal, 0, null, 
							'telefonia.obtenerEstadoTransaccionChanchitaExterna', JSON.stringify(parametros), null, 
							false, 3, 5, false);

						variables.estadoFuncion[variables.nivel] = EstadoChanchitaExterna.CONSULTANDO_CODIGO_TRANSACCION;
					}else{
						//CREAR CONSULTA PARA OBTENER C√ìDIGO TRANSACCION
						jsonParametros= Object.create(null);
						parametros= Object.create(null);
						
						jsonParametros.codAzulito = canal.dni;
						parametros.jsonParametros =  JSON.stringify(jsonParametros);

						consultaBaseDeDatos(canal, 0, null, 
							'telefonia.obtenerCodigoTransaccionChanchitaExterna', JSON.stringify(parametros), null, 
							false, 3, 5, false);

						variables.estadoFuncion[variables.nivel] = EstadoChanchitaExterna.OBTENIENDO_CODIGO_TRANSACCION;		
					}
				}else{
					finalizar(canal,ahora);
				}
		
			break;
			case EstadoChanchitaExterna.CONSULTANDO_CODIGO_TRANSACCION:
				//print(canal.consultaBdD.getInfo());
				if (canal.consultaBdD.getInfo()) {
					var respuesta = JSON.parse(canal.consultaBdD.getInfo());
					if (respuesta.resultado == "OK"){
						var audio= '';
						// NO PROCESADA(0) | CANCELADA(1) | DENEGADA(2) | APROBADA(3) |¬†ACREDITADA(4)
						if(respuesta.estado == '0'){
							audio= '/chanchita/recargaExternaAunNoPagadaChanchitaExterna';
							}else if (respuesta.estado == '1'){
								audio= '/chanchita/canceladaChanchitaExterna';
							}else if (respuesta.estado == '2'){
								audio= '/chanchita/tarjetaNoAceptadaIntenteNuevamente';
							}else if(respuesta.estado == '3'){
								audio= '/chanchita/aprobadaChanchitaExterna';
							}else if (respuesta.estado == '4'){
								audio= '/chanchita/recargaAcreditadaChanchitaExterna';							
							}
							tocarMensaje(canal,audio, -1, -1, false);
							variables.estadoFuncion[variables.nivel] = EstadoChanchitaExterna.FINALIZAR;
					}else{
						audio= '/chanchita/codigoChanchitaExternaNoExiste';
						tocarMensaje(canal,audio, -1, -1, false);
						variables.estadoFuncion[variables.nivel] = EstadoChanchitaExterna.FINALIZAR;
					}
				} else {
						// Terminar...
						finalizar(canal, ahora);
					}										
				break;
			
			case EstadoChanchitaExterna.OBTENIENDO_CODIGO_TRANSACCION: 
				if(canal.consultaBdD.getInfo()){
					print(canal.consultaBdD.getInfo())
					var respuesta = JSON.parse(canal.consultaBdD.getInfo());
					var audio= [];
					if(respuesta.resultado == 'OK'){
						print(respuesta.codTransaccion)
						audio = audio.concat('/chanchita/suCodigoTransaccionEsC',textoCodigo(respuesta.codTransaccion,"/chanchita/"));
					}else{
						audio= '/chanchita/noHayCodigoTransaccionChanchitaExterna';
						variables.estadoFuncion[variables.nivel] = EstadoChanchitaExterna.FINALIZAR;
					}
					tocarMensaje(canal, audio, -1, -1, false);
				}	
				variables.estadoFuncion[variables.nivel] = EstadoChanchitaExterna.FINALIZAR;
			break;
			case EstadoChanchitaExterna.FINALIZAR:
				// Terminar...
				print("Finalizar");
				finalizar(canal, ahora);
				break;
		}
		canal.variables = JSON.stringify(variables);
	}while (continuar)
}

//---------------------ValidarPreRecargas------------------

var ValidarPreRecargas = {
	CONSULTAR_LISTA_PRERECARGA: 1,
	CONSULTANDO_LISTA_PRERECARGA: 2,
	ACTUALIZAR_ESTADO_RECARGA: 3,
	ACTUALIZANDO_ESTADO_RECARGA:4,
	VALIDAR_LISTA: 5,
	VALIDANDO_LISTA:6,
	SOLICITAR_CIERRE_DE_LISTA:7,
	CERRAR_LISTA:8,
	CERRANDO_LISTA:9,
	FINALIZAR:10,
	RETORNAR_TRUE:11,
	CERRAR_LISTA_EXTERNA_TELEFONICA:12,
	CERRANDO_LISTA_EXTERNA_TELEFONICA:13

}

function validarPreRecargas(canal, inicio, variables,ahora) {
	var value = 0;
	if (inicio) {
		print("inicio..................");
		// inicializar primer estado de la funcion.
		if (variables.estadoFuncion[variables.nivel + 1]){
			variables.estadoFuncion[variables.nivel + 1] = ValidarPreRecargas.CONSULTAR_LISTA_PRERECARGA;
		}
		else {
			variables.estadoFuncion.push(ValidarPreRecargas.CONSULTAR_LISTA_PRERECARGA);
		}
		variables.posicionLista=0;
		variables.tocarOpciones = true;
		variables.contarRecargasPagadas=0;
        variables.montoMinimoChanchitaExterna = 50;
		
	}

	variables.nivel++;
	var estado = { 1:'pago', 0:'noPago' };
	
	do {
		// Recuperar variables
		continuar = false;

		//print("miguelon: ", variables.estadoFuncion[variables.nivel]);
		switch (variables.estadoFuncion[variables.nivel]) {	
			case ValidarPreRecargas.CONSULTAR_LISTA_PRERECARGA:
				var parametros = Object.create(null);
				parametros.codAzulito = canal.dni;	
				canal.inicializarConsultaLocal(null, 'preRecargas.obtenerLista', 
					JSON.stringify(parametros), 3, 5, false);
				variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.CONSULTANDO_LISTA_PRERECARGA;
				break;

			case ValidarPreRecargas.CONSULTANDO_LISTA_PRERECARGA:
				print("canal.consultaLocal",JSON.parse(canal.consultaLocal.getInfo()));
				if (canal.consultaLocal.getInfo()) {
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					var audio = '/chanchita/consultandoRecargasChanchita,';						
					//lista abierta
					if (respuestaConsulta.resultado == "OK") {
						variables.preRecargas = JSON.parse(respuestaConsulta.mensaje);
						if (variables.preRecargas.lista){
							// si tiene recargas pagadas, se le informa.
							var total = 0;
							var numeroDeRecargas = 0;
							print(JSON.stringify(variables.preRecargas.lista));
							for (i in variables.preRecargas.lista){
								if(Number(variables.preRecargas.lista[i].pago) == 1){
									total += variables.preRecargas.lista[i].monto;
									numeroDeRecargas++;
								}
							}
							if (total>0){
								audio += '/chanchita/numeroDeRecargasPagadas' +
									',/chanchita/' + numeroDeRecargas.toString() + 
									',/chanchita/ustedDebeTener,' + leerCantidad(total,'/chanchita/');
									tocarMensaje(canal, audio, -1, -1, false);
							} else {
								continuar = true;
							}							
							variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.ACTUALIZAR_ESTADO_RECARGA;
						} else {
							audio += '/chanchita/noTienePreRecargas';
							tocarMensaje(canal, audio, -1, -1, false);	
							variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.FINALIZAR;
						}
					} else {
						if (respuestaConsulta.mensaje == "listaCerrada"){
							audio += '/chanchita/listaCerrada';
							tocarMensaje(canal, audio, -1, -1, false);
						} else {
							audio += '/chanchita/codAzuNoAsociado';
							tocarMensaje(canal, audio, -1, -1, false);
						}								
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.FINALIZAR;
					}
				} else {
					print("terminar");
					// Terminar...
					finalizar(canal, ahora);					
				}
				break;

			case ValidarPreRecargas.ACTUALIZAR_ESTADO_RECARGA:
				var audio = "";
				print("lista: ", JSON.stringify(variables.preRecargas.lista));
				print("pos_lista: ", JSON.stringify(variables.posicionLista));
				var keyEstado = variables.preRecargas.lista[variables.posicionLista].pago;
				//print("keyEstado: ",keyEstado);
				if (variables.tocarOpciones){
					audio += "/chanchita/recargasPagadasYNoPagadas,";
					audio += "/chanchita/opciones1pago2noPago0siguiente8pasar,";
					 //agregar audio
					variables.tocarOpciones = false;
				}
				// leer c√≥digo azulito del interno lista 
				audio += '/var/spool/asterisk/recording/greetingsChanchita/' + variables.preRecargas.lista[variables.posicionLista].codAzulito + ',';
				print("audio")
				// leer saldo preRecarga
				audio += leerCantidad(variables.preRecargas.lista[variables.posicionLista].monto,'/chanchita/') + ',';
				// leer estado: pag√≥ o no pag√≥
				audio += '/chanchita/' + estado[keyEstado];
				// print("audio: ",audio);
				solicitarDatos(canal, '', true, 1, 3, null,	audio,
				'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
				variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.ACTUALIZANDO_ESTADO_RECARGA;
			break;
			
			case ValidarPreRecargas.ACTUALIZANDO_ESTADO_RECARGA:
				//print("ACTUALIZANDO_DNI_RECARGA");
				if(canal.solicitarInformacion.informacionValida()){
					var opcion = Number(canal.solicitarInformacion.getInfo());										
					// siguiente
					print("variables.contarRecargasPagadas",variables.contarRecargasPagadas);						
					if(opcion == 0) {
						print("opci√≥n marcada: " + opcion + " correlativo" + variables.preRecargas.lista[variables.posicionLista].correlativo +
						" monto: " + variables.preRecargas.lista[variables.posicionLista].monto);					
						variables.posicionLista ++;
						if(estado[keyEstado]==1) variables.contarRecargasPagadas ++;
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.ACTUALIZAR_ESTADO_RECARGA;								
					//actualizando a estado "pag√≥" si DNI CORRECTO
					} else if (opcion == 1) {
						variables.preRecargas.lista[variables.posicionLista].pago = 1;
						print("opci√≥n marcada: " + opcion + " correlativo" + variables.preRecargas.lista[variables.posicionLista].correlativo +
						" monto: " + variables.preRecargas.lista[variables.posicionLista].monto);
						variables.posicionLista ++;	
						variables.contarRecargasPagadas ++;	
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.ACTUALIZAR_ESTADO_RECARGA;				
					//actualizando a estado "no pag√≥" si DNI INCORRECTO
					} else if (opcion == 2) {
						variables.preRecargas.lista[variables.posicionLista].pago = 0; 
						print("opci√≥n marcada: " + opcion + " correlativo" + variables.preRecargas.lista[variables.posicionLista].correlativo +
						" monto: " + variables.preRecargas.lista[variables.posicionLista].monto);
						variables.posicionLista ++;	
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.ACTUALIZAR_ESTADO_RECARGA;					
					} else if (opcion == 8) {
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.VALIDAR_LISTA;

					}  else {
						continuar = false;
						tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
						variables.tocarOpciones = true;	
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.ACTUALIZAR_ESTADO_RECARGA;
					}					
					
					if (variables.posicionLista < variables.preRecargas.lista.length &&
						variables.contarRecargasPagadas < variables.numeroRecargasPermitidas &&
						opcion != 8) {
							continuar = true;	
					} else {
						continuar = true;
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.VALIDAR_LISTA;
					}
														
				} else{
					// Terminar...
					finalizar(canal, ahora);
				}	
			break;
			
			case ValidarPreRecargas.VALIDAR_LISTA:
				variables.montoTotalRecargas = 0;
				var numeroDeRecargas = 0;
				print(JSON.stringify(variables.preRecargas.lista));
				for (i in variables.preRecargas.lista){					
					if(Number(variables.preRecargas.lista[i].pago) == 1){
						variables.montoTotalRecargas += variables.preRecargas.lista[i].monto;
						print("validacion, correlativo: ",variables.preRecargas.lista[i].correlativo , "monto",variables.preRecargas.lista[i].monto);
						numeroDeRecargas++;
					}
				}
				var audio = '/chanchita/numeroDeRecargasPagadas' +
					',/chanchita/' + numeroDeRecargas.toString() +
					',/chanchita/ustedDebeTener,' + leerCantidad(variables.montoTotalRecargas,'/chanchita/') +
					',/chanchita/marque1paraActualizarListaPreRecargas';
				//print("audio2: ",audio);
				solicitarDatos(canal, '', true, 1, 3, null,	audio,
					'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
				variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.VALIDANDO_LISTA;
			break;

			case ValidarPreRecargas.VALIDANDO_LISTA:
				// actualiza la lista
				if(canal.solicitarInformacion.informacionValida()){
					var opcion = Number(canal.solicitarInformacion.getInfo());		
					//validando lista
					if (opcion == 1) {
						var parametros = Object.create(null);
						parametros.lista  =  JSON.stringify(variables.preRecargas.lista);
						print(".......parametros: ",JSON.stringify(parametros));
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarLista', 
							JSON.stringify(parametros), 3, 5, false);							
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.SOLICITAR_CIERRE_DE_LISTA;
					//actualizando a estado no pag√≥
					} else {
						tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.VALIDAR_LISTA;
					}
				} else {
					// Terminar...
					finalizar(canal, ahora);
				}
				break;
			
			case ValidarPreRecargas.SOLICITAR_CIERRE_DE_LISTA:
				if(canal.solicitarInformacion.informacionValida()){
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					print(respuestaConsulta);					
					if (respuestaConsulta.resultado == "OK") {
						solicitarDatos(canal, '', true, 1, 3, null,	'/chanchita/actualizacionExitosaMarque1ParaRecargaInterna5ParaRecargaExterna',
                        //solicitarDatos(canal, '', true, 1, 3, null, '/chanchita/actualizacionExitosaMarque1ParaCerrarLista',
							'/chanchita/intenteNuevamente','/chanchita/fallaMarcacion', 30, 30, false);
					} else {
						tocarMensaje(canal, '/chanchita/fallaCierreDeLista', -1, -1, false);					
					}
					variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.CERRAR_LISTA;
				} else {
						// Terminar...
						finalizar(canal, ahora);
				}					
				break;
							
			case ValidarPreRecargas.CERRAR_LISTA:	
				if(canal.solicitarInformacion.informacionValida()){
					var opcion = Number(canal.solicitarInformacion.getInfo());											
					//validando lista
					var parametros = Object.create(null);
					if (opcion == 1) {
						for (i in variables.preRecargas.lista){
							variables.preRecargas.lista[i].estadoLista="cerradaColaborador";

						}
						
						parametros.lista  =  JSON.stringify(variables.preRecargas.lista);
						print("parametros: ",JSON.stringify(parametros));
						canal.inicializarConsultaLocal(null, 'preRecargas.procesarLista', 
							JSON.stringify(parametros), 3, 5, false);							
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.CERRANDO_LISTA;
					//actualizando a estado no pag√≥
					}else if(opcion == 5){
						if(variables.montoTotalRecargas >= variables.montoMinimoChanchitaExterna){						
							for (i in variables.preRecargas.lista){
								//variables.preRecargas.lista[i].estadoLista="cerrada";
								variables.preRecargas.lista[i].estadoLista="cerrada";
							}
							parametros.lista  =  JSON.stringify(variables.preRecargas.lista);
							canal.inicializarConsultaLocal(null, 'preRecargas.procesarLista', 
							JSON.stringify(parametros), 3, 5, false);
							variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.CERRAR_LISTA_EXTERNA_TELEFONICA;
						} else {
							var audio = '/chanchita/montoMinimoNoAlcanzadoChanchitaExterna,' + leerCantidad(variables.montoMinimoChanchitaExterna,'/chanchita/');
							tocarMensaje(canal, audio , -1, -1, false);
							variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.FINALIZAR;
						}
					} else {
						tocarMensaje(canal, '/chanchita/opcionInvalida', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.SOLICITAR_CIERRE_DE_LISTA;
					}
					print("variables.preRecargas.lista",JSON.stringify(variables.preRecargas.lista));	
			} else {
				// Terminar...
				finalizar(canal, ahora);
			}	
			break;


			case ValidarPreRecargas.CERRAR_LISTA_EXTERNA_TELEFONICA:
				if(canal.solicitarInformacion.informacionValida()){
					var parametros=  Object.create(null);
					var jsonInfoRecargas= Object.create(null);

					jsonInfoRecargas.colaborador = canal.dni;
					jsonInfoRecargas.montoTotalRecargas = variables.montoTotalRecargas;
					var epPrefijo=canal.numeroExtension;
					jsonInfoRecargas.prefijoPenal = epPrefijo.substring(0,3);
					parametros.jsonInfoRecargas =  JSON.stringify(jsonInfoRecargas);

					parametros.jsonListaRecargas  =  JSON.stringify(variables.preRecargas.lista);

					print("parametros.jsonInfoRecargas",parametros.jsonInfoRecargas);
					print("parametros.jsonListaRecargas",parametros.jsonListaRecargas);
					print('probando: ',JSON.stringify(parametros) );

					consultaBaseDeDatos(canal, 0, null,
						'telefonia.recargasChanchitaExterna',JSON.stringify(parametros),
						null, false, 3, 5, false); 

					variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.CERRANDO_LISTA_EXTERNA_TELEFONICA;
				} else {
						// Terminar...
						finalizar(canal, ahora);
					}										
				break;

			
			case ValidarPreRecargas.CERRANDO_LISTA_EXTERNA_TELEFONICA:
				/* canal.consultaBdD.getInfo() */
				if (canal.consultaBdD.getInfo()) {
					var respuesta = JSON.parse(canal.consultaBdD.getInfo());
					if (respuesta.resultado == "OK" && respuesta.idChanchita){
						var audio= []
						var lista=audio.concat('/chanchita/suCodigoTransaccionEsC',textoCodigo(respuesta.idChanchita.toString(),"/chanchita/"));
						tocarMensaje(canal, lista, -1, -1, false);			
					}else{
						tocarMensaje(canal, '/chanchita/fallaCierreDeLista', -1, -1, false);
					}
					variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.FINALIZAR;
				} else {
						// Terminar...
						finalizar(canal, ahora);
					}										
				break;

			
		
			case ValidarPreRecargas.CERRANDO_LISTA:
				if(canal.solicitarInformacion.informacionValida()){
					var respuestaConsulta = JSON.parse(canal.consultaLocal.getInfo());
					print(respuestaConsulta);					
					if (respuestaConsulta.resultado == "OK" && respuestaConsulta.mensaje=="procesadas") {
						tocarMensaje(canal, '/chanchita/cierreDeListaExitoso', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.RETORNAR_TRUE;
					} else if (respuestaConsulta.resultado == "OK" && respuestaConsulta.mensaje=="listaIncompleta") {
						tocarMensaje(canal, '/chanchita/recargasPendientesColaborador', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.RETORNAR_TRUE;			
					} else {
						tocarMensaje(canal, '/chanchita/fallaCierreDeLista', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = ValidarPreRecargas.FINALIZAR;					
					}
				} else {
						// Terminar...
						finalizar(canal, ahora);
					}										
				break;

			case ValidarPreRecargas.FINALIZAR:
				// Terminar...
				print("Finalizar");
				finalizar(canal, ahora);
				break;
			
			case ValidarPreRecargas.RETORNAR_TRUE:
				value = 1;
				break;
		}
		canal.variables = JSON.stringify(variables);
	} while (continuar)
	variables.nivel--;
	return value;
}


//----------------FIN CHANCHA-------------

// Estados para el m√≥dulo de recarga con pin
var RecargaPin = {
    SOLICITANDO_PIN: 1,
    CONSULTANDO_PIN: 2,
    TOCANDO_FALLO_CONSULTA_PIN: 3,
    INFORMANDO_SALDO: 4,
    TOCANDO_PIN_USADO: 5,
    TOCANDO_PIN_ROBADO: 6,
    TOCANDO_PIN_INVALIDO: 7
};

function recargaPin(canal, ahora) {
    switch (canal.estadoAplicacion) {
        case RecargaPin.SOLICITANDO_PIN:
            if (canal.solicitarInformacion.informacionValida()) {
                // Guardar el pin
                canal.pin = canal.solicitarInformacion.getInfo();

                // Consultar el PIN en la base de datos
                consultaBaseDeDatos(canal, 0, null,
                    'telefonia.recargasPorPin',
                    '{"idInterno":"' + canal.dni + '",' +
                    '"extensionTelefono":"' + canal.numeroExtension + '",' +
                    '"clave":"' + canal.pin + '"}',
                    null, false, 3, 5, false);

                // Definir estado
                canal.estadoAplicacion = RecargaPin.CONSULTANDO_PIN;
            } else {
                finalizar(canal, ahora);
            }
            break;
        case RecargaPin.CONSULTANDO_PIN:
            // Si no hubo respuesta, informar y colgar
            var stringJson = canal.consultaBdD.getInfo();
            if (!stringJson) {
                informarFallaColgar(canal, RecargaPin.TOCANDO_FALLO_CONSULTA_PIN);
                break;
            }

            // La recarga fue v√°lida ?
            var datosPin = JSON.parse(stringJson);
            if (datosPin.resultado.startsWith('OK')) {
                // Recarga exitosa, generar lista para informar saldo
                var datosUsuario = JSON.parse(canal.datosUsuario);
                var lista = listToString(textoDinero(datosUsuario.interno.saldo + datosPin.valor, '/ivr/recargaPinExitosa'));

                // Iniciar el play del saldo
                tocarMensaje(canal, lista, -1, -1, true);

                // Definir estado
                canal.estadoAplicacion = RecargaPin.INFORMANDO_SALDO;
            } else if (datosPin.mensaje == PIN_USADO) {
                // Pin usado
                tocarMensaje(canal, '/ivr/pinUsado', -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = RecargaPin.TOCANDO_PIN_USADO;
            } else if (datosPin.mensaje == PIN_ANULADO) {
                // Pin robado (lista negra)
                tocarMensaje(canal, '/ivr/pinRobado', -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = RecargaPin.TOCANDO_PIN_ROBADO;
            } else {
                // N√∫mero de Pin inv√°lido
                tocarMensaje(canal, '/ivr/pinInvalido', -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = RecargaPin.TOCANDO_PIN_INVALIDO;
            }
            break;
        case RecargaPin.INFORMANDO_SALDO:
        case RecargaPin.TOCANDO_FALLO_CONSULTA_PIN:
        case RecargaPin.TOCANDO_PIN_USADO:
        case RecargaPin.TOCANDO_PIN_ROBADO:
        case RecargaPin.TOCANDO_PIN_INVALIDO:
            finalizar(canal, ahora);
            break;
    }
}

//---------- INICIO DEL MODULO RECUPERAR CODIGO Y CUENTA AZULITO -----------
var RecuperarCodigoAzulitoClave = {
    SOLICITAR_NUMERO_FRECUENTE: 1,
    SOLICITANDO_NUMERO_FRECUENTE: 2,
    CONSULTANDO_NUMERO_TELEFONO: 3,
    MENU_TOCAR_CODIGO_AZULITO: 4,
    MENU_TOCANDO_CODIGO_AZULITO: 5,
    TOCANDO_CODIGO_AZULITO: 6,
    SOLICITAR_OTRO_NUMERO: 7,
    SOLICITANDO_OTRO_NUMERO: 8,
    VALIDANDO_OTRO_NUMERO: 9,
    SOLICITAR_CLAVE_NUEVA: 10,
    TOCANDO_MENSAJE_VALIDAR_TELEFONO: 11,
    VALIDAR_OTRO_NUMERO: 12,
    VALIDAR_NUMERO_TELEFONO: 13,
    VALIDANDO_NUMERO_TELEFONO: 14,
    SOLICITANDO_CLAVE_NUEVA: 15,
    VERIFICANDO_CLAVE_NUEVA: 16,
    REGISTRANDO_CAMBIO_CLAVE: 17,
    FINALIZAR_MODULO: 18,
    desc: {
        1: 'SOLICITAR_NUMERO_FRECUENTE',
        2: 'SOLICITANDO_NUMERO_FRECUENTE',
        3: 'CONSULTANDO_NUMERO_TELEFONO',
        4: 'MENU_TOCAR_CODIGO_AZULITO',
        5: 'MENU_TOCANDO_CODIGO_AZULITO',
        6: 'TOCANDO_CODIGO_AZULITO',
        7: 'SOLICITAR_OTRO_NUMERO',
        8: 'SOLICITANDO_OTRO_NUMERO',
        9: 'VALIDANDO_OTRO_NUMERO',
        10: 'SOLICITAR_CLAVE_NUEVA',
        11: 'TOCANDO_MENSAJE_VALIDAR_TELEFONO',
        12: 'VALIDAR_OTRO_NUMERO',
        13: 'VALIDAR_NUMERO_TELEFONO',
        14: 'VALIDANDO_NUMERO_TELEFONO',
        15: 'SOLICITANDO_CLAVE_NUEVA',
        16: 'VERIFICANDO_CLAVE_NUEVA',
        17: 'REGISTRANDO_CAMBIO_CLAVE',
        18: 'FINALIZAR_MODULO'
    }
}

function recuperarCodigoAzulitoClave (canal, ahora, inicio) {
    // Verificar si se colg√≥ la llamada
    if (canal.terminoLlamada) {
        // Terminar...
        finalizar(canal, ahora);
        return;
    }

    // Verificar si es el inicio del preregistro
    if (inicio) {
        // Definir m√≥dulo y estado
        canal.modulo = Modulos.RECUPERAR_CODIGO_AZULITO_CLAVE;

        // Inicializar variables
        var variables = Object.create(null);
        updateObject(variables, 'estadoFuncion', 1, canal);
        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.SOLICITAR_NUMERO_FRECUENTE;
    }

    var continuar = false;
    do {
        // Recuperar variables
        var variables;
        variables = JSON.parse(canal.variables);

        // M√°quina de estados
        switch (canal.estadoAplicacion) {
            case RecuperarCodigoAzulitoClave.SOLICITAR_NUMERO_FRECUENTE:
                // Solicitar numero frecuente 
                solicitarDatos(canal, '', false, 0, 3, null, 
                    '/ivr/solicitarNumeroMarcado', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                    10, 5, false);
                canal.estadoAplicacion = RecuperarCodigoAzulitoClave.SOLICITANDO_NUMERO_FRECUENTE;
                break;

            case RecuperarCodigoAzulitoClave.SOLICITANDO_NUMERO_FRECUENTE:
                if (canal.solicitarInformacion.informacionValida()) {
                    var numeroTelefono = canal.solicitarInformacion.getInfo();
                    updateObject(variables, 'numeroTelefono', numeroTelefono, canal);
                    // Solicitar informacion a partir del numero marcado por el interno
                    var parametros = '{"numeroTelefono":"' + numeroTelefono + '",' +
                            '"codigoAzulito":"noLoTengo"}';
                    consultaBaseDeDatos(canal, 0, null, 'telefonia.consultarDestino', 
                        parametros, null, false, 3, 5, false);
                    canal.estadoAplicacion = RecuperarCodigoAzulitoClave.CONSULTANDO_NUMERO_TELEFONO;
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case RecuperarCodigoAzulitoClave.CONSULTANDO_NUMERO_TELEFONO:
                // Verificar si hubo respuesta
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, RecuperarCodigoAzulitoClave.FINALIZAR_MODULO);
                    break;
                }
                // Guardar y analizar la respuesta
                var consultaTelefonoInterno = JSON.parse(canal.consultaBdD.getInfo());

                print(consultaTelefonoInterno.resultado, consultaTelefonoInterno.codigoAzulito, 
                        consultaTelefonoInterno.numeroDestinos, consultaTelefonoInterno.penalInterno);

                updateObject(variables, 'consultaTelefonoInterno', consultaTelefonoInterno, canal);
                if (consultaTelefonoInterno.resultado == "OK" ) {
                    if (consultaTelefonoInterno.penalInterno == prefijoCarcel) {
                        if (consultaTelefonoInterno.estadoInterno == 'ACTIVO') {
                            tocarMensaje(canal, '/ivr/procedeSolicitudInterno', -1, -1, false); 
                            canal.estadoAplicacion = RecuperarCodigoAzulitoClave.MENU_TOCAR_CODIGO_AZULITO;
                        } else {
                            tocarMensaje(canal, '/ivr/ustedSeEncuentraInactivo', -1, -1, false); 
                            canal.estadoAplicacion = RecuperarCodigoAzulitoClave.FINALIZAR_MODULO;
                        }
                    } else {
                        tocarMensaje(canal, '/ivr/ustedSeEncuentraEnOtroPenal', -1, -1, false);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.FINALIZAR_MODULO;
                    }
                } else {
                    // El telefono marcado ha sido marcado por varios internos o no existe, intente mas tarde
                    tocarMensaje(canal, '/ivr/numeroMarcadoPorOtrosInterno', -1, -1, false); 
                    canal.estadoAplicacion = RecuperarCodigoAzulitoClave.FINALIZAR_MODULO;
                }
                break;

            case RecuperarCodigoAzulitoClave.MENU_TOCAR_CODIGO_AZULITO:
                solicitarDatos(canal, '', true, 1, 3, false, 
                    '/ivr/menuCodigoAzulito', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                    10, 5, false);
                canal.estadoAplicacion = RecuperarCodigoAzulitoClave.MENU_TOCANDO_CODIGO_AZULITO;
                break;

            case RecuperarCodigoAzulitoClave.MENU_TOCANDO_CODIGO_AZULITO:
                if (canal.solicitarInformacion.informacionValida()) {
                    var idMenu = canal.solicitarInformacion.getInfo();
                    // Solicitar informacion a partir del numero marcado por el interno
                    if (idMenu == '2') {
                        var lista = ['suCodigoAzulito'].concat(textoNumero(variables.consultaTelefonoInterno.codigoAzulito, 1));
                        print(lista);
                        funcionTocarListaMensajes(canal, lista, RecuperarCodigoAzulitoClave.MENU_TOCAR_CODIGO_AZULITO);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.TOCANDO_CODIGO_AZULITO;
                    } else {
                        updateObject(variables, 'intentosRecuperarCuenta', 0, canal);
                        tocarMensaje(canal, '/ivr/aContinuacionRecuperarCuenta', -1, -1, false); 
                        canal.estadoAplicacion = (variables.consultaTelefonoInterno.numeroDestinos == 1 ?
                                RecuperarCodigoAzulitoClave.SOLICITAR_CLAVE_NUEVA : 
                                RecuperarCodigoAzulitoClave.SOLICITAR_OTRO_NUMERO);
                    }
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case RecuperarCodigoAzulitoClave.TOCANDO_CODIGO_AZULITO:
                funcionTocarListaMensajes(canal);
                break;

            case RecuperarCodigoAzulitoClave.SOLICITAR_OTRO_NUMERO:
                solicitarDatos(canal, '', true, 0, 3, null, 
                    '/ivr/solicitarOtroNumero', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                    10, 5, false);
                canal.estadoAplicacion = RecuperarCodigoAzulitoClave.SOLICITANDO_OTRO_NUMERO;
                break;

            case RecuperarCodigoAzulitoClave.SOLICITANDO_OTRO_NUMERO:
                if (canal.solicitarInformacion.informacionValida()) {
                    // ACTUALIZAMOS EL CONTADOR
                    updateObject(variables, 'intentosRecuperarCuenta', 
                            variables.intentosRecuperarCuenta = variables.intentosRecuperarCuenta + 1 , canal);
                    // PREGUNTAMOS SI EL SEGUNDO NUMERO MARCADO ES DIFERENTE DEL PRIMERO NUMERO MARCADO, EL CUAL SE UTILIZO PARA OBTENER EL COD AZULITO
                    if (canal.solicitarInformacion.getInfo() != variables.numeroTelefono) {
                        // Solicitar informacion a partir del numero marcado por el interno
                        var parametros = '{"numeroTelefono":"' + canal.solicitarInformacion.getInfo() + '",' +
                                '"codigoAzulito":"' + variables.consultaTelefonoInterno.codigoAzulito + '"}';
                        consultaBaseDeDatos(canal, 0, null, 'telefonia.consultarDestino', 
                            parametros, null, false, 3, 5, false);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.VALIDANDO_OTRO_NUMERO;
                    } else {
                        tocarMensaje(canal, '/ivr/ingreseUnNumeroDistinto', -1, -1, false);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.SOLICITAR_OTRO_NUMERO;
                    }
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case RecuperarCodigoAzulitoClave.VALIDANDO_OTRO_NUMERO:
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, RecuperarCodigoAzulitoClave.FINALIZAR_MODULO);
                    break;
                }
                // Guardar y analizar la respuesta
                var consultaOtroTelefonoInterno = JSON.parse(canal.consultaBdD.getInfo());
                if (consultaOtroTelefonoInterno.resultado == 'OK') {
                    // numero encontrado en la lista de numeros del interno
                    tocarMensaje(canal, '/ivr/solicitudAprobada', -1, 1, false); 
                    canal.estadoAplicacion = RecuperarCodigoAzulitoClave.SOLICITAR_CLAVE_NUEVA;
                } else {
                    // tiene otros reintentos ?
                    if (variables.intentosRecuperarCuenta < 3) {
                        tocarMensaje(canal, '/ivr/vuelvaIngresarOtroNumero', -1, -1, false);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.SOLICITAR_OTRO_NUMERO;
                    } else {
                        tocarMensaje(canal, '/ivr/noTieneMasIntentos', -1, -1, false);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.FINALIZAR_MODULO;
                    }
                }
                break;

            case RecuperarCodigoAzulitoClave.SOLICITAR_CLAVE_NUEVA:
                solicitarDatos(canal, '', true, 4, 3, null, 
                    '/ivr/asignarClave', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                    10, 5, false);
                canal.estadoAplicacion = RecuperarCodigoAzulitoClave.SOLICITANDO_CLAVE_NUEVA;
                break;

            case RecuperarCodigoAzulitoClave.SOLICITANDO_CLAVE_NUEVA:
                updateObject(variables, 'clave', canal.solicitarInformacion.getInfo(), canal);
                solicitarDatos(canal, '', true, 4, 3, null, 
                    '/ivr/rectificarClave', '/ivr/reintentoSolicitud', '/ivr/fallaSolicitud', 
                    10, 5, false);
                canal.estadoAplicacion = RecuperarCodigoAzulitoClave.VERIFICANDO_CLAVE_NUEVA;
                break;

            case RecuperarCodigoAzulitoClave.VERIFICANDO_CLAVE_NUEVA: 
                if (canal.solicitarInformacion.informacionValida()) {
                    // Comparar si digit√≥ la misma clave
                    if (variables.clave == canal.solicitarInformacion.getInfo()) {
                        // Claves iguales, registrar el cambio en la base de datos
                        parametros = '{"idInterno":"' + variables.consultaTelefonoInterno.codigoAzulito + '",' +
                                '"extensionTelefono":"' + canal.numeroExtension + '",' +
                                '"claveNueva":"' + variables.clave + '"}';
                        consultaBaseDeDatos(canal, 0, null, 'telefonia.cambiarClaveInterno', 
                            parametros, null, false, 3, 5, false);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.REGISTRANDO_CAMBIO_CLAVE;
                    } else {
                        // Falla, clave no coincide
                        tocarMensaje(canal, '/ivr/noCoincidePrimeraClave', -1, -1, false);
                        canal.estadoAplicacion = RecuperarCodigoAzulitoClave.FINALIZAR_MODULO;
                    }
                } else {
                    finalizar(canal, ahora);
                }
            break;

        case RecuperarCodigoAzulitoClave.REGISTRANDO_CAMBIO_CLAVE:
            // Si no hubo respuesta, informar y colgar
            if (!canal.consultaBdD.getInfo()) {
                informarFallaColgar(canal, RecuperarCodigoAzulitoClave.FINALIZAR_MODULO);
            } else {
                // Registro exitoso, tocar mensaje de confirmaci√≥n
                tocarMensaje(canal, '/ivr/cambioClaveExitoso', -1, -1, false);
                canal.estadoAplicacion = RecuperarCodigoAzulitoClave.FINALIZAR_MODULO;
            }
            break;

        case RecuperarCodigoAzulitoClave.FINALIZAR_MODULO:
            print("RECUPERAR CUENTA // numeroTelefono: " + variables.numeroTelefono +
                        " idInterno: " + variables.consultaTelefonoInterno.codigoAzulito +
                        " resultado: " + variables.consultaTelefonoInterno.resultado +
                        " estadoInterno: " + variables.consultaTelefonoInterno.estadoInterno +
                        " penalInterno: " + variables.consultaTelefonoInterno.penalInterno +
                        " clave: " + variables.clave);
            finalizar(canal, ahora);
        }
    } while (continuar);
}
//---------- FIN DEL MODULO RECUPERAR CODIGO Y CUENTA AZULITO -----------
// Estados para el m√≥dulo de registro de usuarios
var RegistroUsuarios = {
    SOLICITANDO_PRIMERA_CLAVE: 1,
    VERFICANDO_PRIMERA_CLAVE: 2,
    TOCANDO_BIENVENIDA: 3,
    TOCANDO_NO_CONINCIDE_PRIMERA_CLAVE: 4,
    REGISTRANDO_USUARIO: 5,
    FALLO_REGISTRO_USUARIO: 6
};

function registroUsuario(canal, ahora) {
    switch (canal.estadoAplicacion) {
        case RegistroUsuarios.SOLICITANDO_PRIMERA_CLAVE:
            if (canal.solicitarInformacion.informacionValida()) {
                // Guardar la clave escogida
                canal.clave = canal.solicitarInformacion.getInfo();

                // Inicializar funci√≥n para rectificar primera clave
                solicitarDatos(canal, '', true, 4, 3, null,
                    '/ivr/rectificarClave', '/ivr/reintentoRectificarClave', '/ivr/fallaRectificarClave',
                    10, 5, false);

                // Definir estado
                canal.estadoAplicacion = RegistroUsuarios.VERFICANDO_PRIMERA_CLAVE;
            } else {
                finalizar(canal, ahora);
            }
            break;
        case RegistroUsuarios.VERFICANDO_PRIMERA_CLAVE:
            if (canal.solicitarInformacion.informacionValida()) {
                // Comparar si digit√≥ la misma clave
                var clave = canal.solicitarInformacion.getInfo();
                if (canal.clave == clave) {
                    // Matricular al nuevo usuario
                    consultaBaseDeDatos(canal, 0, null,
                        'telefonia.registrarInterno',
                        '{"idInterno":"' + canal.dni + '",' +
                        '"clave":"' + canal.clave + '",' +
                        '"extensionTelefono":"' + canal.numeroExtension + '"}',
                        null, false, 3, 5, false);

                    // Definir estado
                    canal.estadoAplicacion = RegistroUsuarios.REGISTRANDO_USUARIO;
                } else {
                    // Falla, clave no coincide
                    tocarMensaje(canal, '/ivr/noCoincidePrimeraClave', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = RegistroUsuarios.TOCANDO_NO_CONINCIDE_PRIMERA_CLAVE;
                }
            } else {
                finalizar(canal, ahora);
            }
            break;
        case RegistroUsuarios.REGISTRANDO_USUARIO:
            // Verificar si hubo respuesta
            if (!canal.consultaBdD.getInfo()) {
                informarFallaColgar(canal, RegistroUsuarios.FALLO_REGISTRO_USUARIO);
                break;
            }

            // Actualizar la nueva informaci√≥n del usuario
            canal.datosUsuario = canal.consultaBdD.getInfo();

            // Tocar mensaje de bienvenida
            tocarMensaje(canal, '/ivr/registroExitoso', -1, -1, false);

            // Definir estado
            canal.estadoAplicacion = RegistroUsuarios.TOCANDO_BIENVENIDA;
            break;
        case RegistroUsuarios.TOCANDO_BIENVENIDA:
            // Generar lista de mensajes para tocar el saldo
            var datosUsuario = JSON.parse(canal.datosUsuario);
            var lista = listToString(textoDinero(datosUsuario.interno.saldo, '/ivr/saldo'));

            // Iniciar el play del saldo
            tocarMensaje(canal, lista, -1, -1, true);

            // Regresa al m√≥dulo principal
            canal.modulo = Modulos.PRINCIPAL;
            canal.estadoAplicacion = Principal.INFORMANDO_SALDO;
            break;
        case RegistroUsuarios.TOCANDO_NO_CONINCIDE_PRIMERA_CLAVE:
        case RegistroUsuarios.FALLO_REGISTRO_USUARIO:
            finalizar(canal, ahora);
            break;
    }
}
// Estados para el modulo SARA
var Sara = {
	F_SOLICITAR_ANEXO: 1,
	F_SOLICITAR_ID_ESTADO_TELEFONO: 2,
	F_SOLICITAR_ID_FALLA: 3,
	F_SOLICITAR_ID_OPERACION: 4,
	F_SOLICITAR_ID_REPUESTO_CAMBIADO: 5,
	F_SOLICITAR_ID_REPUESTO_REQUERIDO: 6,
	F_GUARDAR_REPORTE: 7,
	F_CONFIRMAR_REPORTE: 8,
	F_SOLICITAR_TIPO_MTTO: 17,
	SOLICITANDO_ANEXO: 9,
	SOLICITANDO_ID_ESTADO_TELEFONO: 10,
	SOLICITANDO_ID_FALLA: 11,
	SOLICITANDO_ID_OPERACION: 12,
	SOLICITANDO_ID_REPUESTO_CAMBIADO: 13,
	SOLICITANDO_ID_REPUESTO_REQUERIDO: 14,
	SOLICITANDO_TIPO_MTTO: 18,
	CONFIRMANDO_REPORTE: 15,
	GUARDANDO_REPORTE: 16
}

var IdsFallas = {
    1: 'AURICULAR AVERIADO',
    2: 'RJ9 AURICULAR AVERIADO',
    3: 'CABLE AURICULAR AVERIADO',
    4: 'C√ÅPSULA AURICULAR AVERIADA',
    5: 'MAINBOARD AVERIADA',
    6: 'TECLADO AVERIADO',
    7: 'MEMBRANA AVERIADA',
    8: 'TARJETA DE TECLADO AVERIADA',
    9: 'GANCHO DE CUELGUE AVERIADO',
    10: 'BATER√çA AVERIADA',
    11: 'CHAPA DE TEL√âFONO AVERIADA',
    12: 'CARCAZA AVERIADA',
    13: 'CONECTOR RJ11 AVERIADO',
    14: 'CABLE UTP AVERIADO',
    15: 'VANDALISMO',
    16: 'TARJETA DE PROTECCI√ìN',
    17: 'FALLA GRANDSTREAM',
    18: 'TEL√âFONO EN MANTENIMIENTO POR MODIFICACIONES EN EL EP',
    19: 'NO SE TUVO ACCESO AL TEL√âFONO POR POL√çTICAS DEL EP',
    20: 'SENSOR MAGNETICO DE GANCHO DE CUELGUE AVERIADO'
}

var IdsOperaciones = {
    1: 'CAMBIO AURICULAR',
    2: 'REPARACI√ìN AURICULAR - RJ9',
    3: 'REPARACI√ìN AURICULAR - CABLE',
    4: 'CAMBIO MAINBOARD',
    5: 'CAMBIO TECLADO',
    6: 'REPARACI√ìN TECLADO',
    7: 'CAMBIO TECLADO - MEMBRANA',
    8: 'REPARACI√ìN TECLADO - MEMBRANA',
    9: 'CAMBIO TARJETA - TECLADO',
    10: 'REPARACI√ìN TARJETA - TECLADO',
    11: 'CAMBIO GANCHO DE CUELGUE',
    12: 'REPARACI√ìN GANCHO DE CUELGUE',
    13: 'CAMBIO BATER√çA',
    14: 'CAMBIO CHAPA DE TEL√âFONO',
    15: 'LIMPIEZA CARCAZA',
    16: 'LIMPIEZA AURICULAR',
    17: 'LIMPIEZA MAINBOARD',
    18: 'LIMPIEZA TECLADO',
    19: 'LIMPIEZA MEMBRANA TECLADO',
    20: 'LIMPIEZA TARJETA DE PROTECCI√ìN',
    21: 'LUBRICAR GANCHO DE CUELGUE',
    22: 'MEDICI√ìN VOLTAJE BATER√çA',
    23: 'ASEGURAR CHAPA TEL√âFONO',
    24: 'LUBRICAR TORNILLO CARCAZA',
    25: 'CAMBIO DE CARCAZA',
    26: 'CAMBIO DE CONECTOR RJ11',
    27: 'EMPALME Y/O REEMPLAZO CABLE UTP',
    28: 'EMPOTRADO/REINSTALACI√ìN DE TEL√âFONO',
    29: 'CAMBIO DE TARJETA DE PROTECCI√ìN',
    30: 'PONCHADO DE CABLE DE RESERVA',
    31: 'REINICIO DE GRANDSTREAM',
    32: 'CAMBIO DE PUERTO DE GRANDSTREAM',
    33: 'TRASLADO/REUBICACION DE TEL√âFONO',
    34: 'ASEGURAR GUAYA DE ARICULAR',
    35: 'CAMBIO DE SENSOR MAGNETICO DE GANCHO DE CUELGUE',
    36: 'REPARACION DE TARJETA DE PROTECCION',
    37: 'INSTALACION DE PERNO DE CARCASA',
    38: 'ASEGURAR BASE DEL TELEFONO',
    39: 'REINICIO DE TECLADO KNTECH'
}

/*var IdsRepuestos = {
    1: 'AURICULAR',
    2: 'RJ9 AURICULAR',
    3: 'CABLE AURICULAR',
    4: 'CAPSULA AURICULAR',
    5: 'MAINBOARD',
    6: 'TECLADO',
    7: 'MEMBRANA',
    8: 'TARJETA TECLADO',
    9: 'GANCHO CUELGUE',
    10: 'BATERIA',
    11: 'CHAPA TELEFONO',
    12: 'CARCAZA',
    13: 'CONECTOR',
    14: 'PLACA DE PROTECCION',
    15: 'TORNILLOS NITRON',
    16: 'GUAYA DE AURICULAR',
    17: 'RJ11 DEL GANCHO DE CUELGUE'
}*/
var IdsRepuestos = {
    1: 'AURICULAR NITRON',  
    21: 'AURICULAR KONTECH',    
    31: 'AURICULAR INFOPYME 1,2',
    5: 'MAINBOARD NITRON',  
    25: 'MAINBOARD KONTECH',    
    35: 'MAINBOARD INFOPYME 1', 
    45: 'MAINBOARD INFOPYME 2', 
    6: 'TECLADO NITRON',    
    26: 'TECLADO KONTECH',  
    36: 'TECLADO INFOPYME 1',   
    46: 'TECLADO INFOPYME 2',   
    37: 'MEMBRANA INFOPYME 1',  
    47: 'MEMBRANA INFOPYME 2',  
    38: 'TARJETA DE TECLADO INFOPYME 1',    
    48: 'TARJETA DE TECLADO INFOPYME 2',    
    29: 'GANCHO DE CUELGUE KONTECH',    
    14: 'PLACA DE PROTECCION NITRON',   
    18: 'AURICULAR KONTECH - GANCHO KONTECH',   
    19: 'AURICULAR KONTECH HIBRIDO',    
    20: 'GANCHO DE CUELGUE HIBRIDO'
}

function validarIdFalla(idFalla) {
    if (idFalla == '0' || IdsFallas[idFalla]) {
        return true;
    } else {
        return false;
    }
}

function validarIdOperacion(idOperacion) {
    if (idOperacion == '0' || IdsOperaciones[idOperacion]) {
        return true;
    } else {
        return false;
    }
}

function validarIdRepuesto(idRepuesto) {
    if (idRepuesto == '0' || IdsRepuestos[idRepuesto]) {
        return true;
    } else {
        return false;
    }
}

function validarAnexo(anexo, canal) {
    // Si marco '0' es el anexo actual
    if (anexo == '0') return canal.numeroExtension;

    // Validar el prefijo del penal
    if (anexo.length == 6 && (anexo.substring(0, 3) == prefijoCarcel || anexo.substring(0, 3) == '109')) {
        // OK, validar si el anexo existe
        var i, n = Number(anexo) % 1000;
        for (i = 0; i < Anexos.length; i++) {
            if (Anexos[i][0] <= n && n <= Anexos[i][1]) return anexo;
        }
    }

    // Anexo invalido
    return '000';
}

/*function sara(canal, ahora, inicio) {
    // Verificar si se colg√≥ la llamada
    if (canal.colgoLlamada) {
        // Terminar...
        finalizar(canal, ahora);
        return;
    }

    // Verificar si es el inicio del sistema SARA
    if (inicio) {
        // Definir m√≥dulo y estado
        canal.modulo = Modulos.SARA;
        canal.estadoAplicacion = Sara.F_SOLICITAR_ANEXO;
        if (canal.numeroExtension == 1006) canal.numeroExtension = 124201;
        variables = Object.create(null);
                updateObject(variables, 'fechaHora', ahora, canal);
    }

    var continuar = true;
    do {
        // Recuperar variables
        var variables;
        if (canal.variables == null) {
            variables = Object.create(null);
            updateObject(variables, 'fechaHora', ahora, canal);
        } else {
            variables = JSON.parse(canal.variables);
        }

        // MAQUINA DE ESTADOS
        switch (canal.estadoAplicacion) {
            case Sara.F_SOLICITAR_ANEXO:
                // Preguntar si se reporta el anexo actual u otro anexo
                solicitarDatos(canal, '', true, 0, 3, null,
                    '/ivr/cualAnexoReporta', '/ivr/reintentoSara', '/ivr/fallaSara',
                    30, 30, true);
                canal.estadoAplicacion = Sara.SOLICITANDO_ANEXO;
                continuar = false;
                break;

            case Sara.F_SOLICITAR_ID_ESTADO_TELEFONO:
                solicitarDatos(canal, '', true, 0, 3, null,
                    '/ivr/solicitarEstadoTelefono', '/ivr/reintentoSara', '/ivr/fallaSara',
                    30, 30, true);
                canal.estadoAplicacion = Sara.SOLICITANDO_ID_ESTADO_TELEFONO;
                continuar = false;
                break;

            case Sara.F_SOLICITAR_ID_FALLA:
                solicitarDatos(canal, '', true, 0, 3, null,
                    variables.idFallas == null ? '/ivr/solicitarFalla' : '/ivr/solicitarSigFalla',
                    '/ivr/reintentoSara', '/ivr/fallaSara',
                    30, 30, true);
                canal.estadoAplicacion = Sara.SOLICITANDO_ID_FALLA;
                continuar = false;
                break;

            case Sara.F_SOLICITAR_ID_OPERACION:
                solicitarDatos(canal, '', true, 0, 3, null,
                    variables.idOperaciones == null ? '/ivr/solicitarOperacion' : '/ivr/solicitarSigOperacion',
                    '/ivr/reintentoSara', '/ivr/fallaSara',
                    30, 30, true);
                canal.estadoAplicacion = Sara.SOLICITANDO_ID_OPERACION;
                continuar = false;
                break;

            case Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO:
                solicitarDatos(canal, '', true, 0, 3, null,
                    variables.idRepuestosCambiados == null ?
                        '/ivr/solicitarRepuestoCambiado' : '/ivr/solicitarSigRepuestoCambiado',
                    '/ivr/reintentoSara', '/ivr/fallaSara',
                    30, 30, true);
                canal.estadoAplicacion = Sara.SOLICITANDO_ID_REPUESTO_CAMBIADO;
                continuar = false;
                break;

            case Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO:
                solicitarDatos(canal, '', true, 0, 3, null,
                    variables.idRepuestosRequeridos == null ?
                        '/ivr/solicitarRepuestoRequerido' : '/ivr/solicitarSigRepuestoRequerido',
                    '/ivr/reintentoSara', '/ivr/fallaSara',
                    30, 30, true);
                canal.estadoAplicacion = Sara.SOLICITANDO_ID_REPUESTO_REQUERIDO;
                continuar = false;
                break;

            case Sara.F_GUARDAR_REPORTE:
                consultaBaseDeDatos(canal, 0, null,
                    'telefonia.reporteSara', canal.variables,
                    null, false, 3, 5, false);
                canal.estadoAplicacion = Sara.GUARDANDO_REPORTE;
                continuar = false;
                break;

            case Sara.F_CONFIRMAR_REPORTE:
                tocarMensaje(canal, '/ivr/confirmarReporte', -1, -1, false);
                canal.estadoAplicacion = Sara.CONFIRMANDO_REPORTE;
                continuar = false;
                break;

            case Sara.SOLICITANDO_ANEXO:
                var anexo;
                if (canal.solicitarInformacion.informacionValida()
                    && (anexo = validarAnexo(canal.solicitarInformacion.getInfo(), canal)) != '000') {
                    // OK, solicitar estado telefono
                    updateObject(variables, 'anexoReporta', anexo, canal);
                    updateObject(variables, 'anexoLlama', canal.numeroExtension, canal);
                    canal.estadoAplicacion = Sara.F_SOLICITAR_ID_ESTADO_TELEFONO;
                } else {
                    // KO, repetir...
                    canal.estadoAplicacion = Sara.F_SOLICITAR_ANEXO;
                }
                break;

            case Sara.SOLICITANDO_ID_ESTADO_TELEFONO:
                if (canal.solicitarInformacion.informacionValida()
                    && (idEstado = Number(canal.solicitarInformacion.getInfo())) <= 2) {
                    if (variables.estadoInicialTelefono == null) {
                        // Estado inicial del telefono
                        updateObject(variables, 'estadoInicialTelefono', Number(canal.solicitarInformacion.getInfo()), canal);

                        // Si el estado no es OK, solicitar falla(s)
                        if (variables.estadoInicialTelefono < 2) {
                            updateObject(variables, 'idFallas', null, canal);
                            canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
                        } else {
                            // Telefono OK, solicitar operacion(es)
                            updateObject(variables, 'idFallas', null, canal);
                            updateObject(variables, 'idOperaciones', null, canal);
                            canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
                        }
                    } else {
                        // Estado final del telefono
                        updateObject(variables, 'estadoFinalTelefono', Number(canal.solicitarInformacion.getInfo()), canal);
                        if (variables.estadoFinalTelefono != 2) canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO;
                        else canal.estadoAplicacion = Sara.F_GUARDAR_REPORTE;
                    }
                } else {
                    // KO, repetir...
                    canal.estadoAplicacion = Sara.F_SOLICITAR_ID_ESTADO_TELEFONO;
                }
                break;

            case Sara.SOLICITANDO_ID_FALLA:
                var idFalla;
                if (canal.solicitarInformacion.informacionValida()
                    && validarIdFalla((idFalla = canal.solicitarInformacion.getInfo()))) {
                    print("idFalla: " + idFalla);
                    // Id falla OK
                    if (!idFalla.startsWith('0')) {
                        if (variables.idFallas == null) variables.idFallas = [idFalla];
                        else variables.idFallas.push(idFalla);
                        updateObject(variables, 'idFallas', variables.idFallas, canal);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
                    } else if (variables.idFallas == null){
                        // Informar que debe reportar alguna falla
                        tocarMensaje(canal, '/ivr/debeReportarFalla', -1, -1, false);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
                        continuar = false;
                    } else {
                        // No mas fallas, solicita operacion(es)
                        updateObject(variables, 'idOperaciones', null, canal);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
                    }
                } else {
                    // KO, repetir...
                    canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
                }
                break;

            case Sara.SOLICITANDO_ID_OPERACION:
                var idOperacion;
                if (canal.solicitarInformacion.informacionValida()
                    && validarIdOperacion((idOperacion = canal.solicitarInformacion.getInfo()))) {

                    // Id operacion OK
                    if (!idOperacion.startsWith('0')) {
                        if (variables.idOperaciones == null) variables.idOperaciones = [idOperacion];
                        else variables.idOperaciones.push(idOperacion);
                        updateObject(variables, 'idOperaciones', variables.idOperaciones, canal);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
                    } else if (variables.idOperaciones == null) {
                        // Informar que debe reportar alguna falla
                        tocarMensaje(canal, '/ivr/debeReportarOperaciones', -1, -1, false);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
                        continuar = false;
                    } else {
                        // No mas operaciones, solicita repuesto(s) cambiado(s)
                        updateObject(variables, 'idRepuestosCambiados', null, canal);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO;
                    }
                } else {
                    // KO, repetir...
                    canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
                }
                break;

            case Sara.SOLICITANDO_ID_REPUESTO_CAMBIADO:
                var idRepuesto;
                if (canal.solicitarInformacion.informacionValida()
                    && validarIdRepuesto((idRepuesto = canal.solicitarInformacion.getInfo()))) {

                    // Id repuesto OK
                    if (!idRepuesto.startsWith('0')) {
                        if (idRepuesto != 18) {
                            if (variables.idRepuestosCambiados == null) variables.idRepuestosCambiados = [idRepuesto];
                            else variables.idRepuestosCambiados.push(idRepuesto);
                        } else {
                            if (variables.idRepuestosCambiados == null) {
                                variables.idRepuestosCambiados = ["18","19","20"];
                            } else {
                                variables.idRepuestosCambiados.push("18","19","20");
                            }
                        }
                        updateObject(variables, 'idRepuestosCambiados', variables.idRepuestosCambiados, canal);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO;
                    } else {
                        // No mas operaciones, solicita repuesto(s) requerido(s)
                        updateObject(variables, 'idRepuestosRequeridos', null, canal);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_ESTADO_TELEFONO;
                    }
                } else {
                    // KO, repetir...
                    canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO;
                }
                break;

            case Sara.SOLICITANDO_ID_REPUESTO_REQUERIDO:
                var idRepuesto;
                if (canal.solicitarInformacion.informacionValida()
                    && validarIdRepuesto((idRepuesto = canal.solicitarInformacion.getInfo()))) {

                    // Id repuesto OK
                    if (!idRepuesto.startsWith('0')) {
                        if (idRepuesto != 18) {
                            if (variables.idRepuestosRequeridos == null) variables.idRepuestosRequeridos = [idRepuesto];
                            else variables.idRepuestosRequeridos.push(idRepuesto);
                        } else {
                            if (variables.idRepuestosRequeridos == null) {
                                variables.idRepuestosRequeridos = ["18","19","20"];
                            } else {
                                variables.idRepuestosRequeridos.push("18","19","20");
                            }
                        }
                        updateObject(variables, 'idRepuestosRequeridos', variables.idRepuestosRequeridos, canal);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO
                    } else if (variables.idRepuestosRequeridos == null) {
                        tocarMensaje(canal, '/ivr/debeReportarRepuestoRequerido', -1, -1, false);
                        canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO;
                        continuar = false;
                    } else {
                        canal.estadoAplicacion = Sara.F_GUARDAR_REPORTE;
                    }
                } else {
                    // KO, repetir...
                    canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO;
                }
                break;

            case Sara.GUARDANDO_REPORTE:
                if (!canal.consultaBdD.getInfo()) {
                    //print('nanay...');
                } else {
                    //print('resp: ' + canal.consultaBdD.getInfo());
                }
                canal.estadoAplicacion = Sara.F_CONFIRMAR_REPORTE;
                break;

            case Sara.CONFIRMANDO_REPORTE:
                print(canal.variables);
                finalizar(canal, ahora);
                continuar = false;
                break;
        }
    } while (continuar);
}*/
function sara(canal, ahora, inicio) {
	// Verificar si se colg√≥ la llamada
	if (canal.colgoLlamada) {
		// Terminar...
		finalizar(canal, ahora);
		print("finalizar");
		return;
	}

	// Verificar si es el inicio del sistema SARA
	if (inicio) {
		// Definir m√≥dulo y estado
		canal.modulo = Modulos.SARA;
		canal.estadoAplicacion = Sara.F_SOLICITAR_ANEXO;
		if (canal.numeroExtension == '1006') canal.numeroExtension = '100003';
		// Se vuelven a crear las variables para no tener problemas con los reportes de sara...
        variables = Object.create(null);
        updateObject(variables, 'fechaHora', ahora, canal);
	}

	var continuar = true;
	do {
		// Recuperar variables
		var variables;
		if (canal.variables == null) {
			variables = Object.create(null);
			updateObject(variables, 'fechaHora', ahora, canal);
		} else {
			variables = JSON.parse(canal.variables);
		}

		// MAQUINA DE ESTADOS
		switch (canal.estadoAplicacion) {
			case Sara.F_SOLICITAR_ANEXO:
				// Preguntar si se reporta el anexo actual u otro anexo
				print("Sara.F_SOLICITAR_ANEXO");
				solicitarDatos(canal, '', true, 0, 3, null,
					'/ivr/cualAnexoReporta', '/ivr/reintentoSara', '/ivr/fallaSara',
					30, 30, true);
				canal.estadoAplicacion = Sara.SOLICITANDO_ANEXO;
				continuar = false;
				break;

			case Sara.F_SOLICITAR_ID_ESTADO_TELEFONO:
				solicitarDatos(canal, '', true, 0, 3, null,
					'/ivr/solicitarEstadoTelefono', '/ivr/reintentoSara', '/ivr/fallaSara',
					30, 30, true);
				canal.estadoAplicacion = Sara.SOLICITANDO_ID_ESTADO_TELEFONO;
				continuar = false;
				break;

			case Sara.F_SOLICITAR_ID_FALLA:
				solicitarDatos(canal, '', true, 0, 3, null,
					variables.idFallas == null ? '/ivr/solicitarFalla' : '/ivr/solicitarSigFalla',
					'/ivr/reintentoSara', '/ivr/fallaSara',
					30, 30, true);
				canal.estadoAplicacion = Sara.SOLICITANDO_ID_FALLA;
				continuar = false;
				break;

			case Sara.F_SOLICITAR_ID_OPERACION:
				solicitarDatos(canal, '', true, 0, 3, null,
					variables.idOperaciones == null ? '/ivr/solicitarOperacion' : '/ivr/solicitarSigOperacion',
					'/ivr/reintentoSara', '/ivr/fallaSara',
					30, 30, true);
				canal.estadoAplicacion = Sara.SOLICITANDO_ID_OPERACION;
				continuar = false;
				break;

			case Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO:
				solicitarDatos(canal, '', true, 0, 3, null,
					variables.idRepuestosCambiados == null ?
						'/ivr/solicitarRepuestoCambiado' : '/ivr/solicitarSigRepuestoCambiado',
					'/ivr/reintentoSara', '/ivr/fallaSara',
					30, 30, true);
				canal.estadoAplicacion = Sara.SOLICITANDO_ID_REPUESTO_CAMBIADO;
				continuar = false;
				break;

			case Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO:
				solicitarDatos(canal, '', true, 0, 3, null,
					variables.idRepuestosRequeridos == null ?
						'/ivr/solicitarRepuestoRequerido' : '/ivr/solicitarSigRepuestoRequerido',
					'/ivr/reintentoSara', '/ivr/fallaSara',
					30, 30, true);
				canal.estadoAplicacion = Sara.SOLICITANDO_ID_REPUESTO_REQUERIDO;
				continuar = false;
				break;
			
			case Sara.F_SOLICITAR_TIPO_MTTO:
				solicitarDatos(canal, '0,1', true, 0, 3, null,
					'/ivr/solicitarTipoMtto',
					'/ivr/reintentoSara', '/ivr/fallaSara',
					30, 30, true);
				canal.estadoAplicacion = Sara.SOLICITANDO_TIPO_MTTO;
				continuar = false;
				break;

			case Sara.F_GUARDAR_REPORTE:
				consultaBaseDeDatos(canal, 0, null,
					'telefonia.reporteSara', canal.variables,
					null, false, 3, 5, false);
				canal.estadoAplicacion = Sara.GUARDANDO_REPORTE;
				continuar = false;
				break;

			case Sara.F_CONFIRMAR_REPORTE:
				tocarMensaje(canal, '/ivr/confirmarReporte', -1, -1, false);
				canal.estadoAplicacion = Sara.CONFIRMANDO_REPORTE;
				continuar = false;
				break;

			case Sara.SOLICITANDO_ANEXO:
				var anexo;
				print("Sara.SOLICITANDO_ANEXO");
				if (canal.solicitarInformacion.informacionValida()
					&& (anexo = validarAnexo(canal.solicitarInformacion.getInfo(), canal)) != '000') {
					// OK, solicitar estado telefono					
					updateObject(variables, 'anexoReporta', anexo, canal);
					updateObject(variables, 'anexoLlama', canal.numeroExtension, canal);
					canal.estadoAplicacion = Sara.F_SOLICITAR_ID_ESTADO_TELEFONO;
				} else {
					// KO, repetir...
					canal.estadoAplicacion = Sara.F_SOLICITAR_ANEXO;
				}
				break;

			case Sara.SOLICITANDO_ID_ESTADO_TELEFONO:
				print("Sara.SOLICITANDO_ID_ESTADO_TELEFONO");
				if (canal.solicitarInformacion.informacionValida()
					&& (idEstado = Number(canal.solicitarInformacion.getInfo())) <= 2) {
					if (variables.estadoInicialTelefono == null) {
						// Estado inicial del telefono
						updateObject(variables, 'estadoInicialTelefono', Number(canal.solicitarInformacion.getInfo()), canal);

						// Si el estado no es OK, solicitar falla(s)
						if (variables.estadoInicialTelefono < 2) {
							updateObject(variables, 'idFallas', null, canal);
							canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
						} else {
							// Telefono OK, solicitar operacion(es)
							updateObject(variables, 'idFallas', null, canal);
							updateObject(variables, 'idOperaciones', null, canal);
							canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
						}
					} else {
						// Estado final del telefono
						updateObject(variables, 'estadoFinalTelefono', Number(canal.solicitarInformacion.getInfo()), canal);
						if (variables.estadoFinalTelefono != 2)	canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO;
						// else canal.estadoAplicacion = Sara.F_GUARDAR_REPORTE;
						else canal.estadoAplicacion = Sara.F_SOLICITAR_TIPO_MTTO;
					}
				} else {
					// KO, repetir...
					canal.estadoAplicacion = Sara.F_SOLICITAR_ID_ESTADO_TELEFONO;
				}
				break;

			case Sara.SOLICITANDO_ID_FALLA:
				var idFalla;
				if (canal.solicitarInformacion.informacionValida()
					&& validarIdFalla((idFalla = canal.solicitarInformacion.getInfo()))) {
					print("idFalla: " + idFalla);
					// Id falla OK
					if (!idFalla.startsWith('0')) {
						if (variables.idFallas == null) variables.idFallas = [idFalla];
						else variables.idFallas.push(idFalla);
						updateObject(variables, 'idFallas', variables.idFallas, canal);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
					} else if (variables.idFallas == null){
						// Informar que debe reportar alguna falla
						tocarMensaje(canal, '/ivr/debeReportarFalla', -1, -1, false);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
						continuar = false;
					} else {
						// No mas fallas, solicita operacion(es)
						updateObject(variables, 'idOperaciones', null, canal);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
					}
				} else {
					// KO, repetir...
					canal.estadoAplicacion = Sara.F_SOLICITAR_ID_FALLA;
				}
				break;

			case Sara.SOLICITANDO_ID_OPERACION:
				var idOperacion;
				if (canal.solicitarInformacion.informacionValida()
					&& validarIdOperacion((idOperacion = canal.solicitarInformacion.getInfo()))) {

					// Id operacion OK
					if (!idOperacion.startsWith('0')) {
						if (variables.idOperaciones == null) variables.idOperaciones = [idOperacion];
						else variables.idOperaciones.push(idOperacion);
						updateObject(variables, 'idOperaciones', variables.idOperaciones, canal);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
					} else if (variables.idOperaciones == null) {
						// Informar que debe reportar alguna falla
						tocarMensaje(canal, '/ivr/debeReportarOperaciones', -1, -1, false);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
						continuar = false;
					} else {
						// No mas operaciones, solicita repuesto(s) cambiado(s)
						updateObject(variables, 'idRepuestosCambiados', null, canal);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO;
					}
				} else {
					// KO, repetir...
					canal.estadoAplicacion = Sara.F_SOLICITAR_ID_OPERACION;
				}
				break;

			case Sara.SOLICITANDO_ID_REPUESTO_CAMBIADO:
				var idRepuesto;
				if (canal.solicitarInformacion.informacionValida()
					&& validarIdRepuesto((idRepuesto = canal.solicitarInformacion.getInfo()))) {

					// Id repuesto OK
					if (!idRepuesto.startsWith('0')) {
						if (idRepuesto != 18) {
							if (variables.idRepuestosCambiados == null) variables.idRepuestosCambiados = [idRepuesto];
							else variables.idRepuestosCambiados.push(idRepuesto);
						} else {
							if (variables.idRepuestosCambiados == null) {
								variables.idRepuestosCambiados = ["18","19","20"];
							} else {
								variables.idRepuestosCambiados.push("18","19","20");
							}
						}
						updateObject(variables, 'idRepuestosCambiados', variables.idRepuestosCambiados, canal);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO;
					} else {
						// No mas operaciones, solicita repuesto(s) requerido(s)
						updateObject(variables, 'idRepuestosRequeridos', null, canal);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_ESTADO_TELEFONO;
					}
				} else {
					// KO, repetir...
					canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_CAMBIADO;
				}
				break;

			case Sara.SOLICITANDO_ID_REPUESTO_REQUERIDO:
				var idRepuesto;
				if (canal.solicitarInformacion.informacionValida()
					&& validarIdRepuesto((idRepuesto = canal.solicitarInformacion.getInfo()))) {

					// Id repuesto OK
					if (!idRepuesto.startsWith('0')) {
						if (idRepuesto != 18) {
							if (variables.idRepuestosRequeridos == null) variables.idRepuestosRequeridos = [idRepuesto];
							else variables.idRepuestosRequeridos.push(idRepuesto);
						} else {
							if (variables.idRepuestosRequeridos == null) {
								variables.idRepuestosRequeridos = ["18","19","20"];
							} else {
								variables.idRepuestosRequeridos.push("18","19","20");
							}
						}
						updateObject(variables, 'idRepuestosRequeridos', variables.idRepuestosRequeridos, canal);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO
					} else if (variables.idRepuestosRequeridos == null) {
						tocarMensaje(canal, '/ivr/debeReportarRepuestoRequerido', -1, -1, false);
						canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO;
						continuar = false;
					} else {
						//canal.estadoAplicacion = Sara.F_GUARDAR_REPORTE;
						canal.estadoAplicacion = Sara.F_SOLICITAR_TIPO_MTTO;
					}
				} else {
					// KO, repetir...
					canal.estadoAplicacion = Sara.F_SOLICITAR_ID_REPUESTO_REQUERIDO;
				}
				break;

			case Sara.SOLICITANDO_TIPO_MTTO:
				
				if (canal.solicitarInformacion.informacionValida()) {
					if(canal.solicitarInformacion.getInfo() == 0) {
						// Mtto Rapido 
						updateObject(variables, 'tipoMtto', 'mttoRapido', canal);
					} else {
						// Mtto Exahustivo
						updateObject(variables, 'tipoMtto', 'mttoExahustivo', canal);
					}
					canal.estadoAplicacion = Sara.F_GUARDAR_REPORTE;
				} else {
					// KO, repetir...
					canal.estadoAplicacion = Sara.F_SOLICITAR_TIPO_MTTO;
				}
				break;

			case Sara.GUARDANDO_REPORTE:
				if (!canal.consultaBdD.getInfo()) {
					//print('nanay...');
				} else {
					print('resp: ' + canal.consultaBdD.getInfo());
				}
				canal.estadoAplicacion = Sara.F_CONFIRMAR_REPORTE;
				break;

			case Sara.CONFIRMANDO_REPORTE:
				print(canal.variables);
				finalizar(canal, ahora);
				continuar = false;
				break;
		}
	} while (continuar);
}

// M√≥dulos
var Modulos = {
    PRINCIPAL: 1,
    REGISTRO_USUARIO: 2,
    CAMBIO_CLAVE: 3,
    RECARGA_PIN: 4,
    ATENCION_CLIENTE: 5,
    PREVENTA: 6,
    MOTIVACION: 7,
    PREREGISTRO: 8,
    SARA: 9,
    CONSULTAS: 10,
    ACHAT: 11,
    RECARGAS_BIM: 13,
    LLAMADA_DIRECTORIO: 14,
    PREVENTAV2:15,
    CHANCHITA_COLABORADOR:16,
    CERRAR_CHANCHA:17,
    PRE_VENTA_COLABORADOR:18,
    LLAMADA_MARCACION_RAPIDA: 19,
    ESTADO_CHANCHITA_EXTERNA: 20,
};

// Estados para el m√≥dulo principal de la aplicaci√≥n viva-pasto
var Principal = {
    SOLICITAR_ANEXO: 1,
    CONSULTAR_DATOS_USUARIO: 2,
    SOLICITANDO_ANEXO: 3,
    CONSULTANDO_DATOS_USUARIO: 4,
    TOCANDO_FALLO_CONSULTA_DATOS_USUARIO: 5,
    TOCANDO_NO_ESTA_BASE_DATOS_INPE: 6,
    SOLICITANDO_CLAVE: 7,
    TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA: 8,
    CONSULTAR_MENSAJES_NUEVOS_ACHAT: 9,
    CONSULTANDO_MENSAJES_NUEVOS_ACHAT: 10,
    INFORMANDO_SALDO: 11,
    SOLICITANDO_NUMERO: 12,
    CONSULTANDO_TARIFA: 13,
    CONSULTANDO_TRONCAL: 30,
    TOCANDO_FALLO_CONSULTA_TARIFA: 14,
    LLAMANDO: 15,
    TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS: 16,
    TOCANDO_LD_NACIONAL_NO_PERMITIDA: 17,
    TOCANDO_LD_INTERNACIONAL_NO_PERMITIDA: 18,
    TOCANDO_NUMERO_RESTRINGIDO: 19,
    TOCANDO_NUMERO_INVALIDO: 20,
    TOCANDO_SALDO_INSUFICIENTE: 21,
    TOCANDO_SISTEMA_MANTENIMIENTO: 22,
    TOCANDO_SISTEMA_FUERA_HORARIO: 23,
    TOCANDO_PREVENTA_FUERA_HORARIO: 24,
    LLAMANDO_DIRECTORIO: 25,
    TOCAR_NUMERO_ANEXO: 26,
    TOCANDO_ANEXO: 27,
    ESTA_CUENTA_NO_SE_PUEDE_USAR: 28,
    TOCANDO_MENSAJE_INFO_GENERAL: 29,
    SISTEMA_LLAMANDO: 31,
    TERMINAR_LLAMADA: 32,
    CONSULTANDO_SOLICITUD_EMPADRONAMIENTO: 33,
    PUT_TRUNK: 34,
    REGISTRANDO_LLAMADA: 35,
    ENVIANDO_MENSAJE_SALDO_BAJO: 36
};

var numerosParaGrabar = ['925537527','927436879'];
function estaListaNumerosParaGrabar(numeroTelefono) {
    var minIndex = 0,
        maxIndex = numerosParaGrabar.length - 1,
        currentIndex,
        currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = (minIndex + maxIndex) >> 1;
        currentElement = numerosParaGrabar[currentIndex];

        if (currentElement < numeroTelefono) {
            minIndex = currentIndex + 1;
        } else if (currentElement > numeroTelefono) {
            maxIndex = currentIndex - 1;
        } else {
            return true;
        }
    }

    return false;
}

var numberList = [];
function findNumber(number, idClasificacion, fechaHora, idTroncal, cause_txt, duration) {
    var minIndex = 0,
        maxIndex = numberList.length - 1,
        currentIndex = 0,
        currentElement;
        
    // Analisis de exito (OK)
    if (cause_txt == 'OK') {
        cause_txt = (6000 < duration && duration < 15001 ? 'SUSPICIOUS' : 'OK');
    }

    // Ciclo de busqueda (binaria)
    while (minIndex <= maxIndex) {
        currentIndex = (minIndex + maxIndex) >> 1;
        currentElement = numberList[currentIndex].number;

        if (number < currentElement) {
            maxIndex = currentIndex - 1;
        } else if (currentElement < number) {
            minIndex = currentIndex + 1;
        } else {
            // Numero esta en la lista
            if (arguments.length > 1) {
                // Actualizar estadisticas de este numero
                if (cause_txt == 'OK' && !numberList[currentIndex].troncalOK) {
                    numberList[currentIndex].troncalOK = idTroncal;
                }
                numberList[currentIndex].intentos.push([fechaHora, idTroncal, cause_txt]);
            }

            return currentIndex;
        }
    }

    // Numero no esta en la lista
    if (arguments.length > 1) {
        // Crearlo e insertarlo en la posicion hallada
        var object = Object.create(null);
        object.number = number;
        object.idClasificacion = idClasificacion;
        if (cause_txt == 'OK') object.troncalOK = idTroncal;
        object.intentos = [[fechaHora, idTroncal, cause_txt]];
        if (minIndex > currentIndex) currentIndex++;
        numberList.splice(currentIndex, 0, object);

        return currentIndex;
    }

    return -1;
}

function horaValida(ms) {
    //return false;
    //if (15 * 1800000 <= ms && ms <= 24 * 1800000) return true;
    //else if (29 * 1800000 <= ms && ms <= 33 * 1800000) return true;
    //else return false;
    return (12 * 1800000 <= ms && ms <= 42 * 1800000 ? true : false);
    //return false;
}

function esNumeroRestringido(destino) {
    if (['935629274','7067789','017067789','017067788','7067788', '7066969', '017066969','7088888', '017088888', '017002300', '7002300', '017067778', '7067778', '017006969', '7006969', '017067700', '7067700', '017067790', '7067790', '017067780', '7067780', '017006999', '7006999', '017002323', '7002323', '017067786', '7067786', '017067777', '7067777', '017088886', '7088886', '017067706', '7067706', '7006001', '017006001', '7067787', '017067787', '7067782', '017067782', '7067779', '017067779', '7067781', '017067781', '7067784', '017067784', '7006010', '7006010', '017006010', '7067755', '017067755', '7062589', '017062589', '7067799', '017067799', '7067785', '017067785', '7067791', '017067791', '7067783', '017067783', '7067776', '017067776', '7067798', '017067798', '7002365', '017002365', '7067750', '017067750', '7002333', '017002333', '7067707', '017067707','7067771','7002369','7002302','7067796','7088860','7088899','7006900','7006000','7067770','7006060','7088889','7088881','7067739','7002372','7067760','017067771','017002369','017002302','017067796','017088860','017088899','017006900','017006000','017067770','017006060','017088889','017088881','017067739','017002372','017067760', '7067745', '017067745','7006090','017006090','7067722','017067722','7006019','017006019','7067766','017067766','7067728','017067728','017067712','7067712','017067774','7067774','017088870','7088870','017067748','7067748','017067794','7067794','017067792','7067792','017002356','7002356','7067795','017067795','7006970','017006970','7066925','017066925','7088829','017088829','7088808','017088808','7067751','017067751','7067765','017067765','017067772','7067772','017067753','7067753','7006968','017006968','7067713','017067713','7067740','017067740','7067756','017067756','017067797','7067797','017059763','7059763','7088884','017088884','017067711','7067711','017067708','7067708','017002389','7002389','7067747','017067747', '017006971','7006971','017067761','7067761','7067733','017067733','7067793','017067793','017067768','7067768','017062584','7062584','7363225','017363225','017067775','7067775','7067720','017067720','7066939','017066939','017006939','7006939','7062588','017062588','7067736','017067736','017062525','7062525','7088896','017088896','7067709','017067709','017067705','7067705','017067704','7067704','017066989','7066989','017066060','7066060','017088861','7088861','7067721','017067721','017067754','7067754','7006019','7006090','7066060','7066970','7066989','7067704','7067705','7067708','7067712','7067714','7067720','7067721','7067722','7067735','7067740','7067741','7067742','7067752','7067754','7067756','7067758','7067761','7067766','7067792','7067793','7067794','7067795','7088861','7088870','7088898','7002358','7002399','7006011','7006020','7006030','7006058','7067724','7067744','7067763','7088877','7002324','7006925','7067773','7002301','7002379','7006015','7066960','7067710','7067716','7067743','7067767','7088839','7088865','7088866','7002334','7002352','7067764','7006065','7066010','7067703','7067749','7006002','7006080','7006945','7006951','7062587','7067762','7002325','7066909','7006989','7062583','7062585','7067715','7067717','7067746','7088890','017006019','017006090','017066060','017066970','017066989','017067704','017067705','017067708','017067712','017067714','017067720','017067721','017067722','017067735','017067740','017067741','017067742','017067752','017067754','017067756','017067758','017067761','017067766','017067792','017067793','017067794','017067795','017088861','017088870','017088898','017002358','017002399','017006011','017006020','017006030','017006058','017067724','017067744','017067763','017088877','017002324','017006925','017067773','017002301','017002379','017006015','017066960','017067710','017067716','017067743','017067767','017088839','017088865','017088866','017002334','017002352','017067764','017006065','017066010','017067703','017067749','017006002','017006080','017006945','017006951','017062587','017067762','017002325','017066909','017006989','017062583','017062585','017067715','017067717','017067746','017088890','7002385','7067734','7002304','7067718','7067719','7002335','7006955','7006050','7002359','7066089','7066098','7002330','7066967','7006083','7006085','7002380','7006964','7006089','7066968','7088858','7088869','7006975','7006985','7062586','7006924','7006952','7006909','7006013','7088804','7002345','7002329','7006986','7006960','7062553','7067757','7002355','7088841','7006967','7067738','7006962','7088862','7088855','7088848','7006961','7066988','7062545','017002385','017067734','017002304','017067718','017067719','017002335','017006955','017006050','017002359','017066089','017066098','017002330','017066967','017006083','017006085','017002380','017006964','017006089','017066968','017088858','017088869','017006975','017006985','017062586','017006924','017006952','017006909','017006013','017088804','017002345','017002329','017006986','017006960','017062553','017067757','017002355','017088841','017006967','017067738','017006962','017088862','017088855','017088848','017006961','017066988','017062545', '017006966', '7006966','7267692','7006034','7006061','7006025','7088845','7002341','7088893','7067737','7062555','7006012','7229043','7006040','7006051','7066980','7006024','7002348','7066011','7002349','7066965','7062532','7002321','7088891','7066080','7066921','7006069','7002381','7067759','7006014','7067769','7006068','7006963','7006928','7002336','7088840','7066961','7066917','7006987','7006063','7088828','7006066','7062580','7006953','7006954','7006973','7006976','7088871','7066966','7088856','7066976','7002322','7066986','7066061','7062582','7002326','5296615','7006053','7088847','7066064','7006965','7066067','7002366','7002386','7088863','7088864','7006064','7582279','7006076','7006067','7062581','7066922','7006088','7002346','7006098','7002364','7006022','017267692','017006034','017006061','017006025','017088845','017002341','017088893','017067737','017062555','017006012','017229043','017006040','017006051','017066980','017006024','017002348','017066011','017002349','017066965','017062532','017002321','017088891','017066080','017066921','017006069','017002381','017067759','017006014','017067769','017006068','017006963','017006928','017002336','017088840','017066961','017066917','017006987','017006063','017088828','017006066','017062580','017006953','017006954','017006973','017006976','017088871','017066966','017088856','017066976','017002322','017066986','017066061','017062582','017002326','015296615','017006053','017088847','017066064','017006965','017066067','017002366','017002386','017088863','017088864','017006064','017582279','017006076','017006067','017062581','017066922','017006088','017002346','017006098','017002364','017006022'].indexOf(destino) >= 0) return true;
    return false;
}

var usuariosAchat = [];
function EncontrarUsuarioAchat(epochFinLlamada, idCanal) {
    var minIndex = 0,
        maxIndex = usuariosAchat.length - 1,
        currentIndex = 0,
        currentElement;

    // Ciclo de busqueda (binaria)
    while (minIndex <= maxIndex) {
        currentIndex = (minIndex + maxIndex) >> 1;
        currentElement = usuariosAchat[currentIndex].epochFinLlamada;

        if (epochFinLlamada < currentElement) {
            maxIndex = currentIndex - 1;
        } else if (currentElement < epochFinLlamada) {
            minIndex = currentIndex + 1;
        } else {
            return currentIndex;
        }
    }

    // Numero no esta en la lista
    if (arguments.length == 2) {
        // Crearlo e insertarlo en la posicion hallada
        var objectAchat = Object.create(null);
        objectAchat.epochFinLlamada = epochFinLlamada;
        objectAchat.idCanal = idCanal;
        if (minIndex > currentIndex) currentIndex++;
        usuariosAchat.splice(currentIndex, 0, objectAchat);

        return currentIndex;
    }

    return -1;
}

var RecargasBIM = {
    MENSAJE_BIENVENIDA:1,
    OBTENER_CONTACTOS: 2,
    OBTENIENDO_CONTACTOS: 3,
    TOCAR_INSTRUCTIVO: 4,
    SELECCIONAR_OPCION: 5,
    TOCAR_ELIMINAR_CONCTACTO: 6,
    AGREGAR_CONTACTO: 7,
    CONFIRMAR_NUMERO_AGREGAR: 8,
    CONFIRMANDO_NUMERO_AGREGAR: 9,
    VALIDAR_CONTACTO: 10,
    VALIDANDO_CONTACTO: 11,
    AGREGANDO_CONTACTO: 12,
    ELIMINAR_CONTACTO: 13,
    TOCANDO_ELIMINAR_CONCTACTO: 14,
    ELIMINANDO_USUARIO: 15,
    FINALIZAR_MODULO: 16
}

function recargasBIM(canal, ahora, inicio) {
    // Verificar si se colg√≥ la llamada
    var variables = null;

    if (canal.colgoLlamada) {
        // Terminar...
        finalizar(canal, ahora);
        return;
    }

    if (inicio) {
        variables = Object.create(null);
        variables.nivel = 0;

        // Definir m√≥dulo y estado
        canal.modulo = Modulos.RECARGAS_BIM;
        canal.variables = JSON.stringify(variables);
        //tocarMensaje(canal, '/recargaBIM/mensajeBienvenidaBIM', -1, -1, false);
        variables.estadoFuncion = [RecargasBIM.MENSAJE_BIENVENIDA];
        canal.variables = JSON.stringify(variables);
    }

    do {
        // Recuperar variables
        var continuar = false;
        if (canal.variables == null) {
            variables = Object.create(null);
        } else {
            variables = JSON.parse(canal.variables);
        }
        print("Contactos: " + JSON.stringify(variables.contactos));

        switch (variables.estadoFuncion[variables.nivel]) {
            case RecargasBIM.MENSAJE_BIENVENIDA:
                tocarMensaje(canal, '/recargaBIM/bienvenidaMenuInscp', -1, -1, true);
                variables.estadoFuncion = [RecargasBIM.OBTENER_CONTACTOS];
                break;
            case RecargasBIM.OBTENER_CONTACTOS:
                // TODO:Consulta la BdD Local para obtener los contactos registrados..
                var parametros = '{"codAzulito":"' + canal.dni + '"}';
                consultaBaseDeDatos(canal, 0, null,
                    'telefonia.obtenerContactosBIM', parametros, null, false, 3, 5, false);
                variables.estadoFuncion = [RecargasBIM.OBTENIENDO_CONTACTOS];
                //continuar = true;
                break;
            case RecargasBIM.OBTENIENDO_CONTACTOS:
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, RecargasBIM.FINALIZAR_MODULO);
                    break;
                }
                // guardamos los contactos del usuario
                variables.contactos = JSON.parse(canal.consultaBdD.getInfo()).contactos;
                variables.puntero = variables.contactos.length; 
                variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                continuar = true;
                break;
            
            case RecargasBIM.TOCAR_INSTRUCTIVO:
                tocarMensaje(canal, '/recargaBIM/marqueNumeroMovilOrWaitSilence', -1, -1, true);
                variables.estadoFuncion[variables.nivel] = RecargasBIM.SELECCIONAR_OPCION;
                break;

            case RecargasBIM.SELECCIONAR_OPCION:
                if (canal.tocarMensaje.teclaInterrumpio) {
                    // Marc√≥ un n√∫mero ... 
                    if (variables.contactos.length < 5) {
                        solicitarDatos(canal, '', true, 9, 1, canal.tocarMensaje.teclaInterrumpio,
                            "/recargaBIM/silence2.wav", '/recargaBIM/marqueNumeroMovil', '/ivr/fallaSolicitarNumero',
                            10, 5, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.AGREGAR_CONTACTO;
                    } else {
                        tocarMensaje(canal, '/recargaBIM/maxContactos', -1, -1, true);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                    }
                } else {
                    // No marc√≥ ningun numero .. le listamos sus contactos, si tiene.. 
                    if (variables.contactos.length == 0) {
                        tocarMensaje(canal, '/recargaBIM/noTieneContactos', -1, -1, true);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                        break;
                    }
                    
                    // Armando lista.. 
                    var listaPosiciones = ['/recargaBIM/primerContacto', '/recargaBIM/segundoContacto', '/recargaBIM/tercerContacto', 
                        '/recargaBIM/cuartoContacto', '/recargaBIM/quintoContacto'];
                    var listaContactosBIM = [];
                    for (i=0; i<variables.contactos.length; i++) {
                        var pos = i + 1;
                        listaContactosBIM = listaContactosBIM.concat(listaPosiciones[i], textoTelefonoNuevo(variables.contactos[i]));
                    }
                    
                    tocarMensaje(canal, listaContactosBIM, -1, -1, true);   
                    variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_ELIMINAR_CONCTACTO
                }
                break;

            case RecargasBIM.TOCAR_ELIMINAR_CONCTACTO:
                tocarMensaje(canal, '/recargaBIM/eliminarMovilOrWaitSilence', -1, -1, true);
                variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCANDO_ELIMINAR_CONCTACTO;
                break;
            
            case RecargasBIM.TOCANDO_ELIMINAR_CONCTACTO:
                if (canal.tocarMensaje.teclaInterrumpio) {
                    solicitarDatos(canal, '', true, 9, 3, canal.tocarMensaje.teclaInterrumpio,
                        "/recargaBIM/silence2.wav", '/recargaBIM/reintentoMarqueUnNumMovil',
                        '/ivr/fallaSolicitarNumero',
                        10, 5, false);
                    variables.estadoFuncion[variables.nivel] = RecargasBIM.ELIMINAR_CONTACTO;   
                } else {
                    variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                    continuar = true;
                }
                break;

            case RecargasBIM.ELIMINAR_CONTACTO:
                if (canal.solicitarInformacion.informacionValida()) {
                    var numeroFamiliar = canal.solicitarInformacion.getInfo();
                    print("numeroFamiliarDelete: " + numeroFamiliar);
                    // Existe el numero a eliminar??..
                    if (variables.contactos.indexOf(numeroFamiliar) >= 0) {
                        variables.posContactDelete = variables.contactos.indexOf(numeroFamiliar);
                        variables.numFamiliar = numeroFamiliar;
                        var parametros = '{"codAzulito":"' + canal.dni + 
                            '","numeroFamiliar":"' + variables.numFamiliar + 
                            '","prefijoPenal":' + prefijoCarcel + '}';
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.eliminarContactoBIM', parametros, null, false, 3, 1, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.ELIMINANDO_USUARIO;
                    } else {
                        tocarMensaje(canal,'/recargaBIM/contactoNoExiste', -1, -1, true);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                    }
                } else {
                    // se debe tener algun manejo.. por ahora cortamos....
                    finalizar(canal, ahora);
                }
                break;

            case RecargasBIM.ELIMINANDO_USUARIO:
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, RecargasBIM.FINALIZAR_MODULO);
                    break;
                }
                
                respuesta = canal.consultaBdD.getInfo();
                if (JSON.parse(respuesta).result == 'OK') {
                    variables.contactos.splice(variables.posContactDelete,1);
                    print("ContactoActualizaAfterDelete: " + variables.contactos);
                    tocarMensaje(canal, '/recargaBIM/eliminadoExito', -1, -1, false);
                } else {
                    tocarMensaje(canal, '/recargaBIM/eliminadoFalla', -1, -1, false);
                }
                variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                break;

            case RecargasBIM.AGREGAR_CONTACTO:
                if (canal.solicitarInformacion.informacionValida()) {
                    var nuevoUsuario = canal.solicitarInformacion.getInfo();
                    print("El nuevo Usuario:" + nuevoUsuario);
                    if (nuevoUsuario.length == 9 &&
                            variables.contactos.indexOf(nuevoUsuario) == -1) {
                        variables.nuevoUsuario = nuevoUsuario;
                        var listaNumNuevo = ["/recargaBIM/elNumeroMarcadoEs"];
                        listaNumNuevo = listaNumNuevo.concat(textoTelefonoNuevo(nuevoUsuario), "/recargaBIM/confirmarNum");
                        print ("Numero nuevo para agregar: " + listaNumNuevo);
                        solicitarDatos(canal, '1,2,3', true, 1, 1, null,
                            listaNumNuevo, '/recargaBIM/reintentoMarqueUnNumMovil',
                            '/ivr/fallaSolicitarNumero',
                            10, 5, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.CONFIRMANDO_NUMERO_AGREGAR;
                    } else {
                        tocarMensaje(canal, '/recargaBIM/suUsuarioYaExiste', -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                    }
                    //continuar = true;
                } else {
                    finalizar(canal, ahora);
                }
                break;
            
            case RecargasBIM.CONFIRMAR_NUMERO_AGREGAR:
                solicitarDatos(canal, '1,2,3', true, 1, 1, null,
                    "/recargaBIM/confirmarNum", '/recargaBIM/confirmarNum',
                    '/ivr/fallaSolicitarNumero',
                    10, 5, false);
                variables.estadoFuncion[variables.nivel] = RecargasBIM.CONFIRMANDO_NUMERO_AGREGAR;
                break;

            case RecargasBIM.CONFIRMANDO_NUMERO_AGREGAR:
                if (canal.solicitarInformacion.informacionValida()) {
                    if (canal.solicitarInformacion.getInfo() == "1") {
                        // Confirmado .. 
                        var parametros = '{"codAzulito":"' + canal.dni + '","numeroFamiliar":"' + variables.nuevoUsuario + '"}';
                        canal.inicializarConsultaLocal(null,
                                'bim.validarUsuario', parametros, 10, 1, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.VALIDANDO_CONTACTO;
                    } else if (canal.solicitarInformacion.getInfo() == "2") {
                        // Repetir Numero marcado.. 
                        var listaNumNuevo = [];
                        listaNumNuevo = listaNumNuevo.concat(textoTelefonoNuevo(variables.nuevoUsuario));
                        tocarMensaje(canal, listaNumNuevo, -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.CONFIRMAR_NUMERO_AGREGAR;
                    } else {
                        // no confirmado (3)
                        tocarMensaje(canal, '/recargaBIM/usuarioNoRegistrado', -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                    }
                } else {
                    finalizar(canal, ahora);
                }
                break;
            
            case RecargasBIM.VALIDANDO_CONTACTO:
                if (canal.consultaLocal.getInfo()) {
                    respuesta = canal.consultaLocal.getInfo();
                    if (respuesta == 'OK') {
                        var parametros = '{"codAzulito":"' + canal.dni + 
                            '","numeroFamiliar":"' + variables.nuevoUsuario + 
                            '","prefijoPenal":' + prefijoCarcel + '}';
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.agregarContactoBIM', parametros, null, false, 3, 1, false);
                        variables.estadoFuncion[variables.nivel] = RecargasBIM.AGREGANDO_CONTACTO;
                        break;
                    } else {
                        tocarMensaje(canal, '/recargaBIM/agregadoFalla', -1, -1, false);
                    }
                    variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                } else {
                    finalizar(canal, ahora);
                }
                break;

            case RecargasBIM.AGREGANDO_CONTACTO:
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, RecargasBIM.FINALIZAR_MODULO);
                    break;
                }

                respuesta = canal.consultaBdD.getInfo();
                //respuesta = 'OK';
                if (JSON.parse(respuesta).result == 'OK') {
                    variables.contactos.push(variables.nuevoUsuario);
                    tocarMensaje(canal, '/recargaBIM/agregadoExito', -1, -1, false);
                } else {
                    tocarMensaje(canal, '/recargaBIM/agregadoFalla', -1, -1, false);
                }
                variables.estadoFuncion[variables.nivel] = RecargasBIM.TOCAR_INSTRUCTIVO;
                break;

            case RecargasBIM.FINALIZAR_MODULO:
                finalizar(canal, ahora);
                break;
        }

        // Guardar las variables en el canal
        canal.variables = JSON.stringify(variables);
    } while (continuar)
}

var LlamadaDirectorio = {
    VALIDAR_NUMERO_DIRECTORIO: 1,
    VALIDANDO_NUMERO_DIRECTORIO: 2,
    TOCAR_DESTINO_NO_ASOCIADO_CODI_AZULITO: 3,
    VALIDAR_COD_AZULITO_DIRECTORIO: 4,
    VALIDANDO_COD_AZULITO_DIRECTORIO: 5,
    CONSULTAR_DNI_DIRECTORIO: 6,
    CONSULTANDO_DNI_DIRECTORIO: 7,
    SOLICITANDO_CLAVE: 8,
    TOCANDO_SALDO: 9,
    INFORMANDO_SALDO: 10,
    TOCANDO_SISTEMA_FUERA_HORARIO: 11,
    CONSULTANDO_TARIFA: 12,
    TOCANDO_FALLO_CONSULTA_TARIFA: 13,
    CONSULTANDO_TRONCAL: 14,
    LLAMANDO: 15,
    TOCANDO_NUMERO_RESTRINGIDO: 16,
    TOCANDO_NUMERO_INVALIDO: 17,
    TOCANDO_SALDO_INSUFICIENTE: 18,
    TOCANDO_NO_ESTA_BASE_DATOS_INPE: 19,
    TOCANDO_FALLO_CONSULTA_DATOS_USUARIO: 20,
    ESTA_CUENTA_NO_SE_PUEDE_USAR: 21,
    TERMINAR_LLAMADA: 22,
    TOCANDO_FALLO_CODIGO_AZULITO: 23,
    TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA: 24,
    TOCANDO_DESTINO_NO_ASOCIADO_CODI_AZULITO: 25,
    TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS: 26,
    PUT_TRUNK: 27,
    REGISTRANDO_LLAMADA: 28,
    ENVIANDO_MENSAJE_SALDO_BAJO: 29,
    PRE_VENTA:30
}

function llamadaDirectorio(canal, canalesActivos, ahora, inicio) {

    // Verificar si se colg√≥ la llamada
    var variables = null;

    if (inicio) {
        if (canal.variables && canal.variables != '') variables = JSON.parse(canal.variables);
        else variables = Object.create(null);
        variables.nivel = 0;
        variables.tarificar = false;

        // Definir m√≥dulo y estado
        canal.modulo = Modulos.LLAMADA_DIRECTORIO;
        variables.estadoFuncion = [LlamadaDirectorio.VALIDAR_NUMERO_DIRECTORIO];
        canal.variables = JSON.stringify(variables);
    }

    do {
        // Recuperar variables
        var continuar = false;
        if (canal.variables == null) {
            variables = Object.create(null);
        } else {
            variables = JSON.parse(canal.variables);
        }

        // Verificar si se colg√≥ la llamada
        if (canal.colgoLlamada && !variables.tarificar) {
            // Terminar...
            if (canal.dni.indexOf("#") != -1) {
                // Corto antes de que se encontrara un cod azulito asociado a su numero marcado
                AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
            }
            finalizar(canal, ahora);
            return;
        }
        
        switch (variables.estadoFuncion[variables.nivel]) {
            case LlamadaDirectorio.VALIDAR_NUMERO_DIRECTORIO:
                consultaBaseDeDatos(canal, 0, null,
                    'telefonia.validarNumeroDirectorio',
                    '{"numeroFamiliar":"' + variables.destino + '"}',
                    null, false, 3, 5, false);
                variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.VALIDANDO_NUMERO_DIRECTORIO;
                break;

            case LlamadaDirectorio.VALIDANDO_NUMERO_DIRECTORIO:
                if (!canal.consultaBdD.getInfo()) {
                    AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
                    informarFallaColgar(canal, LlamadaDirectorio.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO);
                    break;
                }

                codAzulitosDirectorio = 
                    JSON.parse(canal.consultaBdD.getInfo()).codigosAzulitos;
                
                variables.usuariosDirectorio = codAzulitosDirectorio;
                variables.solicitarClavePorDirectorio = false;
                canal.variables = JSON.stringify(variables);
                variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.VALIDAR_COD_AZULITO_DIRECTORIO;
                
                continuar = true;
                break;

            case LlamadaDirectorio.VALIDAR_COD_AZULITO_DIRECTORIO:
                solicitarDatos(canal, '', true, 0, 3, null,
                    '/directorio/solicitarCodAzulito', '/directorio/reintentarCodAzulito', '/directorio/fallaSolicitarCodAzulito',
                    10, 5, false);
                // Definir estado
                variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.VALIDANDO_COD_AZULITO_DIRECTORIO;
                break;
            
            case LlamadaDirectorio.VALIDANDO_COD_AZULITO_DIRECTORIO:
                if (canal.solicitarInformacion.informacionValida()) {
                    // Parchamos el dni e imprimos el log..
                    canal.dni = canal.solicitarInformacion.getInfo();
                    if (variables.usuariosDirectorio.indexOf(canal.dni) != -1) {
                        // El numero azulito marcado existe.. (seteamos valores e imprimos el log)
                        // Validamos si ya existe este usuario.. 
                        if (AsteriskAri.usuarioYaEstaLlamando(canal)) {
                            // usuario ya existe... 
                            AsteriskAri.reportarLlamadasMonitor(canal, canalesActivos, "doble llamada (" + canal.numeroExtension + ')');
                            canal.finalizoTelefonia = true;
                            finalizar(canal, ahora);
                            break;
                        }
                        AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
                        canal.numeroDestino = variables.destino;
                        // Definir estado
                        continuar = true;
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTAR_DNI_DIRECTORIO;
                        break;
                    } else if (variables.destino.startsWith("*")) {
						// El numero azulito marcado existe.. (seteamos valores e imprimos el log)
						// Validamos si ya existe este usuario.. 
						if (AsteriskAri.usuarioYaEstaLlamando(canal)) {
							// usuario ya existe... 
							AsteriskAri.reportarLlamadasMonitor(canal, canalesActivos, "doble llamada (" + canal.numeroExtension + ')');
							canal.finalizoTelefonia = true;
							finalizar(canal, ahora);
							break;
						}
						AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
						canal.numeroDestino = variables.destino;
						// Definir estado
						continuar = true;
						variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTAR_DNI_DIRECTORIO;
						break;
                    } else {
                        // El numero azulito marcado existe.. (seteamos valores e imprimos el log)
                        // Validamos si ya existe este usuario..
                        if (AsteriskAri.usuarioYaEstaLlamando(canal)) {
                            // usuario ya existe...
                            AsteriskAri.reportarLlamadasMonitor(canal, canalesActivos, "doble llamada (" + canal.numeroExtension + ')');
                            canal.finalizoTelefonia = true;
                            finalizar(canal, ahora);
                            break;
                        }
                        AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
                        tocarMensaje(canal, '/directorio/numeroNoAsociadoCodAzulito', -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_FALLO_CODIGO_AZULITO;
                        break;
                    }
                } else {
                    AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
                    finalizar(canal, ahora);
                    break;
                }

            case LlamadaDirectorio.CONSULTAR_DNI_DIRECTORIO:
                if (canal.numeroExtension == '1006') canal.numeroExtension = '124201';
                if (canal.numeroExtension == '1003') canal.numeroExtension = '128001';
                if (canal.numeroExtension == '1002') canal.numeroExtension = '128001';
                consultaBaseDeDatos(canal, 0, null,
                    'telefonia.consultarInterno',
                    '{"idInterno":"' + canal.dni + '",' +
                        '"extensionTelefono":"' + canal.numeroExtension + '",' +
                        '"tipoInfo":1}',
                    null, false, 3, 5, false);
                // Definir estado
                variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTANDO_DNI_DIRECTORIO;
                break;

            case LlamadaDirectorio.CONSULTANDO_DNI_DIRECTORIO:
                if (!canal.consultaBdD.getInfo()) {
                    informarFallaColgar(canal, LlamadaDirectorio.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO);
                    break;
                }

                canal.datosUsuario = canal.consultaBdD.getInfo();
                //print("datosUsuario: " + canal.datosUsuario);
                var datosUsuario = JSON.parse(canal.datosUsuario);
                //print("datosUsuario:" + JSON.stringify(datosUsuario));
    
                // Validar horario y tipo usuario
                var ms = (ahora - 5 * 3600000) % 86400000;
                if (datosUsuario.interno.tipo == TIPO_INTERNO && !horaValida(ms)) {
                    // Horario no permitido para reos
                    tocarMensaje(canal, '/directorio/sistemaFueraHorario', -1, -1, false);
                    
                    // Definir estado
                    variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_SISTEMA_FUERA_HORARIO;
                    break;
                } else {
                    // Este c√≥digo azulito existe en la base de datos ?, puede llamar ?
                    if (datosUsuario.existeBdD && datosUsuario.puedeLlamar) {
                        if (variables.solicitarClavePorDirectorio) {
                            solicitarDatos(canal, '', true, 4, 3, null,
                                '/directorio/solicitarClave', '/directorio/reintentoSolicitarClave', 
                                '/directorio/fallaSolicitarClave', 10, 5, true);
                            variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.SOLICITANDO_CLAVE;
                        } else {
                            continuar = true;
                            variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_SALDO;
                        }
                        break;
                    } else if (!datosUsuario.existeBdD) {
                        tocarMensaje(canal, '/directorio/usuarioNoEstaBaseDatosINPE', -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
                        break;
                    } else {
                        if (datosUsuario.mensaje.startsWith('Cuenta inactivada'))
                            tocarMensaje(canal, '/directorio/cuentaDesactivada', -1, -1, false);
                        else if (datosUsuario.mensaje.startsWith('Interno dado de alta'))
                            tocarMensaje(canal, '/directorio/internoDadoDeAlta', -1, -1, false);
                        else
                            tocarMensaje(canal, '/directorio/cuentaRegistradaEnOtroPenal', -1, -1, false);
    
                        // Definir estado
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.ESTA_CUENTA_NO_SE_PUEDE_USAR;
                        break;
                    }
                }
            
            case LlamadaDirectorio.SOLICITANDO_CLAVE:
                if (canal.solicitarInformacion.informacionValida()) {
                    // Modo no seguro
                    var clave = canal.solicitarInformacion.getInfoSHAHash();

                    var datosUsuario = JSON.parse(canal.datosUsuario);
                    // verificar si tiene intentos de ingreso
                    if (clave == datosUsuario.interno.clave) {
                        // Usuario validado
                        if (datosUsuario.interno.cambiarClave) {
                            // Obligar a cambio de clave
                            cambioClave(canal, ahora, true, datosUsuario.interno.fhUltimaLlamada, datosUsuario.interno.cambiarClave);
                            break;
                        } else {
                            continuar = true;
                            variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_SALDO;
                            break;
                        }
                    } else {
                        tocarMensaje(canal, '/directorio/usuarioDigitaClaveInvalida', -1, -1, false);

                        // Definir estado
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA;
                    }
                } else {
                    // Falla...
                    AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
                    finalizar(canal, ahora);
                    break;
                }

            case LlamadaDirectorio.TOCANDO_SALDO:
                var lista = [];

                // Este usuario tiene recargas que a√∫n no se le han confirmado ?
                if (datosUsuario.interno.nuevasRecargas) {
                    lista = textoRecargasSinConfirmar(datosUsuario.interno.nuevasRecargas);
                }

                // Adicionar a la lista mensajes para tocar el saldo
                lista = lista.concat(textoDineroNuevaVoz(datosUsuario.interno.saldo, '/ivrNewVoice/saldo'));

                // Iniciar el play y definir nuevo estado
                tocarMensaje(canal, listToString(lista), -1, -1, true);
                variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.INFORMANDO_SALDO;
                break;
            
            case LlamadaDirectorio.INFORMANDO_SALDO:
                var datosUsuario = JSON.parse(canal.datosUsuario);
                if (canal.numeroDestino.startsWith('*')) {
					// Verificar la opci√≥n digitada
					if (canal.numeroDestino.startsWith('*123') 
						|| canal.numeroDestino.startsWith('*125') || canal.numeroDestino.startsWith('*611')) {
						// Atenci√≥n al cliente
						atencionCliente(canal, ahora, true);
						break;
					} else if (canal.numeroDestino.startsWith('*107')) {
						// Solicitud de recarga
						preVenta(canal, ahora, true);
						break;
					} else if (canal.numeroDestino.startsWith('*117')) {
						// Solicitud de recarga
						//preVenta(canal, ahora, true);
						preVentaV2(canal, ahora, true, variables);
						variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.PRE_VENTA;
						break;
					} else if (canal.numeroDestino.startsWith('*355')) {
						// Escuchar mensaje motivaci√≥n
						consultaBaseDeDatos(canal, 0, null,
							'telefonia.consultarIdMensaje',
							'{"idInterno":"' + canal.dni + '",' +
							'"extensionTelefono":"' + canal.numeroExtension + '"}',
							null, false, 3, 5, false);

						// Definir m√≥dulo y estado
						canal.modulo = Modulos.MOTIVACION;
						canal.estadoAplicacion = Motivacion.CONSULTANDO_ID_MENSAJE;
						break;
					} else if (canal.numeroDestino.startsWith('*612')) {
						// Escuchar mensajes de familiares
						mensajeFamilia(canal, ahora, true);
						break;
					} 
					// Opciones o consultas
					tocarMensaje(canal, '/ivr/noSeHabilitanOpcionesConsultas', -1, -1, false);

					// Definir estado
					variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS;
					break;
				} else if (canal.numeroDestino.length == (8 - codigoArea.length) &&
                    !canal.numeroDestino.startsWith('0') &&
                    !canal.numeroDestino.startsWith('9')) 
                    {
                    // Llamada a fijo local
                    datosUsuario.datosTarifa = tarifas.fijoLocal;
                } else if (canal.numeroDestino.length == 9 && canal.numeroDestino.startsWith('9')) {
                    // Llamada a celular
                    datosUsuario.datosTarifa = tarifas.celular;
                } else if (canal.numeroDestino.length == 9 && canal.numeroDestino.startsWith('0800')) {
                    // Llamada a l√≠nea gratuita (0800)
                    datosUsuario.datosTarifa = tarifas.gratuita;
                } else if (canal.numeroDestino.length == 9 &&
                    canal.numeroDestino.startsWith('0') &&
                    !canal.numeroDestino.startsWith('00')) 
                    {
                    // Llamada a fijo nacional. Validar que el n√∫mero se pueda marcar como local
                    if (canal.numeroDestino.startsWith('0' + codigoArea)) {
                        // Llamada local
                        canal.numeroDestino = canal.numeroDestino.substr(1 + codigoArea.length);
                        datosUsuario.datosTarifa = tarifas.fijoLocal;
                    } else {
                        // Llamada a fijo nacional
                        datosUsuario.datosTarifa = tarifas.fijoNacional;
                    }
                } else if (canal.numeroDestino.startsWith('00')) {
                    // Llamada internacional (fijo o celular). Verificar que no haya ceros (0) de m√°s
                    while (canal.numeroDestino.startsWith('000')) {
                        canal.numeroDestino = canal.numeroDestino.substr(1);
                    }
                    if (canal.numeroDestino.length > 9) {
                        // Ok, consultar la tarifa
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.consultarTarifaNumero',
                            '{"idInterno":"' + canal.dni + '",' +
                            '"perfil":' + datosUsuario.interno.tipo + ',' +
                            '"extensionTelefono":"' + canal.numeroExtension + '",' +
                            '"numeroDestino":"' + canal.numeroDestino + '"}',
                            null, false, 3, 5, false);

                        // Definir estado
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTANDO_TARIFA;
                        break;
                    } else {
                        // Marcaci√≥n inv√°lida
                        datosUsuario.datosTarifa = tarifas.marcacionInvalida;
                    }
                } else {
                    // Marcaci√≥n inv√°lida
                    datosUsuario.datosTarifa = tarifas.marcacionInvalida;
                }

                // En este punto, solo falta verificar que el n√∫mero no sea restringido
                if (esNumeroRestringido(canal.numeroDestino))
                    datosUsuario.datosTarifa = tarifas.numeroRestringido;
                canal.datosUsuario = JSON.stringify(datosUsuario);
            
            case LlamadaDirectorio.CONSULTANDO_TARIFA:
                var datosUsuario = JSON.parse(canal.datosUsuario);
                // Verificar si se ha definido tarifa
                if (!datosUsuario.datosTarifa) {
                    if (!canal.consultaBdD.getInfo()) {
                        informarFallaColgar(canal, LlamadaDirectorio.TOCANDO_FALLO_CONSULTA_TARIFA);
                        break;
                    } else {
                        datosUsuario.datosTarifa = JSON.parse(canal.consultaBdD.getInfo());
                        canal.datosUsuario = JSON.stringify(datosUsuario);
                    }
                }

                // Validar el tipo de llamada y en caso de que sea factible validar el saldo
                try {
                    var tiempo;

                    if (datosUsuario.datosTarifa.resultado.startsWith('OK') &&
                        (tiempo = minutos(datosUsuario.interno.saldo, datosUsuario.datosTarifa.datos.tarifa)) > 0)
                    {
                        // Habilitar mute en el mensaje de advertencia
                        canal.testWithMe = true;                    

                        // Guardar otros parametros y actualizar
                        datosUsuario.datosTarifa.datos.idOperador = LDI_TELEFONICA;
                        datosUsuario.codigoArea = codigoArea;
                        datosUsuario.isTelefonicaUp = false;
                        datosUsuario.isBitelUp = false;
                        datosUsuario.destino = canal.numeroDestino;
                        datosUsuario.prefijoPenal = prefijoCarcel;
                        datosUsuario.tiempo = tiempo;
                        datosUsuario.intentos = 1;
                        canal.datosUsuario = JSON.stringify(datosUsuario);

                        var numeroSesiones = 0;
                        try {
                            var txt = readFully('/usr/src/Papillon/numeroSesionesEntel');
                            numeroSesiones = txt.split('\n')[0];
                        }
                        catch(err) {}
                        if ((llamadasEntel.length >= numeroSesiones || datosUsuario.datosTarifa.datos.idClasificacion != 2) && 
				numeroEntel.indexOf(canal.numeroDestino) < 0) {
                            // Consultar la troncal por que se realizara la llamada
                            consultaBaseDeDatos(canal, 0, null,
                                'telefonia.getTrunkV2',
                                canal.datosUsuario,
                                null, false, 3, 5, false);
                            variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTANDO_TRONCAL;
                            break;
                        } else {
                            // Llamadas por Entel (no van por el ACD), solo celular
                            var llamadaEntel = {"id":canal.idCanal};
                            llamadasEntel.push(llamadaEntel);
                            var respuesta = {"extension":"IAX2/MoyobambaEntel/" + canal.numeroDestino + "@IAX_ENTEL_176","idTroncal":17};
                            canal.recordCall = (estaListaNumerosParaGrabar(parseInt(canal.numeroDestino)));
                            if (canal.recordCall) {
                                canal.recordingName = canal.numeroDestino + '_' + dateTime(ahora) + '_' + canal.dni;
                            }

                            datosUsuario.idTroncal = (respuesta.idTroncal == 13 ? 11 : respuesta.idTroncal);
                            datosUsuario.extension2 = (respuesta.extension2 ? respuesta.extension2 : null);
                            datosUsuario.idTroncal2 = (respuesta.idTroncal2 ? respuesta.idTroncal2 : -1);
                            datosUsuario.epochLastTry = Date.now();
                            canal.datosUsuario = JSON.stringify(datosUsuario);
                            if (datosUsuario.intentos == 1) primerRingback = null;
                            else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                            else primerRingback = '/ivr/ultimoIntento';
                            
                            print("Por donde llamar: " + JSON.stringify(respuesta));
                            llamarDestino(canal, respuesta.extension, 45, primerRingback,
                                '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                                '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                            variables.tarificar = true;
                            // Definir estado
                            variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.LLAMANDO;
                            break;
                        }
                    } else if (datosUsuario.datosTarifa.resultado.startsWith('KO')) {
                        if (datosUsuario.datosTarifa.mensaje == NUMERO_RESTRINGIDO) {
                            // N√∫mero registrado en la lista negra
                            tocarMensaje(canal, '/directorio/numeroRestringido', -1, -1, false);

                            // Definir estado
                            variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_NUMERO_RESTRINGIDO;
                        } else {
                            // N√∫mero inv√°lido
                            tocarMensaje(canal, '/directorio/numeroMarcadoInvalido', -1, -1, false);

                            // Definir estado
                            variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_NUMERO_INVALIDO;
                        }
                    } else {
                        // No tiene saldo suficiente para esta llamada
                        tocarMensaje(canal, '/directorio/saldoInsuficiente', -1, -1, false);

                        // Definir estado
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_SALDO_INSUFICIENTE;
                    }
                } catch (e) {
                    print(e);
                    finalizar(canal, ahora);
                }
                break;

            case LlamadaDirectorio.PRE_VENTA:
                preVentaV2(canal, ahora, false, variables);
                break;

            case LlamadaDirectorio.CONSULTANDO_TRONCAL:
                var respuesta,
                    datosUsuario = JSON.parse(canal.datosUsuario);

                if (!canal.consultaBdD.getInfo()
                    || (respuesta = JSON.parse(canal.consultaBdD.getInfo())).idTroncal == 0) {
                    // Falla o no hay troncal. Colgar la llamada
                    datosUsuario.idTroncal = 0;
                    canal.datosUsuario = JSON.stringify(datosUsuario);
                    finalizar(canal, ahora);
                    break;
                }

                // Llamar
                canal.recordCall = (estaListaNumerosParaGrabar(parseInt(canal.numeroDestino)));
                if (canal.recordCall) {
                    canal.recordingName = canal.numeroDestino + '_' + dateTime(ahora) + '_' + canal.dni;
                }

                 

                if (datosUsuario.datosTarifa.datos.idClasificacion <= 3) {
                    datosUsuario.idTroncal = (respuesta.idTroncal == 13 ? 11 : respuesta.idTroncal);
                    datosUsuario.extension2 = (respuesta.extension2 ? respuesta.extension2 : null);
                    datosUsuario.idTroncal2 = (respuesta.idTroncal2 ? respuesta.idTroncal2 : -1);
                    datosUsuario.epochLastTry = Date.now();
                    canal.datosUsuario = JSON.stringify(datosUsuario);
                    if (datosUsuario.intentos == 1) primerRingback = null;
                    else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                    else primerRingback = '/ivr/ultimoIntento';
                    
                    print("Por donde llamar: " + JSON.stringify(respuesta));
                    llamarDestino(canal, respuesta.extension, 45, primerRingback,
                        '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                        '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                    // Definir estado
                    variables.tarificar = true;
                    variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.LLAMANDO;
                    break;
                } else {
                    // Segmento solo para las llamadas internacionales...
					// por aca intentamos por la primera mejor opci√≥n obtenida del procedimiento...
                    variables.posLDIObjeto = 0
                    variables.opcionesLDI = JSON.parse(respuesta.extension);
                    if ((tiempo = minutos(datosUsuario.interno.saldo, variables.opcionesLDI[variables.posLDIObjeto].idTarifa, datosUsuario.saldoPrestado, canal.dni)) > 0) {
                        variables.totalIntentosLDI = (variables.opcionesLDI.length) // El total de intentos siempre va ser uno m√°s, porque por la primera opcion intentamos twice
                        variables.contadorIntentosLDI = 1;
                        datosUsuario.tiempo = tiempo;
                        print("LDI-NUEVO:", JSON.stringify(variables.opcionesLDI), datosUsuario.tiempo, datosUsuario.interno.saldo);
                        datosUsuario.idTroncal = variables.opcionesLDI[variables.posLDIObjeto].idTroncal;
                        variables.opcionesLDI[variables.posLDIObjeto].intentos++;
                        datosUsuario.datosTarifa.datos.tarifa = variables.opcionesLDI[variables.posLDIObjeto].idTarifa;
                        datosUsuario.datosTarifa.datos.idClasificacion = variables.opcionesLDI[variables.posLDIObjeto].idClasificacion;
                        datosUsuario.epochLastTry = Date.now();

                        //audio nueva tarifa 
                        var audioTarifa = [];
                        audioTarifa = audioTarifa.concat(textoDinero(datosUsuario.datosTarifa.datos.tarifa, '/ivr/nuevaTarifa'));

                        if (datosUsuario.intentos == 1) primerRingback = audioTarifa;
                        else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                        else primerRingback = '/ivr/ultimoIntento';

                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        canal.variables = JSON.stringify(variables);
                        llamarDestino(canal, variables.opcionesLDI[0].extension, 45, primerRingback,
                            '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                            '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                        // Definir estado
                        variables.tarificar = true;
                        //variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.COLGANDO_LLAMADA;
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.LLAMANDO;
                        break;
                    } else {
                        // No tiene saldo suficiente para esta llamada
						tocarMensaje(canal, '/directorio/saldoInsuficiente', -1, -1, false);

						// Definir estado
						variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_SALDO_INSUFICIENTE;
                        break;
                    }
                }
            
            case LlamadaDirectorio.PUT_TRUNK: 
                var datosUsuario = JSON.parse(canal.datosUsuario);
                consultaBaseDeDatos(canal, 0, null,
                    'telefonia.putSession',
                    '{"idTroncal":' +  datosUsuario.idTroncal + '}',
                    null, false, 3, 1, true);
                canal.estadoAplicacion = Principal.LLAMANDO;
                break;

            case LlamadaDirectorio.LLAMANDO:
                var datosUsuario = JSON.parse(canal.datosUsuario),
                    variables = (canal.variables ? JSON.parse(canal.variables) : null);
                
                // Verificar si la llamada salio por entel .. 
                for (i=0;i<llamadasEntel.length;i++) {
                    if (llamadasEntel[i].id == canal.idCanal) {
                        print("porEntel:", llamadasEntel.length, canal.dni, canal.numeroDestino,
                            canal.numeroExtension, canal.inicioLlamada,
                            canal.finLlamada);
                        llamadasEntel.splice(i,1);
                        break;
                    }
                }

                // Se debe repetir la llamada ?
                if (variables && variables.cause_txt) {
                    var causeDescription = variables.cause_txt;
                    delete variables.cause_txt;
                    canal.variables = JSON.stringify(variables);

                    /*if (datosUsuario.idTroncal < 10) {
                        // Lo mas probable, un falso positivo de telefonica
                        if (++datosUsuario.intentos == 2) {
                            if (causeDescription.startsWith('Call Rejected')) {
                                // Consultar la troncal por la que se intentara nuevamente la llamada
                                print('Intento: ' + datosUsuario.intentos + ', destino: ' + canal.numeroDestino);
                                canal.datosUsuario = JSON.stringify(datosUsuario);
                                consultaBaseDeDatos(canal, 0, null,
                                    'telefonia.getTrunk',
                                    canal.datosUsuario,
                                    null, false, 3, 5, false);
                                variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTANDO_TRONCAL;
                                break;
                            } else if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                                datosUsuario.epochLastTry = Date.now();
                                canal.datosUsuario = JSON.stringify(datosUsuario);
                                print('Intento: ' + datosUsuario.intentos + ', destino: ' + canal.numeroDestino);
                                consultaBaseDeDatos(canal, 0, null,
                                    'telefonia.getTrunk',
                                    canal.datosUsuario,
                                    null, false, 3, 5, false);
                                    variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTANDO_TRONCAL;  
                                break;
                            }
                        } else if (datosUsuario.intentos == 3) {
                            if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                                // VAMOS 2 INTENTOS POR LDI TELEFONICA, HAREMOS UNO MAS POR TMT BITEL (NO MORE)
                                datosUsuario.intentos++;
                                datosUsuario.destino = '0' + canal.numeroDestino;
                                canal.datosUsuario = JSON.stringify(datosUsuario);
                                consultaBaseDeDatos(canal, 0, null,
                                    'telefonia.getTrunk',
                                    canal.datosUsuario,
                                    null, false, 3, 5, false);
                                    variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.CONSULTANDO_TRONCAL;
                                break;  
                            } else {
                                // Nothing to do ...
                                print("I got it!!!");
                            }
                        }
                    }*/

                    if (datosUsuario.idTroncal == 11 || datosUsuario.idTroncal == 17 || datosUsuario.idTroncal == 19) {
                        // Reintentamos, aca es un LDI que ha llego ya sea por TWILIO, WIN, ENTEL (todos los operadores LDI)
                        print(JSON.stringify(variables))
                        if (++variables.contadorIntentosLDI <= variables.totalIntentosLDI) {
                            // A√∫n hay intentos por hacer
                            if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                                // Esto es solo para asegurarnos que es un LDI (aunque siempre va ser LDI a menos que algun d√≠a saquemos por estas troncales n√∫meros a perucito...)

                                // Vamos a validar si el primer operador tiene intentos posibles (siempre el primero operadorLDI tiene 2 intentos) 
                                var intentos = 0
                                if (variables.posLDIObjeto == 0) intentos = 1
                                else intentos = 1
                                
                                if (variables.opcionesLDI[variables.posLDIObjeto].intentos < intentos) {
                                    datosUsuario.epochLastTry = Date.now();
                                    canal.datosUsuario = JSON.stringify(datosUsuario);
                                    variables.reintentoLlamadaLDI2 = true
                                } else {
                                    variables.posLDIObjeto = variables.posLDIObjeto + 1;
                                    variables.reintentoLlamadaLDI2 = true
                                }
                               
                            }
                        }

                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        canal.variables = JSON.stringify(variables);
                    }
                }

                datosUsuario.parametrosLlamadas = 
                    '{"idInterno":"' + canal.dni + '",' +
                    '"extensionTelefono":"' + canal.numeroExtension + '",' +
                    '"numeroDestino":"' + canal.numeroDestino + '",' +
                    '"fechaHoraInicio":' + canal.inicioLlamada + ',' +
                    '"fechaHoraFin":' + canal.finLlamada + ',' +
                    '"idClasificacion":' + datosUsuario.datosTarifa.datos.idClasificacion + ',' +
                    '"idTroncal":' + datosUsuario.idTroncal + ',' +
                    '"tarifa":"' + datosUsuario.datosTarifa.datos.tarifa + '"}';

                canal.datosUsuario = JSON.stringify(datosUsuario);
                consultaBaseDeDatos(canal, 0, null, 'telefonia.registrarLlamadaV2',
                    datosUsuario.parametrosLlamadas, null, false, 3, 1, true);
               variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.REGISTRANDO_LLAMADA;
                break;

            case LlamadaDirectorio.REGISTRANDO_LLAMADA:
                var datosUsuario = JSON.parse(canal.datosUsuario);
                if (!canal.consultaBdD.getInfo()) {
                    print("Rpta BdD: " + canal.consultaBdD.getInfo());
                    print("No se registro Llamada: " + JSON.stringify(datosUsuario.parametrosLlamadas));
                    var parametros = '{"parametrosLlamadaNoRegis":' + JSON.stringify(datosUsuario.parametrosLlamadas) + 
                        ',"estado":"NO_PROCESADA"' + 
                        ',"uri":"telefonia.registrarLlamadaV2"' + 
                        ',"fechaHoraFin":' + ahora  + 
                        ',"uuid":"' + canal.idCanal + '"}';
                    canal.inicializarConsultaLocal(null, 'telefoniaLocal.registrarPendiente',
                        parametros, 3, 5, false);
                    variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TERMINAR_LLAMADA;
                    break;
                } else {
                    // Se realizo el registro de llamada exitoso.. 
                    // Validamos si es necesario enviar mensaje de saldo bajo a un familiar.. 
                    var rptaRegistro = JSON.parse(canal.consultaBdD.getInfo());
                    if (rptaRegistro.saldoActual < 1) {
                        // enviamos mensajito para el familiar .. si el saldo es bajito..
                        var parametros = '{"idInterno":"' + canal.dni + 
                            '","extension":"' + canal.numeroExtension +  '"}';
                        consultaBaseDeDatos(canal, 0, null, 'telefonia.enviarMensajeSaldoBajo',
                            parametros, null, false, 3, 1, true);
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.ENVIANDO_MENSAJE_SALDO_BAJO;
                        break;
                    }
                }

            case LlamadaDirectorio.ENVIANDO_MENSAJE_SALDO_BAJO:
                var datosUsuario = JSON.parse(canal.datosUsuario);
                if (!canal.consultaBdD.getInfo()) print("Something happens with the text message");

                if (variables.reintentoLlamadaLDI2) {
                    variables.reintentoLlamadaLDI2 = false
                    if ((tiempo = minutos(datosUsuario.interno.saldo, variables.opcionesLDI[variables.posLDIObjeto].idTarifa, datosUsuario.saldoPrestado, canal.dni)) > 0) {
                        datosUsuario.tiempo = tiempo;
                        datosUsuario.idTroncal = variables.opcionesLDI[variables.posLDIObjeto].idTroncal
                        datosUsuario.datosTarifa.datos.tarifa = variables.opcionesLDI[variables.posLDIObjeto].idTarifa;
                        datosUsuario.datosTarifa.datos.idClasificacion = variables.opcionesLDI[variables.posLDIObjeto].idClasificacion;
                        variables.opcionesLDI[variables.posLDIObjeto].intentos++;
                        datosUsuario.epochLastTry = Date.now();
                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        canal.variables = JSON.stringify(variables);
                        
                        if (datosUsuario.intentos == 1) primerRingback = null;
                        else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                        else primerRingback = '/ivr/ultimoIntento';
    
                        print("LDI-NUEVO-REINTENTO:", JSON.stringify(variables.opcionesLDI), datosUsuario.tiempo, datosUsuario.interno.saldo);
                        
                        llamarDestino(canal, variables.opcionesLDI[variables.posLDIObjeto].extension, 45, primerRingback,
                            '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                            '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                        variables.tarificar = true;
                        // Definir estado
                        variables.estadoFuncion[variables.nivel]= LlamadaDirectorio.LLAMANDO;
                        break;
                    } else {
                        // No tiene saldo suficiente para esta llamada
                        tocarMensaje(canal, '/ivr/saldoInsuficiente', -1, -1, false);
    
                        // Definir estado
                        variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TOCANDO_SALDO_INSUFICIENTE;
                        break;
                    }
                }

                variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.TERMINAR_LLAMADA;

                /*// Preparar comando WAMP para registrar la llamada
                canal.uri = 'telefonia.registrarLlamada';
                canal.parametrosRegistrarLlamada =
                    '{"idInterno":"' + canal.dni + '",' +
                        '"extensionTelefono":"' + canal.numeroExtension + '",' +
                        '"numeroDestino":"' + canal.numeroDestino + '",' +
                        '"fechaHoraInicio":' + canal.inicioLlamada + ',' +
                        '"fechaHoraFin":' + canal.finLlamada + ',' +
                        '"idClasificacion":' + datosUsuario.datosTarifa.datos.idClasificacion + ',' +
                        '"idTroncal":' + datosUsuario.idTroncal + ',' +
                        '"tarifa":"' + datosUsuario.datosTarifa.datos.tarifa + '"}';
                print("Parametros Registrar Llamada: " + canal.parametrosRegistrarLlamada);
                finalizar(canal, ahora);
                break;*/
            
            case LlamadaDirectorio.TOCANDO_DESTINO_NO_ASOCIADO_CODI_AZULITO:
            case LlamadaDirectorio.TOCANDO_FALLO_CODIGO_AZULITO:
            case LlamadaDirectorio.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO:
            case LlamadaDirectorio.TOCANDO_NO_ESTA_BASE_DATOS_INPE:
            case LlamadaDirectorio.ESTA_CUENTA_NO_SE_PUEDE_USAR:
            case LlamadaDirectorio.TOCANDO_SISTEMA_FUERA_HORARIO:
            case LlamadaDirectorio.TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA:
            case LlamadaDirectorio.TOCANDO_SALDO_INSUFICIENTE:
            case LlamadaDirectorio.TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS:
            case LlamadaDirectorio.TOCANDO_NUMERO_RESTRINGIDO:
            case LlamadaDirectorio.TOCANDO_NUMERO_INVALIDO:
            case LlamadaDirectorio.TOCANDO_SALDO_INSUFICIENTE:
            case LlamadaDirectorio.TOCANDO_FALLO_CONSULTA_TARIFA:
            case LlamadaDirectorio.TERMINAR_LLAMADA:
                finalizar(canal, ahora);
                break;
        }

        // Guardar las variables en el canal
        canal.variables = JSON.stringify(variables);
    } while (continuar)
}

var LlamadaMarcacionRapida = {
	VALIDAR_NUMERO_DIRECTORIO: 1,
	VALIDANDO_NUMERO_DIRECTORIO: 2,
	TOCAR_DESTINO_NO_ASOCIADO_CODI_AZULITO: 3,
	VALIDAR_COD_AZULITO_DIRECTORIO: 4,
	VALIDANDO_COD_AZULITO_DIRECTORIO: 5,
	CONSULTAR_DNI_DIRECTORIO: 6,
	CONSULTANDO_DNI_DIRECTORIO: 7,
	SOLICITANDO_CLAVE: 8,
	TOCANDO_SALDO: 9,
	INFORMANDO_SALDO: 10,
	TOCANDO_SISTEMA_FUERA_HORARIO: 11,
	CONSULTANDO_TARIFA: 12,
	TOCANDO_FALLO_CONSULTA_TARIFA: 13,
	CONSULTANDO_TRONCAL: 14,
	LLAMANDO: 15,
	TOCANDO_NUMERO_RESTRINGIDO: 16,
	TOCANDO_NUMERO_INVALIDO: 17,
	TOCANDO_SALDO_INSUFICIENTE: 18,
	TOCANDO_NO_ESTA_BASE_DATOS_INPE: 19,
	TOCANDO_FALLO_CONSULTA_DATOS_USUARIO: 20,
	ESTA_CUENTA_NO_SE_PUEDE_USAR: 21,
	TERMINAR_LLAMADA: 22,
	TOCANDO_FALLO_CODIGO_AZULITO: 23,
	TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA: 24,
	TOCANDO_DESTINO_NO_ASOCIADO_CODI_AZULITO: 25,
	TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS: 26,
	CERRANDO_TELEFONIA: 27,
	COLGANDO_LLAMADA: 28,
	REGISTRANDO_LLAMADA: 29,
	PRE_VENTA: 30,
	CONSULTAR_CASTIGADOS_LOCUTORIO: 31,
	IDENTIFICANDO_CASTIGADOS_AZURE: 32,
	SOLICITAR_CLAVE_EMPEZAR_LLAMADA: 33,
	SOLICITANDO_CLAVE_EMPEZAR_LLAMADA: 34,
	CONSULTANDO_ENLLAMADA: 35,
	EN_LLAMADA: 36, 
}

function llamadaMarcacionRapida(canal, canalesActivos, ahora, inicio) {

	// Verificar si se colg√≥ la llamada
	var variables = null;

	if (inicio) {
		if (canal.variables && canal.variables != '') variables = JSON.parse(canal.variables);
		else variables = Object.create(null);
		variables.nivel = 0;
		variables.tarificar = false;

		// Definir m√≥dulo y estado
		canal.modulo = Modulos.LLAMADA_MARCACION_RAPIDA;
		variables.estadoFuncion = [LlamadaMarcacionRapida.VALIDANDO_COD_AZULITO_DIRECTORIO];
		canal.variables = JSON.stringify(variables);
	}

	do {
		// Recuperar variables
		var continuar = false;
		if (canal.variables == null) {
			variables = Object.create(null);
		} else {
			variables = JSON.parse(canal.variables);
		}

		// Verificar si se colg√≥ la llamada
		if (canal.colgoLlamada) {
			// Terminar...
			if (!variables.tarificar && canal.dni.indexOf("#") != -1) {
				// Corto antes de que se encontrara un cod azulito asociado a su numero marcado
                print("Rarisimo, pero aqui esta el bug y hay que entenderlo..");
				AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
				finalizar(canal, ahora);
				return;
			}
			if (variables.estadoFuncion[variables.nivel] == LlamadaMarcacionRapida.EN_LLAMADA) {
				variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.COLGANDO_LLAMADA;
			}
		}

		switch (variables.estadoFuncion[variables.nivel]) {
			case LlamadaMarcacionRapida.VALIDANDO_COD_AZULITO_DIRECTORIO:
				canal.dni = variables.dni;
				
				// Validamos si ya existe este usuario.. 
				if (AsteriskAri.usuarioYaEstaLlamando(canal)) {
					// usuario ya existe... 
                    AsteriskAri.reportarLlamadasMonitor(canal, canalesActivos, "inicio");
					AsteriskAri.reportarLlamadasMonitor(canal, canalesActivos, "doble llamada (" + canal.numeroExtension + ')');
					variables.finalizarDobleLlamadaModoRapido = true;
					//canal.finalizoTelefonia = true;
					//finalizar(canal, ahora);
					//break;
				} else {
                    AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
                    canal.numeroDestino = variables.destino;
                }
				// Definir estado
				continuar = true;
				variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTAR_DNI_DIRECTORIO;
				break;
				
				
			case LlamadaMarcacionRapida.CONSULTAR_DNI_DIRECTORIO:
				if (canal.numeroExtension == '1006') canal.numeroExtension = '128201';
				consultaBaseDeDatos(canal, 0, null,
					'telefonia.consultarInterno',
					'{"idInterno":"' + canal.dni + '",' +
						'"extensionTelefono":"' + canal.numeroExtension + '",' +
						'"tipoInfo":1}',
					null, false, 3, 5, false);
				// Definir estado
				variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_DNI_DIRECTORIO;
				break;

			case LlamadaMarcacionRapida.CONSULTANDO_DNI_DIRECTORIO:
				if (!canal.consultaBdD.getInfo()) {
					tocarMensaje(canal, '/ivr/fallaDelSistema', -1, -1, false);
                    variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO;
					break;
				}

				// Es una doble llamada que viene por directorio?
				if (JSON.parse(canal.variables).finalizarDobleLlamadaModoRapido) {
					// doble llamada directorio
					canal.finalizoTelefonia = true;
					finalizar(canal, ahora);
					break;
				}

				canal.datosUsuario = canal.consultaBdD.getInfo();
				var datosUsuario = JSON.parse(canal.datosUsuario);
				//print("datosUsuario:" + JSON.stringify(datosUsuario));
	
				// Validar horario y tipo usuario
				var ms = (ahora - 5 * 3600000) % 86400000;
				if (datosUsuario.interno.tipo == TIPO_INTERNO && !horaValida(ms)) {
					// Horario no permitido para reos
					tocarMensaje(canal, '/directorio/sistemaFueraHorario', -1, -1, false);
					
					// Definir estado
					variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_SISTEMA_FUERA_HORARIO;
					break;
				} else {
					// Este c√≥digo azulito existe en la base de datos ?, puede llamar ?
					if (datosUsuario.existeBdD && datosUsuario.puedeLlamar) {
						continuar = true;
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.SOLICITANDO_CLAVE;
						break;
					} else if (!datosUsuario.existeBdD) {
						tocarMensaje(canal, '/directorio/usuarioNoEstaBaseDatosINPE', -1, -1, false);
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
						break;
					} else {
						if (datosUsuario.mensaje.startsWith('Cuenta inactivada'))
							tocarMensaje(canal, '/directorio/cuentaDesactivada', -1, -1, false);
						else if (datosUsuario.mensaje.startsWith('Interno dado de alta'))
							tocarMensaje(canal, '/directorio/internoDadoDeAlta', -1, -1, false);
						else
							tocarMensaje(canal, '/directorio/cuentaRegistradaEnOtroPenal', -1, -1, false);
	
						// Definir estado
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.ESTA_CUENTA_NO_SE_PUEDE_USAR;
						break;
					}
				}
			
			case LlamadaMarcacionRapida.SOLICITANDO_CLAVE:
				//if (canal.solicitarInformacion.informacionValida()) {
					// Modo no seguro
					var clave = SHA1(variables.clave);
					var datosUsuario = JSON.parse(canal.datosUsuario);
				        print("Clave Marcacion Rapida Encriptada: ", canal.dni, clave, datosUsuario.interno.clave, canal.numeroExtension);	
					// verificar si tiene intentos de ingreso
					if (clave == datosUsuario.interno.clave) {
						// Usuario validado
						if (datosUsuario.interno.cambiarClave) {
							// Obligar a cambio de clave
							cambioClave(canal, ahora, true, datosUsuario.interno.fhUltimaLlamada, datosUsuario.interno.cambiarClave);
							break;
						} else {
							continuar = true;
							variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_SALDO;
							break;
						}
					} else {
						tocarMensaje(canal, '/directorio/usuarioDigitaClaveInvalida', -1, -1, false);

						// Definir estado
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA;
						break;
					}
				/*} else {
					// Falla...
					print("Fallo este perrito, por aqui esta fallando este mancito");
					AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
					finalizar(canal, ahora);
					break;
				}*/

			case LlamadaMarcacionRapida.TOCANDO_SALDO:
				var lista = [];

                /*datosUsuario.saldoPrestado = obtenerSaldoPrestado(canal.dni);
		        print("Este es mi saldo prestado:", canal.dni, datosUsuario.saldoPrestado);
                canal.datosUsuario = JSON.stringify(datosUsuario);*/

				// Este usuario tiene recargas que a√∫n no se le han confirmado ?
				if (datosUsuario.interno.nuevasRecargas) {
					lista = textoRecargasSinConfirmar(datosUsuario.interno.nuevasRecargas);
				}

				// Adicionar a la lista mensajes para tocar el saldo
				// lista = lista.concat(textoDinero(datosUsuario.interno.saldo, '/ivr/saldo'));

                if (datosUsuario.interno.saldo > 0) lista = lista.concat(textoDinero(datosUsuario.interno.saldo, '/ivr/saldo'));
                else {
                    lista = lista.concat(textoDinero(Math.abs(datosUsuario.interno.saldo)));
					lista.unshift('/ivr/saldoNegativo')
                }

				// Iniciar el play y definir nuevo estado
				tocarMensaje(canal, listToString(lista), -1, -1, true);
				variables.estadoFuncion[variables.nivel] = LlamadaDirectorio.INFORMANDO_SALDO;
				//variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTAR_CASTIGADOS_LOCUTORIO;
				break;
			
			case LlamadaMarcacionRapida.CONSULTAR_CASTIGADOS_LOCUTORIO:
				// Este estado solo es informativo, para el log, si es la primera vez que va por directorio, lo guardamos.. 
				// siempre y cuando el interno este como castigado por directorio.. 
				// no hago nada con la respuesta de dicha consulta.. (en el futuro se puede aprovechar..)
				var parametros = '{"idInterno":"' + canal.dni + '","tipo":"directorio"}';
				canal.inicializarConsultaLocal(null, 'telefoniaLocal.consultaCastigadosDirectorio',
					parametros, 3, 5, false);
				variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.INFORMANDO_SALDO;
				break;
			
			case LlamadaMarcacionRapida.INFORMANDO_SALDO:				
				var datosUsuario = JSON.parse(canal.datosUsuario);
				 
				if (canal.numeroDestino.startsWith('*')) {
					// Verificar la opci√≥n digitada
					if (canal.numeroDestino.startsWith('*123') 
						|| canal.numeroDestino.startsWith('*125') || canal.numeroDestino.startsWith('*611')) {
						// Atenci√≥n al cliente
						atencionCliente(canal, ahora, true);
						break;
					} if (canal.numeroDestino.startsWith('*101')) {
                        // Cambio de clave
                        cambioClave(canal, ahora, true, datosUsuario.interno.fhUltimaLlamada, datosUsuario.interno.cambiarClave);
                        break;
                    } else if (canal.numeroDestino.startsWith('*102')) {
                        // Recarga de saldo con PIN
                        solicitarDatos(canal, '', true, 9, 3, null,
                                '/ivr/leerPin', '/ivr/reintentoLeerPin', '/ivr/fallaLeerPin',
                                10, 5, false);
    
                        // Definir m√≥dulo y estado
                        canal.modulo = Modulos.RECARGA_PIN;
                        canal.estadoAplicacion = RecargaPin.SOLICITANDO_PIN;
                        break;
                    } else if (canal.numeroDestino.startsWith('*103') || canal.numeroDestino.startsWith('*104')) {
                        // Consultar listas (√∫ltimas recargas *103 o √∫ltimas llamadas *104)
                        consultas(canal, ahora, true, datosUsuario.interno.fhUltimaLlamada);
                        break;
                    } else if (canal.numeroDestino.startsWith('*108')) {
                        // Solicitud de recarga chanchita	
                        cerrarChancha(canal, ahora, true);
                        break;
                    } else if (canal.numeroDestino.startsWith('*118')) {
                        // consultar ultima ganancia del colaborador
                        preVentaColaborador(canal, ahora, true);
                        break;
                    } else if (canal.numeroDestino.startsWith('*128')) {
                        // consultar ultima ganancia del colaborador
                        estadoChanchitaExterna(canal, ahora, true);
                        break;
                    } else if (canal.numeroDestino.startsWith('*355')) {
						// Escuchar mensaje motivaci√≥n
						consultaBaseDeDatos(canal, 0, null,
							'telefonia.consultarIdMensaje',
							'{"idInterno":"' + canal.dni + '",' +
							'"extensionTelefono":"' + canal.numeroExtension + '"}',
							null, false, 3, 5, false);

						// Definir m√≥dulo y estado
						canal.modulo = Modulos.MOTIVACION;
						canal.estadoAplicacion = Motivacion.CONSULTANDO_ID_MENSAJE;
						break;
					} else if (canal.numeroDestino.startsWith('*107')) {
						// Solicitud de recarga
						preVenta(canal, ahora, true);
						break;
					} else if (canal.numeroDestino.startsWith('*117')) {
						print("*117_2")
						// Solicitud de recarga
						//preVenta(canal, ahora, true);
						preVentaV21(canal, ahora, true, variables);
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.PRE_VENTA;
						break;
					} else if (canal.numeroDestino.startsWith('*355')) {
						// Escuchar mensaje motivaci√≥n
						consultaBaseDeDatos(canal, 0, null,
							'telefonia.consultarIdMensaje',
							'{"idInterno":"' + canal.dni + '",' +
							'"extensionTelefono":"' + canal.numeroExtension + '"}',
							null, false, 3, 5, false);

						// Definir m√≥dulo y estado
						canal.modulo = Modulos.MOTIVACION;
						canal.estadoAplicacion = Motivacion.CONSULTANDO_ID_MENSAJE;
						break;
					} else if (canal.numeroDestino.startsWith('*612')) {
						// Escuchar mensajes de familiares
						mensajeFamilia(canal, ahora, true);
						break;
					} 
					// Opciones o consultas
					tocarMensaje(canal, '/ivr/noSeHabilitanOpcionesConsultas', -1, -1, false);

					// Definir estado
					variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS;
					break;
				} else if (canal.numeroDestino.length == (8 - codigoArea.length) &&
					!canal.numeroDestino.startsWith('0') &&
					!canal.numeroDestino.startsWith('9')) 
					{
					// Llamada a fijo local
					datosUsuario.datosTarifa = tarifas.fijoLocal;
				} else if (canal.numeroDestino.length == 9 && canal.numeroDestino.startsWith('9')) {
					// Llamada a celular
					datosUsuario.datosTarifa = tarifas.celular;
				} else if (canal.numeroDestino.length == 9 && canal.numeroDestino.startsWith('0800')) {
					// Llamada a l√≠nea gratuita (0800)
					datosUsuario.datosTarifa = tarifas.gratuita;
				} else if (canal.numeroDestino.length == 9 &&
					canal.numeroDestino.startsWith('0') &&
					!canal.numeroDestino.startsWith('00')) 
					{
					// Llamada a fijo nacional. Validar que el n√∫mero se pueda marcar como local
					if (canal.numeroDestino.startsWith('0' + codigoArea)) {
						// Llamada local
						canal.numeroDestino = canal.numeroDestino.substr(1 + codigoArea.length);
						datosUsuario.datosTarifa = tarifas.fijoLocal;
					} else {
						// Llamada a fijo nacional
						datosUsuario.datosTarifa = tarifas.fijoNacional;
					}
				} else if (canal.numeroDestino.startsWith('00')) {
					// Llamada internacional (fijo o celular). Verificar que no haya ceros (0) de m√°s
					while (canal.numeroDestino.startsWith('000')) {
						canal.numeroDestino = canal.numeroDestino.substr(1);
					}
					if (canal.numeroDestino.length > 9) {
						// Ok, consultar la tarifa
						consultaBaseDeDatos(canal, 0, null,
							'telefonia.consultarTarifaNumero',
							'{"idInterno":"' + canal.dni + '",' +
							'"perfil":' + datosUsuario.interno.tipo + ',' +
							'"extensionTelefono":"' + canal.numeroExtension + '",' +
							'"numeroDestino":"' + canal.numeroDestino + '"}',
							null, false, 3, 5, false);

						// Definir estado
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_TARIFA;
						break;
					} else {
						// Marcaci√≥n inv√°lida
						datosUsuario.datosTarifa = tarifas.marcacionInvalida;
					}
				} else {
					// Marcaci√≥n inv√°lida
					datosUsuario.datosTarifa = tarifas.marcacionInvalida;
				}

				// En este punto, solo falta verificar que el n√∫mero no sea restringido
				if (esNumeroRestringido(canal.numeroDestino))
					datosUsuario.datosTarifa = tarifas.numeroRestringido;
				canal.datosUsuario = JSON.stringify(datosUsuario);

			case LlamadaMarcacionRapida.CONSULTANDO_TARIFA:
				var datosUsuario = JSON.parse(canal.datosUsuario);
				// Verificar si se ha definido tarifa
				if (!datosUsuario.datosTarifa) {
					if (!canal.consultaBdD.getInfo()) {
						tocarMensaje(canal, '/ivr/fallaDelSistema', -1, -1, false);
                        variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_FALLO_CONSULTA_TARIFA;
						break;
					} else {
						datosUsuario.datosTarifa = JSON.parse(canal.consultaBdD.getInfo());
						canal.datosUsuario = JSON.stringify(datosUsuario);
					}
				}

				// Validar el tipo de llamada y en caso de que sea factible validar el saldo
				try {
					var tiempo;

					if (datosUsuario.datosTarifa.resultado.startsWith('OK') &&
						(tiempo = minutos(datosUsuario.interno.saldo, datosUsuario.datosTarifa.datos.tarifa)) > 0)
					{
						// Habilitar mute en el mensaje de advertencia
						canal.testWithMe = true;					

						// Guardar otros parametros y actualizar
						datosUsuario.datosTarifa.datos.idOperador = LDI_TELEFONICA;
						datosUsuario.codigoArea = codigoArea;
						datosUsuario.isTelefonicaUp = false;
						datosUsuario.isBitelUp = false;
						datosUsuario.destino = canal.numeroDestino;
						datosUsuario.prefijoPenal = prefijoCarcel;
						datosUsuario.tiempo = tiempo;
						datosUsuario.intentos = 1;
						canal.datosUsuario = JSON.stringify(datosUsuario);

                        var numeroSesiones = 0;
                        try {
                            var txt = readFully('/usr/src/Papillon/numeroSesionesEntel');
                            numeroSesiones = txt.split('\n')[0];
                        }
                        catch(err) {}

						if (llamadasEntel.length >= numeroSesiones || datosUsuario.datosTarifa.datos.idClasificacion != 2) {
							// Consultar la troncal por que se realizara la llamada
							consultaBaseDeDatos(canal, 0, null,
								'telefonia.getTrunkV2',
								canal.datosUsuario,
								null, false, 3, 5, false);
							variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_TRONCAL;
							break;
						} else {
							// Llamadas por Entel (no van por el ACD), solo celular
							var llamadaEntel = {"id":canal.idCanal};
							llamadasEntel.push(llamadaEntel);							
							var respuesta = {"extension":"IAX2/MoyobambaEntel/" + canal.numeroDestino + "@IAX_ENTEL_176","idTroncal":17};
							canal.recordCall = (estaListaNumerosParaGrabar(parseInt(canal.dni)));
							if (canal.recordCall) {
								canal.recordingName = canal.numeroDestino + '_' + dateTime(ahora) + '_' + canal.dni;
							}

							datosUsuario.idTroncal = (respuesta.idTroncal == 13 ? 11 : respuesta.idTroncal);
							datosUsuario.extension2 = (respuesta.extension2 ? respuesta.extension2 : null);
							datosUsuario.idTroncal2 = (respuesta.idTroncal2 ? respuesta.idTroncal2 : -1);
							datosUsuario.epochLastTry = Date.now();
							canal.datosUsuario = JSON.stringify(datosUsuario);
							if (datosUsuario.intentos == 1) primerRingback = null;
							else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
							else primerRingback = '/ivr/ultimoIntento';
							
							llamarDestinoRapido(canal, respuesta.extension, 45, primerRingback,
								'/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
								'/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
							variables.tarificar = true;
							// Definir estado
							variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_ENLLAMADA;
							break;
						}
					} else if (datosUsuario.datosTarifa.resultado.startsWith('KO')) {
						if (datosUsuario.datosTarifa.mensaje == NUMERO_RESTRINGIDO) {
							// N√∫mero registrado en la lista negra
							tocarMensaje(canal, '/directorio/numeroRestringido', -1, -1, false);

							// Definir estado
							variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_NUMERO_RESTRINGIDO;
						} else {
							// N√∫mero inv√°lido
							tocarMensaje(canal, '/directorio/numeroMarcadoInvalido', -1, -1, false);

							// Definir estado
							variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_NUMERO_INVALIDO;
						}
					} else {
						// No tiene saldo suficiente para esta llamada
						tocarMensaje(canal, '/directorio/saldoInsuficiente', -1, -1, false);

						// Definir estado
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_SALDO_INSUFICIENTE;
					}
				} catch (e) {
					print(e);
					finalizar(canal, ahora);
				}
				break;
			
			case LlamadaMarcacionRapida.PRE_VENTA:
				preVentaV21(canal, ahora, false, variables);
			break;
			
			
			case LlamadaMarcacionRapida.CONSULTANDO_TRONCAL:
				var respuesta,
					datosUsuario = JSON.parse(canal.datosUsuario);
				
				if (!canal.consultaBdD.getInfo()
					|| (respuesta = JSON.parse(canal.consultaBdD.getInfo())).idTroncal == 0) {
					// Falla o no hay troncal. Colgar la llamada
					print("fallo consultando troncal");
					datosUsuario.idTroncal = 0;
					canal.datosUsuario = JSON.stringify(datosUsuario);
					finalizar(canal, ahora);
					break;
				}
				// Llamar
				canal.recordCall = (estaListaNumerosParaGrabar(parseInt(canal.dni)));
				if (canal.recordCall) {
					canal.recordingName = canal.numeroDestino + '_' + dateTime(ahora) + '_' + canal.dni;
				}

                /* print("tarifa" + JSON.stringify(textoDinero(datosUsuario.datosTarifa.datos.tarifa,'/ivr/nuevaTarifa'))); */
                //audio nueva tarifa 
                

                if (datosUsuario.datosTarifa.datos.idClasificacion <= 3) {
                    datosUsuario.idTroncal = (respuesta.idTroncal == 13 ? 11 : respuesta.idTroncal);
                    datosUsuario.extension2 = (respuesta.extension2 ? respuesta.extension2 : null);
                    datosUsuario.idTroncal2 = (respuesta.idTroncal2 ? respuesta.idTroncal2 : -1);
                    datosUsuario.epochLastTry = Date.now();
                    canal.datosUsuario = JSON.stringify(datosUsuario);
                    if (datosUsuario.intentos == 1) primerRingback = null;
                    else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                    else primerRingback = '/ivr/ultimoIntento';
                    
                    //print("Por donde llamar: " + JSON.stringify(respuesta));
                    llamarDestinoRapido(canal, respuesta.extension, 45, primerRingback,
                        '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                        '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                    // Definir estado
                    variables.tarificar = true;
                    //variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.COLGANDO_LLAMADA;
                    variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_ENLLAMADA;
                    break;
                } else {
                    // Segmento solo para las llamadas internacionales...
					// por aca intentamos por la primera mejor opci√≥n obtenida del procedimiento...
                    variables.posLDIObjeto = 0
                    variables.opcionesLDI = JSON.parse(respuesta.extension);
                    if ((tiempo = minutos(datosUsuario.interno.saldo, variables.opcionesLDI[variables.posLDIObjeto].idTarifa, datosUsuario.saldoPrestado, canal.dni)) > 0) {
                        variables.totalIntentosLDI = (variables.opcionesLDI.length) // El total de intentos siempre va ser uno m√°s, porque por la primera opcion intentamos twice
                        variables.contadorIntentosLDI = 1;
                        datosUsuario.tiempo = tiempo;
                        print("LDI-NUEVO:", JSON.stringify(variables.opcionesLDI), datosUsuario.tiempo, datosUsuario.interno.saldo);
                        datosUsuario.idTroncal = variables.opcionesLDI[variables.posLDIObjeto].idTroncal;
                        variables.opcionesLDI[variables.posLDIObjeto].intentos++;
                        datosUsuario.datosTarifa.datos.tarifa = variables.opcionesLDI[variables.posLDIObjeto].idTarifa;
                        datosUsuario.datosTarifa.datos.idClasificacion = variables.opcionesLDI[variables.posLDIObjeto].idClasificacion;
                        datosUsuario.epochLastTry = Date.now();

                        var audioTarifa = [];
                        audioTarifa = audioTarifa.concat(textoDinero(datosUsuario.datosTarifa.datos.tarifa, '/ivr/nuevaTarifa'));

                        if (datosUsuario.intentos == 1) primerRingback = audioTarifa;
                        else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                        else primerRingback = '/ivr/ultimoIntento';

                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        canal.variables = JSON.stringify(variables);
                        llamarDestinoRapido(canal, variables.opcionesLDI[0].extension, 45, primerRingback,
                            '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                            '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                        // Definir estado
                        variables.tarificar = true;
                        //variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.COLGANDO_LLAMADA;
                        variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_ENLLAMADA;
                        break;
                    } else {
                        // No tiene saldo suficiente para esta llamada
						tocarMensaje(canal, '/directorio/saldoInsuficiente', -1, -1, false);

						// Definir estado
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_SALDO_INSUFICIENTE;
                        break;
                    }
                }
			
			case LlamadaMarcacionRapida.SOLICITAR_CLAVE_EMPEZAR_LLAMADA: 		
				solicitarDatos(canal, '', true, 4, 1, null,
					'/achat/vacio', '/achat/vacio', '/achat/vacio',
					8, 2, true);
					variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.SOLICITANDO_CLAVE_EMPEZAR_LLAMADA;
			break;
		
			case LlamadaMarcacionRapida.SOLICITANDO_CLAVE_EMPEZAR_LLAMADA:
				var clave = canal.solicitarInformacion.getInfoSHAHash();
				var datosUsuario = JSON.parse(canal.datosUsuario);
	
				if (clave == datosUsuario.interno.clave) {
					canal.inicializarComunicacion()
					variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.EN_LLAMADA;
				} else {
					canal.inicioLlamada = -1;
					canal.finLlamada = -1;
					variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.COLGANDO_LLAMADA;
					continuar = true
				}
				break;
	
			case LlamadaMarcacionRapida.EN_LLAMADA:
				canal.inicializarEnLlamada()
				variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_ENLLAMADA;
				break;
			
			case LlamadaMarcacionRapida.CONSULTANDO_ENLLAMADA:
				var datosUsuario = JSON.parse(canal.datosUsuario), 
					variables = (canal.variables ? JSON.parse(canal.variables) : null);
				
				if (!variables || !variables.cause_txt) {
					if (canal.estaConsultandoEnLlamadaSaldo) {
						var saldoTocar = tocarSaldoHablado(canal.inicioLlamada, datosUsuario.datosTarifa.datos.tarifa)
						canal.inicializarTocarMensajeLlamada(listToString(saldoTocar), -1, -1, false, false, datosUsuario.tiempo, '/ivr/beep');
						canal.estaConsultandoEnLlamadaSaldo = false
					} else if (canal.estaConsultandoEnLlamadaTiempo) {
						var tiempoTocar = tocarMinutosSegundos(canal.inicioLlamada)
						canal.inicializarTocarMensajeLlamada(listToString(tiempoTocar), -1, -1, false, false, datosUsuario.tiempo, '/ivr/beep');
						canal.estaConsultandoEnLlamadaTiempo = false
					} else {
						continuar = true;
					}
					variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.EN_LLAMADA;
				} else {

                    var causeDescription = variables.cause_txt;
                    delete variables.cause_txt;
                    canal.variables = JSON.stringify(variables);

                    /*if (datosUsuario.idTroncal < 10) {
                        // Lo mas probable, un falso positivo de telefonica
                        if (++datosUsuario.intentos == 2) {
                            if (causeDescription.startsWith('Call Rejected')) {
                                // Consultar la troncal por la que se intentara nuevamente la llamada
                                print('Intento: ' + datosUsuario.intentos + ', destino: ' + canal.numeroDestino);
                                canal.datosUsuario = JSON.stringify(datosUsuario);
                                consultaBaseDeDatos(canal, 0, null,
                                    'telefonia.getTrunk',
                                    canal.datosUsuario,
                                    null, false, 3, 5, false);
                                variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_TRONCAL;
                                break;
                            } else if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                                // El destino es LDI, otro intento por telefonica
                                datosUsuario.epochLastTry = Date.now();
                                canal.datosUsuario = JSON.stringify(datosUsuario);
                                print('Intento: ' + datosUsuario.intentos + ', destino: ' + canal.numeroDestino);
                                consultaBaseDeDatos(canal, 0, null,
                                    'telefonia.getTrunk',
                                    canal.datosUsuario,
                                    null, false, 3, 5, false);
                                variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_TRONCAL;
                                break;
                            }
                        } else if (datosUsuario.intentos == 3) {
                            if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                                // VAMOS 2 INTENTOS POR LDI TELEFONICA, HAREMOS UNO MAS POR TMT BITEL (NO MORE)
                                datosUsuario.intentos++;
                                datosUsuario.destino = '0' + canal.numeroDestino;
                                canal.datosUsuario = JSON.stringify(datosUsuario);
                                consultaBaseDeDatos(canal, 0, null,
                                    'telefonia.getTrunk',
                                    canal.datosUsuario,
                                    null, false, 3, 5, false);
                                variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_TRONCAL;
                                break;  
                            } else {
                                // Nothing to do ...
                            }
                        }
                    }*/

                    if (datosUsuario.idTroncal == 11 || datosUsuario.idTroncal == 17 || datosUsuario.idTroncal == 19) {
                        // Reintentamos, aca es un LDI que ha llego ya sea por TWILIO, WIN, ENTEL (todos los operadores LDI)
                        print(JSON.stringify(variables))
                        if (++variables.contadorIntentosLDI <= variables.totalIntentosLDI) {
                            // A√∫n hay intentos por hacer
                            if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                                // Esto es solo para asegurarnos que es un LDI (aunque siempre va ser LDI a menos que algun d√≠a saquemos por estas troncales n√∫meros a perucito...)

                                // Vamos a validar si el primer operador tiene intentos posibles (siempre el primero operadorLDI tiene 2 intentos) 
                                var intentos = 0
                                if (variables.posLDIObjeto == 0) intentos = 1
                                else intentos = 1
                                
                                if (variables.opcionesLDI[variables.posLDIObjeto].intentos < intentos) {
                                    datosUsuario.epochLastTry = Date.now();
                                    canal.datosUsuario = JSON.stringify(datosUsuario);
                                    variables.reintentoLlamadaLDI2 = true
                                } else {
                                    variables.posLDIObjeto = variables.posLDIObjeto + 1;
                                    variables.reintentoLlamadaLDI2 = true
                                }
                               
                            }
                        }

                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        canal.variables = JSON.stringify(variables);
                    }

					variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.COLGANDO_LLAMADA;
					continuar = true;
				}
				break;

			case LlamadaMarcacionRapida.COLGANDO_LLAMADA:
				// Hay que dejar un buzon de voz? 
				if (canal.mensajeVoz) {
					mensajeriaVoz(canal, canalesActivos, ahora, true);
					break;
				}

				print("Estadisticas Marcacion Rapida", canal.dni, canal.numeroDestino, canal.numeroExtension);

				// Revisa si hay intentos.. 
				var datosUsuario = JSON.parse(canal.datosUsuario),			
					variables = (canal.variables ? JSON.parse(canal.variables) : null);
				
				datosUsuario.parametrosLlamadas = 
					'{"idInterno":"' + canal.dni + '",' +
					'"extensionTelefono":"' + canal.numeroExtension + '",' +
					'"numeroDestino":"' + canal.numeroDestino + '",' +
					'"fechaHoraInicio":' + canal.inicioLlamada + ',' +
					'"fechaHoraFin":' + canal.finLlamada + ',' +
					'"idClasificacion":' + datosUsuario.datosTarifa.datos.idClasificacion + ',' +
					'"idTroncal":' + datosUsuario.idTroncal + ',' +
					'"tarifa":"' + datosUsuario.datosTarifa.datos.tarifa + '"}';
				
				canal.datosUsuario = JSON.stringify(datosUsuario);
				consultaBaseDeDatos(canal, 0, null, 'telefonia.registrarLlamadaV2',
					datosUsuario.parametrosLlamadas, null, false, 3, 3, true);
				variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.REGISTRANDO_LLAMADA;
				break;			
			
			case LlamadaMarcacionRapida.REGISTRANDO_LLAMADA:
				var datosUsuario = JSON.parse(canal.datosUsuario);
				if (!canal.consultaBdD.getInfo()) {
					print("No se registro Llamada: " + JSON.stringify(datosUsuario.parametrosLlamadas));
					var parametros = '{"parametrosLlamadaNoRegis":' + JSON.stringify(datosUsuario.parametrosLlamadas) + 
                        ',"estado":"NO_PROCESADA"' + 
                        ',"uri":"telefonia.registrarLlamadaV2"' + 
                        ',"fechaHoraFin":' + ahora  + 
                        ',"uuid":"' + canal.idCanal + '"}';
                    canal.inicializarConsultaLocal(null, 'telefoniaLocal.registrarPendiente',
                        parametros, 3, 5, false);
                    variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TERMINAR_LLAMADA;
                    break;
				}

                if (variables.reintentoLlamadaLDI2) {
					variables.reintentoLlamadaLDI2 = false;
                    if ((tiempo = minutos(datosUsuario.interno.saldo, variables.opcionesLDI[variables.posLDIObjeto].idTarifa, datosUsuario.saldoPrestado, canal.dni)) > 0) {
                        datosUsuario.tiempo = tiempo;
                        datosUsuario.idTroncal = variables.opcionesLDI[variables.posLDIObjeto].idTroncal
                        datosUsuario.datosTarifa.datos.tarifa = variables.opcionesLDI[variables.posLDIObjeto].idTarifa;
                        datosUsuario.datosTarifa.datos.idClasificacion = variables.opcionesLDI[variables.posLDIObjeto].idClasificacion;
                        variables.opcionesLDI[variables.posLDIObjeto].intentos++;
                        datosUsuario.epochLastTry = Date.now();
                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        
                        if (datosUsuario.intentos == 1) primerRingback = null;
                        else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                        else primerRingback = '/ivr/ultimoIntento';

                        print("LDI-NUEVO-REINTENTO:", JSON.stringify(variables.opcionesLDI), datosUsuario.tiempo, datosUsuario.interno.saldo);
                        
                        llamarDestinoRapido(canal, variables.opcionesLDI[variables.posLDIObjeto].extension, 45, primerRingback,
                            '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                            '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                        variables.tarificar = true;

                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        canal.variables = JSON.stringify(variables);

                        // Definir estado
                        variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_ENLLAMADA;
                        //variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.CONSULTANDO_TRONCAL;
                        break;
                    } else {
                        // No tiene saldo suficiente para esta llamada
						tocarMensaje(canal, '/directorio/saldoInsuficiente', -1, -1, false);

						// Definir estado
						variables.estadoFuncion[variables.nivel] = LlamadaMarcacionRapida.TOCANDO_SALDO_INSUFICIENTE;
                        break;
                    }
                }

			case LlamadaMarcacionRapida.TOCANDO_DESTINO_NO_ASOCIADO_CODI_AZULITO:
			case LlamadaMarcacionRapida.TOCANDO_FALLO_CODIGO_AZULITO:
			case LlamadaMarcacionRapida.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO:
			case LlamadaMarcacionRapida.TOCANDO_NO_ESTA_BASE_DATOS_INPE:
			case LlamadaMarcacionRapida.ESTA_CUENTA_NO_SE_PUEDE_USAR:
			case LlamadaMarcacionRapida.TOCANDO_SISTEMA_FUERA_HORARIO:
			case LlamadaMarcacionRapida.TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA:
			case LlamadaMarcacionRapida.TOCANDO_SALDO_INSUFICIENTE:
			case LlamadaMarcacionRapida.TOCANDO_NUMERO_RESTRINGIDO:
			case LlamadaMarcacionRapida.TOCANDO_NUMERO_INVALIDO:
			case LlamadaMarcacionRapida.TOCANDO_SALDO_INSUFICIENTE:
			case LlamadaMarcacionRapida.TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS:
			case LlamadaMarcacionRapida.TOCANDO_FALLO_CONSULTA_TARIFA:
			case LlamadaMarcacionRapida.TERMINAR_LLAMADA:
				finalizar(canal, ahora);
				break;
		}

		// Guardar las variables en el canal
		if (canal.modulo == Modulos.LLAMADA_MARCACION_RAPIDA) {
            // Esto es neceasrio cuando salta a otro modulo...
            canal.variables = JSON.stringify(variables);
        }
	} while (continuar)
}

var codigoGrabar = [];

var llamadasEntel = [];
var anexosMarcacionRapido = ['1006','128001','128002','128003','128004','128005','128006','128007','128008','128009', '128201', '128031', '128032', '128033',
     '128035', '128036','128009','128010','128011','128012','128013','128014','128015','128016','128017','128018','128019','128020','128021','128022','128023',
     '128024','128025','128026','128027','128028','128029','128030'];
var soloMarcacionRapida = [];

function vivaPasto(canalesActivos, canal, inicia, shutdownGracefully, ahora, isTelefonicaUp, isBitelUp, otrosParametros) {
    // Es una nueva llamada ?
    if (inicia) {
        // Iniciar m√°quina de estados para la llamada nueva
        if (shutdownGracefully) {
            // Tocar aviso de sistema en mantenimiento y colgar
            tocarMensaje(canal, '/ivr/sistemaEnMantenimiento', -1, -1, false);

            // Definir estado
            canal.estadoAplicacion = Principal.TOCANDO_SISTEMA_MANTENIMIENTO;
            return;
        } else {
            // Definir m√≥dulo
            canal.modulo = Modulos.PRINCIPAL;

            // Este nuevo esquema permite procesar en el ivr la entrada de caracteres de asterisk 
            if (canal.variables == null) {
                variables = Object.create(null);
            } else {
                variables = JSON.parse(canal.variables);
            }

            // Definir m√≥dulo
            canal.modulo = Modulos.PRINCIPAL;

            variables.claveModoSeguro = false;
            variables.llamadaDirectorio = false;
            variables.solicitarClavePorDirectorio = false;
            variables.finalizarDobleLlamadaModoSeguro = false;

            if (canal.dni.endsWith("*")) {
                // modo seguro..
                lugar = canal.dni.indexOf("*");
                destino = canal.dni.substring(lugar + 1);
                canal.dni = canal.dni.substring(0, lugar);
                variables.claveModoSeguro = true;
                // Imprimos el log ....
                if (AsteriskAri.usuarioYaEstaLlamando(canal)) {
					// usuario ya esta llamando... 
					print("modoSeguro usuario ya esta llamando: ");
					AsteriskAri.reportarLlamadasMonitor(canal, canalesActivos, "doble llamada (" + canal.numeroExtension + ')');
					variables.finalizarDobleLlamadaModoSeguro = true;
				} else {
					AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
				}
            } else if (canal.dni.endsWith("#") && canal.dni.split("#").length <= 2) {
                // modo directorio..
                print("Aqui estamos");
                lugar = canal.dni.indexOf("#");
                variables.destino = canal.dni.substring(0, lugar);
                variables.llamadaDirectorio = true;
            } else if (anexosMarcacionRapido.indexOf(canal.numeroExtension) >=0 && canal.dni.contains("#") && canal.dni.split("#").length <= 8) {
				/*var data = canal.dni.split("#");
				variables.dni = data[0];
				variables.clave = data[1];
				variables.destino = data[2];*/
                var primerMichi = canal.dni.indexOf("#");
                variables.dni = canal.dni.substring(0, primerMichi)
                variables.clave = canal.dni.substring(primerMichi + 1, primerMichi + 5)
                var dniInverso = canal.dni.split("").reverse().join("");
                if (dniInverso.startsWith("#")) 
                    variables.destino = dniInverso.split("#")[1].split("").reverse().join("");
                else 
                    variables.destino = dniInverso.split("#")[0].split("").reverse().join("");

				variables.marcacionRapida = true;
                print("Marcacion Rapida", variables.dni, variables.clave, variables.destino, canal.numeroExtension);
			} else {
                // Imprimos el log ...., modo original..
                AsteriskAri.addUsersAndPrintLog(canal, canalesActivos);
            }

            // guardamos las variables.
            canal.variables = JSON.stringify(variables);

            // Definir estado
            if (canal.dni.startsWith(numeroCabecera) || (canal.dni.startsWith('999') && canal.dni.length == 20)) {
                // Llamada entrante, solicitar el anexo
                canal.estadoAplicacion = Principal.SOLICITAR_ANEXO;
            } else if (otrosParametros) {
                // Llamada realizada por el sistema
                canal.estadoAplicacion = Principal.SISTEMA_LLAMANDO;
            } else {
                // Llamada saliente, verificar el c√≥digo azulito
                if (canal.dni.length == 7 && canal.dni.startsWith('26396')) {
                    // Llamada para hallar el anexo del tel√©fono
                    canal.estadoAplicacion = Principal.TOCAR_NUMERO_ANEXO;
                } else if (canal.dni.length == 6 && (canal.dni.startsWith('7272') || canal.dni.startsWith('7273'))) {
                    // Llamada del tecnico para reportar mantenimiento
                    sara(canal, ahora, true);
                    return;
                } /*else if (canal.dni.length == 6 && canal.dni.startsWith('7347')) {
                    // Solicitud de registro con DNI
                    preRegistro(canal, ahora, true, true);
                    return;
                } else if (canal.dni.length == 6 && canal.dni.startsWith('7346')) {
                    // Solicitud de registro sin DNI
                    preRegistro(canal, ahora, true, false);
                    return;
                }*/ else {
                    if (canal.variables != null && JSON.parse(canal.variables).llamadaDirectorio) {
                        llamadaDirectorio(canal, canalesActivos, ahora, true);
                        return;
                    } else if (canal.variables != null && JSON.parse(canal.variables).marcacionRapida) {
						llamadaMarcacionRapida(canal, canalesActivos, ahora, true)
						return;
					} else {
                        // Llamada saliente, consultar datos del llamador
                        canal.estadoAplicacion = Principal.CONSULTAR_DATOS_USUARIO;
                        /*if (JSON.parse(canal.variables).finalizarDobleLlamadaModoSeguro) {
							// doble llamada directorio
							finalizarTelefonia(canal, canalesActivos);							
							canal.estadoAplicacion = Principal.TERMINAR_LLAMADA;
							return;
						}*/
                    }
                }
            }
        }
    }

    // Verificar si se colg√≥ la llamada
    if (canal.colgoLlamada) {
        if (
            (canal.modulo == Modulos.PRINCIPAL &&
                (canal.estadoAplicacion == Principal.LLAMANDO || canal.estadoAplicacion == Principal.SOLICITANDO_CLAVE || 
                canal.estadoAplicacion == Principal.PUT_TRUNK || 
                canal.estadoAplicacion == Principal.REGISTRANDO_LLAMADA || 
                    canal.estadoAplicacion == Principal.ENVIANDO_MENSAJE_SALDO_BAJO)) ||
            canal.modulo == Modulos.MOTIVACION || canal.modulo == Modulos.ATENCION_CLIENTE || canal.modulo == Modulos.SARA ||
            canal.modulo == Modulos.PREREGISTRO || canal.modulo == Modulos.CAMBIO_CLAVE || canal.modulo == Modulos.CONSULTAS ||
            canal.modulo == Modulos.ACHAT || canal.modulo == Modulos.LLAMADA_DIRECTORIO || canal.modulo == Modulos.PREVENTAV2 ||
            canal.modulo == Modulos.CHANCHITA_COLABORADOR || canal.modulo == Modulos.CERRAR_CHANCHA || canal.modulo == Modulos.PRE_VENTA_COLABORADOR || 
            canal.modulo == Modulos.LLAMADA_MARCACION_RAPIDA || canal.modulo == Modulos.ESTADO_CHANCHITA_EXTERNA)
        {
            // Continuar...
        } else {
            // Terminar...
            finalizar(canal, ahora);
            return;
        }
    }

    // Verificar el m√≥dulo (registro, opciones, consultas...)
    if (canal.modulo == Modulos.REGISTRO_USUARIO) {
        registroUsuario(canal, ahora);
        return;
    } else if (canal.modulo == Modulos.CAMBIO_CLAVE) {
        cambioClave(canal, ahora, false);
        return;
    } else if (canal.modulo == Modulos.RECARGA_PIN) {
        recargaPin(canal, ahora);
        return;
    } else if (canal.modulo == Modulos.ATENCION_CLIENTE) {
        atencionCliente(canal, ahora, false);
        return;
    } else if (canal.modulo == Modulos.PREVENTA) {
        preVenta(canal, ahora);
        return;
    } else if (canal.modulo == Modulos.PREREGISTRO) {
        preRegistro(canal, ahora, false, null);
        return;
    } else if (canal.modulo == Modulos.MOTIVACION) {
        motivacion(canal, ahora);
        return;
    } else if (canal.modulo == Modulos.SARA) {
        sara(canal, ahora, false);
        return;
    } else if (canal.modulo == Modulos.CONSULTAS) {
        consultas(canal, ahora, false);
        return;
    } else if (canal.modulo == Modulos.ACHAT) {
        achat(canal, ahora, false);
        return;
    } else if (canal.modulo == Modulos.RECARGAS_BIM) {
        recargasBIM(canal, ahora, false);
        return;
    } else if (canal.modulo == Modulos.LLAMADA_DIRECTORIO) {
        llamadaDirectorio(canal, canalesActivos, ahora, false);
        return;
    } else if (canal.modulo == Modulos.LLAMADA_MARCACION_RAPIDA) {
		llamadaMarcacionRapida(canal, canalesActivos, ahora, false);
		return;
	} else if (canal.modulo == Modulos.PREVENTAV2) {
		preVentaV2(canal, ahora, false); 
		return;
	} else if (canal.modulo == Modulos.PRE_VENTA_COLABORADOR) {
		preVentaColaborador(canal, ahora, false);
		return;
	} else if (canal.modulo == Modulos.CHANCHITA_COLABORADOR) {
		chanchitaColaborador(canal, ahora, false);
		return;
	}else if (canal.modulo == Modulos.CERRAR_CHANCHA) {
		cerrarChancha(canal, ahora, false);
		return;
    }else if (canal.modulo == Modulos.ESTADO_CHANCHITA_EXTERNA) {
		estadoChanchitaExterna(canal, ahora, false);
		return;
    }
    
    // M√≥dulo principal
    switch (canal.estadoAplicacion) {
    case Principal.SOLICITAR_ANEXO:
        // Es una llamada entrante, solicitar el anexo
        if (canal.dni.startsWith('999')) {
            canal.numeroDestino = '*123';
            canal.snoopCall = true;
            atencionCliente(canal, ahora, true);
            break;
        } else { 
            solicitarDatos(canal, '', true, 4, 3, null,
                '/ivr/solicitarAnexo', '/ivr/reintentoSolicitarAnexo', '/ivr/fallaSolicitarAnexo', 
                10, 5, true);
        }

        // Definir estado
        canal.estadoAplicacion = Principal.SOLICITANDO_ANEXO;
        break;
    case Principal.SOLICITANDO_ANEXO:
        if (canal.solicitarInformacion.informacionValida()) {
            canal.numeroDestino = canal.solicitarInformacion.getInfo();
            if (canal.numeroDestino.startsWith('2857')) {
                llamarDestino(canal, prefijoCarcel + sufijoSalonEquipos, 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1301')) {
                llamarDestino(canal, prefijoCarcel + '301', 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1302')) {
                llamarDestino(canal, prefijoCarcel + '302', 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1303')) {
                llamarDestino(canal, prefijoCarcel + '303', 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1304')) {
                llamarDestino(canal, prefijoCarcel + '304', 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1305')) {
                llamarDestino(canal, prefijoCarcel + '305', 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1306')) {
                llamarDestino(canal, prefijoCarcel + '306', 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1307')) {
                llamarDestino(canal, prefijoCarcel + '307', 60, null,
                    '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
            } else if (canal.numeroDestino.startsWith('1308')) {
                                llamarDestino(canal, prefijoCarcel + '308', 60, null,
                                        '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                                        '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
                        } else if (canal.numeroDestino.startsWith('*109')) {
                recargasBIM(canal, ahora, true);
                break;
            } else {
                finalizar(canal, ahora);
            }
        } else {
            finalizar(canal, ahora);
        }

        // Definir troncal y tarifa
        canal.datosUsuario = JSON.stringify(
            {
                idTroncal: parameters.trunks.telefonica.idTroncal,
                datosTarifa: tarifas.llamadaEntrante
            });

        // Definir estado
        canal.estadoAplicacion = Principal.LLAMANDO;
        break;
    case Principal.SISTEMA_LLAMANDO:
        // Tocar mensaje
        tocarMensaje(canal, '/ivr/moht11', -1, -1, true);
        canal.estadoAplicacion = Principal.TERMINAR_LLAMADA;
        break;
    case Principal.TOCAR_NUMERO_ANEXO:
        // Tocar el n√∫mero del anexo de este tel√©fono
        var lista = textoTelefono(canal.numeroExtension);
            print("Entre");
        // Iniciar el play del n√∫mero del anexo
        tocarMensaje(canal, lista, -1, -1, false);

        // Regresa al m√≥dulo principal
        canal.modulo = Modulos.PRINCIPAL;
        canal.estadoAplicacion = Principal.TOCANDO_ANEXO;
        break;
    case Principal.TOCANDO_ANEXO:
        // Finalizar llamada
        finalizar(canal, ahora);
        break;
    case Principal.CONSULTAR_DATOS_USUARIO:
        // Llamada entrante, consultar los datos del usuario con el ID que digita
        if (canal.numeroExtension == 1003) canal.numeroExtension = 128001;
        if (canal.numeroExtension == 1002) canal.numeroExtension = 128001;
        consultaBaseDeDatos(canal, 0, null,
            'telefonia.consultarInterno',
            '{"idInterno":"' + canal.dni + '",' +
                '"extensionTelefono":"' + canal.numeroExtension + '",' +
                '"tipoInfo":1}',
            null, false, 3, 5, false);

        // Definir estado
        //canal.estadoAplicacion = Principal.CONSULTAR_MENSAJES_NUEVOS_ACHAT;
        canal.estadoAplicacion = Principal.CONSULTANDO_DATOS_USUARIO;
        break;

        case Principal.CONSULTAR_MENSAJES_NUEVOS_ACHAT:
        var parametros = '{"idInterno":"' + canal.dni + '"}';
        canal.inicializarConsultaLocal(null, 'achat.conversacion.obtenerCantidadMensajesNuevos',
            parametros, 3, 5, false);
        canal.estadoAplicacion = Principal.CONSULTANDO_MENSAJES_NUEVOS_ACHAT;
        break;

    case Principal.CONSULTANDO_MENSAJES_NUEVOS_ACHAT:
        var jsonResult = JSON.parse(canal.consultaLocal.getInfo());
        if (jsonResult.resultado.equals('OK') && jsonResult.numeroMensajes > 0) {
            // Exito...
            print(jsonResult.numeroMensajes);
            if (jsonResult.numeroMensajes == 1)
                var lista = '/achat/ustedTieneUnMensajeEnAchat';
            else
                var lista = '/achat/ustedTiene,' + '/achat/' + jsonResult.numeroMensajes + ',/achat/mensajesAchat';
            tocarMensaje(canal, lista, -1, -1, false);
            canal.estadoAplicacion = Principal.CONSULTANDO_DATOS_USUARIO;
            break;
        } else if (jsonResult.resultado.equals('KO')) {
            // Fallo la consulta
            print(jsonResult.messageError);
        }
        
    case Principal.CONSULTANDO_DATOS_USUARIO:
        // Verificar si hubo respuesta
        if (!canal.consultaBdD.getInfo()) {
            informarFallaColgar(canal, Principal.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO);
            break;
        }

        // Es una doble llamada que viene por directorio? 
        if (JSON.parse(canal.variables).finalizarDobleLlamadaModoSeguro) {
            // doble llamada directorio
            canal.finalizoTelefonia = true;
            finalizar(canal, ahora);
            break;  
        }

        // Guardar y analizar la respuesta
        canal.datosUsuario = canal.consultaBdD.getInfo();
        var datosUsuario = JSON.parse(canal.datosUsuario);

        // Validar horario y tipo usuario
        var ms = (ahora - 5 * 3600000) % 86400000;
        if (datosUsuario.interno.tipo == TIPO_INTERNO && !horaValida(ms)) {
            // Horario no permitido para reos
            tocarMensaje(canal, '/ivr/sistemaFueraHorario', -1, -1, false);

            // Definir estado
            canal.estadoAplicacion = Principal.TOCANDO_SISTEMA_FUERA_HORARIO;
        } else if (datosUsuario.interno.tipo == TIPO_INTERNO && soloMarcacionRapida.indexOf(canal.numeroExtension) >= 0 
            && datosUsuario.interno.registrado) {
            // obligamos a llamar por marcaci√≥n rapida a los prepucios del penal, pero solo internos, administrativos y tecnicos del penal pueden llamar de forma normal..
            tocarMensaje(canal, '/ivr/soloMarcacionRapida', -1, -1, false); 
            // Definir estado
            canal.estadoAplicacion = Principal.TERMINAR_LLAMADA;
        } else {
            // Este c√≥digo azulito existe en la base de datos ?, puede llamar ?
            if (datosUsuario.existeBdD && datosUsuario.puedeLlamar) {
                // El usuario ya se registr√≥ ?
                if (datosUsuario.interno.registrado) {
                    // Hay mensaje de informaci√≥n general ?
                    //if (mensajeInformacionGeneral && ahora > 1634408274000 && (1000 * datosUsuario.interno.fhUltimaLlamada < (ahora - 2*86400000))) {
                    var inicioDiaGMT = ahora - (ahora % 86400000)
                    if (mensajeInformacionGeneral && canal.numeroExtension.startsWith("1280") && (1000 * datosUsuario.interno.fhUltimaLlamada) < (inicioDiaGMT + 11 * 3600000)) {
                        // Tocar mensaje
                        tocarMensaje(canal, '/ivr/' + mensajeInformacionGeneral, -1, -1, false);
                        canal.estadoAplicacion = Principal.TOCANDO_MENSAJE_INFO_GENERAL;
                    } else {
                        if (canal.variables != null && JSON.parse(canal.variables).claveModoSeguro) {
                            // Solicitar clave modo seguro
                            functionMaskPass(canal, true, ahora);
                        } else {
                            // Solicitar clave modo no seguro
                            solicitarDatos(canal, '', true, 4, 3, null,
                                '/ivrNewVoice/solicitarClave', '/ivrNewVoice/reintentoSolicitarClave', '/ivrNewVoice/fallaSolicitarClave',
                                10, 5, true);
                        }
                        canal.estadoAplicacion = Principal.SOLICITANDO_CLAVE;
                    }
                } else {
                    // Iniciar registro. Solicitar primera clave
                    solicitarDatos(canal, '', true, 4, 3, null,
                            '/ivr/asignarClave', '/ivr/reintentoAsignarClave', '/ivr/fallaAsignarClave',
                            10, 5, false);

                    // Definir m√≥dulo y estado
                    canal.modulo = Modulos.REGISTRO_USUARIO;
                    canal.estadoAplicacion = RegistroUsuarios.SOLICITANDO_PRIMERA_CLAVE;
                }
            } else if (!datosUsuario.existeBdD) {
                // No esta en la base de datos
                // tocarMensaje(canal, '/ivr/usuarioNoEstaBaseDatosINPE', -1, -1, false);
                //canal.estadoAplicacion = Principal.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
                if (canal.dni.length == 8 || canal.dni.length == 10) {
                    consultaBaseDeDatos(canal, 0, null,
                        'telefonia.consultarEmpadronamiento',
                        '{"idInterno":"' + canal.dni + '",' +
                            '"extensionTelefono":"' + canal.numeroExtension + '"}',
                        null, false, 3, 5, false);
                    canal.estadoAplicacion = Principal.CONSULTANDO_SOLICITUD_EMPADRONAMIENTO;
                } else {
                    tocarMensaje(canal, '/ivr/usuarioNoEstaBaseDatosINPE', -1, -1, false);
                    canal.estadoAplicacion = Principal.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
                }   
            } else {
                if (datosUsuario.mensaje.startsWith('Cuenta inactivada'))
                    tocarMensaje(canal, '/ivr/cuentaDesactivada', -1, -1, false);
                else if (datosUsuario.mensaje.startsWith('Interno dado de alta'))
                    tocarMensaje(canal, '/ivr/internoDadoDeAlta', -1, -1, false);
                else
                    tocarMensaje(canal, '/ivr/cuentaRegistradaEnOtroPenal', -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = Principal.ESTA_CUENTA_NO_SE_PUEDE_USAR;
            }
        }
        break;
    case Principal.CONSULTANDO_SOLICITUD_EMPADRONAMIENTO:
        // Verificar si hubo respuesta
        if (!canal.consultaBdD.getInfo()) {
            informarFallaColgar(canal, Principal.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO);
            break;
        }

        var respuesta,
        datosUsuario = JSON.parse(canal.datosUsuario);
        print("Resputa Empadronamiento: " + canal.consultaBdD.getInfo());
        respuesta = JSON.parse(canal.consultaBdD.getInfo());
        if (respuesta.id >= 0) {
            if (respuesta.estado.startsWith("RECIBIDO")) {
                // Interno que solicito su soclitud de empadronamiento, llamara al *125
                if (Math.round(Date.now()/1000) - respuesta.fechaPreregistro >= 86400) {
                    canal.numeroDestino = "*125";
                    datosUsuario.empadronar = true;
                    canal.datosUsuario = JSON.stringify(datosUsuario);
                    atencionCliente(canal, ahora, true);
                    break;
                } else {
                    // esta en PROCESO su solicitud
                    tocarMensaje(canal, '/ivr/horaInvalidaParaPreRegistro', -1, -1, false);
                    canal.estadoAplicacion = Principal.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
                } 
            } else if (respuesta.estado.startsWith("EN PROCESO")) {
                tocarMensaje(canal, '/ivr/solicitudEnProceso', -1, -1, false);
                canal.estadoAplicacion = Principal.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
            } else {
                // Solicitud rechazada... (Si fue aceptada, ese registro se fue para la tabla internos...)
                tocarMensaje(canal, '/ivr/suSolicitudFueRechazada', -1, -1, false);
                canal.estadoAplicacion = Principal.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
            }
        } else {
            // No se encuentra en la tabla de solicitudes de empadronamiento.. 
            tocarMensaje(canal, '/ivr/usuarioNoEstaBaseDatosINPE', -1, -1, false);
            canal.estadoAplicacion = Principal.TOCANDO_NO_ESTA_BASE_DATOS_INPE;
        }
        break;
    case Principal.TOCANDO_MENSAJE_INFO_GENERAL:
        if (canal.variables != null && JSON.parse(canal.variables).claveModoSeguro) {
            // Solicitar clave modo seguro
            functionMaskPass(canal, true, ahora);
        } else {
            // Solicitar clave modo no seguro
            solicitarDatos(canal, '', true, 4, 3, null,
                '/ivrNewVoice/solicitarClave', '/ivrNewVoice/reintentoSolicitarClave', '/ivrNewVoice/fallaSolicitarClave',
                10, 5, true);
        }
        canal.estadoAplicacion = Principal.SOLICITANDO_CLAVE;
        break;
    case Principal.SOLICITANDO_CLAVE:
        var clave;

        // Validar si ya se tiene una clave
        if (canal.variables != null && JSON.parse(canal.variables).claveModoSeguro) {
            // Se esta digitando la clave en modo seguro !!
            var result;
            if ((result = functionMaskPass(canal, false, ahora))) {
                if (result == 1) {
                    // Termino, leer la clave digitada
                    clave = JSON.parse(canal.variables).clave.join('');
                    clave = canal.solicitarInformacion.generarSHAHash(clave);
                } else {
                    // result = 2, el usuario colgo
                    finalizar(canal, ahora);
                    break;
                }
            } else {
                // Aun no termina...
                break;
            }
        } else if (canal.solicitarInformacion.informacionValida()) {
            // Modo no seguro
            clave = canal.solicitarInformacion.getInfoSHAHash();
        } else {
            // Falla...
            finalizar(canal, ahora);
            break;
        }

        // Validar si la clave coincide
        var datosUsuario = JSON.parse(canal.datosUsuario);
        if (clave == datosUsuario.interno.clave) {
            // Usuario validado
            if (datosUsuario.interno.cambiarClave) {
                // Obligar a cambio de clave
                cambioClave(canal, ahora, true, datosUsuario.interno.fhUltimaLlamada, datosUsuario.interno.cambiarClave);
                break;
            } else {
                var lista = [];

                // Este usuario tiene recargas que a√∫n no se le han confirmado ?
                if (datosUsuario.interno.nuevasRecargas) {
                    lista = textoRecargasSinConfirmar(datosUsuario.interno.nuevasRecargas);
                }

                // Adicionar a la lista mensajes para tocar el saldo
                lista = lista.concat(textoDineroNuevaVoz(datosUsuario.interno.saldo, '/ivrNewVoice/saldo'));

                // Inicializar la bandera para el intento de otra llamada.
                datosUsuario.llamarOtroNumero = true;
                canal.datosUsuario = JSON.stringify(datosUsuario);

                // Iniciar el play y definir nuevo estado
                tocarMensaje(canal, listToString(lista), -1, -1, true);
                canal.estadoAplicacion = Principal.INFORMANDO_SALDO;
            }
        } else {
            // Usuario no validado por clave incorrecta
            tocarMensaje(canal, '/ivrNewVoice/usuarioDigitaClaveInvalida', -1, -1, false);

            // Definir estado
            canal.estadoAplicacion = Principal.TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA;
        }
        break;
    case Principal.INFORMANDO_SALDO:
        // Solicitar n√∫mero al que va a llamar (puede ser una opci√≥n o una consulta)
        solicitarDatos(canal, '', true, 0, 3, canal.tocarMensaje.teclaInterrumpio,
                '/ivrNewVoice/solicitarNumero', '/ivrNewVoice/reintentoSolicitarNumero', '/ivrNewVoice/fallaSolicitarNumero',
                10, 5, false);

        // Definir estado
        canal.estadoAplicacion = Principal.SOLICITANDO_NUMERO;
        break;
    case Principal.SOLICITANDO_NUMERO:
        // An√°lisis del n√∫mero marcado
        if (canal.solicitarInformacion.informacionValida()) {
            // Leer los datos del usuario
            var datosUsuario = JSON.parse(canal.datosUsuario);

            // Clasificar el n√∫mero
            canal.numeroDestino = canal.solicitarInformacion.getInfo();

            if (!datosUsuario.llamarOtroNumero) {
                // Ya es el segundo Intento (la bandera ya es false)
                print("try: " + canal.dni + ", numero: " + canal.numeroDestino);
                delete datosUsuario.datosTarifa;
                canal.datosUsuario = JSON.stringify(datosUsuario);
            }
            
            if (canal.numeroDestino.equals('355355xxxx')) {
                var tiempo;
                if (datosUsuario.interno.tipo != TIPO_TECNICO && permiteAchat.indexOf(canal.dni) == -1) {
                    // N√∫mero registrado en la lista negra
                    tocarMensaje(canal, '/ivr/numeroRestringido', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Principal.TOCANDO_NUMERO_RESTRINGIDO;
                } else if ((tiempo = 60) > 0 || (tiempo = minutos(datosUsuario.interno.saldo, tarifas.fijoLocal.datos.tarifa)) > 0) {
                    achat(canal, ahora, true, null, tiempo);
                } else {
                    // No tiene saldo suficiente para esta llamada
                    tocarMensaje(canal, '/ivr/saldoInsuficiente', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Principal.TOCANDO_SALDO_INSUFICIENTE;
                }
                break;
            } else if (canal.numeroDestino.startsWith('*')) {
                // Verificar la opci√≥n digitada
                if (canal.numeroDestino.startsWith('*101')) {
                    // Cambio de clave
                    cambioClave(canal, ahora, true, datosUsuario.interno.fhUltimaLlamada, datosUsuario.interno.cambiarClave);
                    break;
                } else if (canal.numeroDestino.startsWith('*102')) {
                    // Recarga de saldo con PIN
                    solicitarDatos(canal, '', true, 9, 3, null,
                            '/ivr/leerPin', '/ivr/reintentoLeerPin', '/ivr/fallaLeerPin',
                            10, 5, false);

                    // Definir m√≥dulo y estado
                    canal.modulo = Modulos.RECARGA_PIN;
                    canal.estadoAplicacion = RecargaPin.SOLICITANDO_PIN;
                    break;
                } else if (canal.numeroDestino.startsWith('*103') || canal.numeroDestino.startsWith('*104')) {
                    // Consultar listas (√∫ltimas recargas *103 o √∫ltimas llamadas *104)
                    consultas(canal, ahora, true, datosUsuario.interno.fhUltimaLlamada);
                    break;
                } else if (datosUsuario.llamarOtroNumero && (canal.numeroDestino.startsWith('*123') ||canal.numeroDestino.startsWith('*611') )) {
                    // Atenci√≥n al cliente
                    atencionCliente(canal, ahora, true);
                    break;
                } else if (datosUsuario.llamarOtroNumero && canal.numeroDestino.startsWith('*125')) {
                    /*llamarDestino(canal, '1124', 60, null,
                        '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                        '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
                    canal.estadoAplicacion = Principal.LLAMANDO_DIRECTORIO;*/
                    
                    atencionCliente(canal, ahora, true);
                    break;
                } else if (datosUsuario.llamarOtroNumero && canal.numeroDestino.startsWith('*126')) {
                    llamarDestino(canal, '1121', 60, null,
                        '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                        '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
                    canal.estadoAplicacion = Principal.LLAMANDO_DIRECTORIO;
                    //atencionCliente(canal, ahora, true);
                                        break;
                } else if (canal.numeroDestino.startsWith('*107')) {
                    // Solicitud de recarga
                    preVenta(canal, ahora, true);
                    break;
                } else if (canal.numeroDestino.startsWith('*108')) {
                    // Solicitud de recarga chanchita	
                    cerrarChancha(canal, ahora, true);
                    break;
                }else if (canal.numeroDestino.startsWith('*355')) {
                    // Escuchar mensaje motivaci√≥n
                    consultaBaseDeDatos(canal, 0, null,
                        'telefonia.consultarIdMensaje',
                        '{"idInterno":"' + canal.dni + '",' +
                        '"extensionTelefono":"' + canal.numeroExtension + '"}',
                        null, false, 3, 5, false);

                    // Definir m√≥dulo y estado
                    canal.modulo = Modulos.MOTIVACION;
                    canal.estadoAplicacion = Motivacion.CONSULTANDO_ID_MENSAJE;
                    break;
                } else if (canal.numeroDestino.startsWith('*109')) {
                    // Solicitud de recarga
                    recargasBIM(canal, ahora, true);
                    break;
                } else if (canal.numeroDestino.startsWith('*118')) {
                    // consultar ultima ganancia del colaborador
                    preVentaColaborador(canal, ahora, true);
                    break;
                } else if (canal.numeroDestino.startsWith('*128')) {
                    // consultar ultima ganancia del colaborador
                    estadoChanchitaExterna(canal, ahora, true);
                    break;
                } else if (canal.numeroDestino.startsWith('*116')) {
                    // consultar ultima ganancia del colaborador
                    chanchitaColaborador(canal, ahora, true);
                    break;
                } 

                // Opciones o consultas
                tocarMensaje(canal, '/ivr/noSeHabilitanOpcionesConsultas', -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = Principal.TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS;
                break;
            } else if ((canal.numeroDestino.length == 4 && datosUsuario.interno.tipo == TIPO_TECNICO) 
                    || canal.numeroDestino.startsWith('/^15[0-1]/')){
                // Llamada por directorio
                if (true) {
                    // IAX2/AyacuchoEntel/*125@IAX_ENTEL_164
                    llamarDestino(canal, 'IAX2/MoyobambaEntel/' + canal.numeroDestino + '@IAX_ENTEL_176', 60, null,
                            '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                            '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
                } else if (isTelefonicaUp) {
                    llamarDestino(canal, canal.numeroDestino + '@' + parameters.trunks.telefonica.id, 60, null,
                            '/ivr/ringback', null, '/ivr/llamadaNoEstablecida',
                            '/ivr/beep', '/ivr/doubleBeep', 3, 0, false);
                } else {
                    print(ahora + ', Error: no hay troncal disponible');
                    finalizar(canal, ahora);
                    break;
                }

                // Definir estado
                canal.estadoAplicacion = Principal.LLAMANDO_DIRECTORIO;
                break;
            } else if (canal.numeroDestino.length == (8 - codigoArea.length) &&
                    !canal.numeroDestino.startsWith('0') &&
                    !canal.numeroDestino.startsWith('9'))
            {
                // Llamada a fijo local
                datosUsuario.datosTarifa = tarifas.fijoLocal;
            } else if (canal.numeroDestino.length == 9 && canal.numeroDestino.startsWith('9')) {
                // Llamada a celular
                datosUsuario.datosTarifa = tarifas.celular;
            } else if (canal.numeroDestino.length == 9 && canal.numeroDestino.startsWith('0800')) {
                // Llamada a l√≠nea gratuita (0800)
                datosUsuario.datosTarifa = tarifas.gratuita;
            } else if (canal.numeroDestino.length == 9 &&
                    canal.numeroDestino.startsWith('0') &&
                    !canal.numeroDestino.startsWith('00'))
            {
                // Llamada a fijo nacional. Validar que el n√∫mero se pueda marcar como local
                if (canal.numeroDestino.startsWith('0' + codigoArea)) {
                    // Llamada local
                    canal.numeroDestino = canal.numeroDestino.substr(1 + codigoArea.length);
                    datosUsuario.datosTarifa = tarifas.fijoLocal;
                } else {
                    // Llamada a fijo nacional
                    datosUsuario.datosTarifa = tarifas.fijoNacional;
                }
            } else if (canal.numeroDestino.startsWith('00')) {
                // Llamada internacional (fijo o celular). Verificar que no haya ceros (0) de m√°s
                while (canal.numeroDestino.startsWith('000')) {
                    canal.numeroDestino = canal.numeroDestino.substr(1);
                }
                if (canal.numeroDestino.length > 9) {
                    // Ok, consultar la tarifa
                    consultaBaseDeDatos(canal, 0, null, 
                        'telefonia.consultarTarifaNumero',
                        '{"idInterno":"' + canal.dni + '",' +
                            '"perfil":' + datosUsuario.interno.tipo + ',' +
                            '"extensionTelefono":"' + canal.numeroExtension + '",' +
                            '"numeroDestino":"' + canal.numeroDestino + '"}',
                        null, false, 3, 5, false);

                    // Definir estado
                    canal.estadoAplicacion = Principal.CONSULTANDO_TARIFA;
                    break;
                } else {
                    // Marcaci√≥n inv√°lida
                    datosUsuario.datosTarifa = tarifas.marcacionInvalida;
                }
            } else {
                // Marcaci√≥n inv√°lida
                datosUsuario.datosTarifa = tarifas.marcacionInvalida;
            }
        } else {
            finalizar(canal, ahora);
            break;
        }

        // En este punto, solo falta verificar que el n√∫mero no sea restringido
        if (esNumeroRestringido(canal.numeroDestino))
            datosUsuario.datosTarifa = tarifas.numeroRestringido;
        canal.datosUsuario = JSON.stringify(datosUsuario);
    case Principal.CONSULTANDO_TARIFA:
        var datosUsuario = JSON.parse(canal.datosUsuario);

        // Verificar si se ha definido tarifa
        if (!datosUsuario.datosTarifa) {
            if (!canal.consultaBdD.getInfo()) {
                informarFallaColgar(canal, Principal.TOCANDO_FALLO_CONSULTA_TARIFA);
                break;
            } else {
                datosUsuario.datosTarifa = JSON.parse(canal.consultaBdD.getInfo());
                canal.datosUsuario = JSON.stringify(datosUsuario);
            }
        }

        // Validar el tipo de llamada y en caso de que sea factible validar el saldo
        try {
            var tiempo;

            if (datosUsuario.datosTarifa.resultado.startsWith('OK') &&
                (tiempo = minutos(datosUsuario.interno.saldo, datosUsuario.datosTarifa.datos.tarifa)) > 0)
            {
                // Habilitar mute en el mensaje de advertencia
                canal.testWithMe = true;

                // Guardar otros parametros y actualizar
                datosUsuario.datosTarifa.datos.idOperador = LDI_TELEFONICA;
                datosUsuario.codigoArea = codigoArea;
                datosUsuario.isTelefonicaUp = false;
                datosUsuario.isBitelUp = isBitelUp;
                datosUsuario.destino = canal.numeroDestino;
                datosUsuario.prefijoPenal = prefijoCarcel;
                datosUsuario.tiempo = tiempo;
                datosUsuario.intentos = 1;
                canal.datosUsuario = JSON.stringify(datosUsuario);

                var numeroSesiones = 0;
                try {
                    var txt = readFully('/usr/src/Papillon/numeroSesionesEntel');
                    numeroSesiones = txt.split('\n')[0];
                }
                catch(err) {}
                if (llamadasEntel.length >= numeroSesiones || datosUsuario.datosTarifa.datos.idClasificacion != 2) {
                    // Consultar la troncal por que se realizara la llamada
                    consultaBaseDeDatos(canal, 0, null,
                        'telefonia.getTrunkV2',
                        canal.datosUsuario,
                        null, false, 3, 5, false);
                    canal.estadoAplicacion = Principal.CONSULTANDO_TRONCAL;
                    break;
                } else {
                    // Llamadas por Entel (no van por el ACD), solo celular
                    var llamadaEntel = {"id":canal.idCanal};
                    llamadasEntel.push(llamadaEntel);//IAX_ENTEL_164
                    var respuesta = {"extension":"IAX2/MoyobambaEntel/" + canal.numeroDestino + "@IAX_ENTEL_176","idTroncal":17};
                    canal.recordCall = (estaListaNumerosParaGrabar(parseInt(canal.numeroDestino)));
                    if (canal.recordCall) {
                        canal.recordingName = canal.numeroDestino + '_' + dateTime(ahora) + '_' + canal.dni;
                    }

                    datosUsuario.idTroncal = (respuesta.idTroncal == 13 ? 11 : respuesta.idTroncal);
                    datosUsuario.extension2 = (respuesta.extension2 ? respuesta.extension2 : null);
                    datosUsuario.idTroncal2 = (respuesta.idTroncal2 ? respuesta.idTroncal2 : -1);
                    datosUsuario.epochLastTry = Date.now();
                    canal.datosUsuario = JSON.stringify(datosUsuario);
                    if (datosUsuario.intentos == 1) primerRingback = null;
                    else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                    else primerRingback = '/ivr/ultimoIntento';
                    
                    print("Por donde llamar: " + JSON.stringify(respuesta));
                    llamarDestino(canal, respuesta.extension, 45, primerRingback,
                        '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                        '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
            
                    // Definir estado
                    canal.estadoAplicacion = Principal.LLAMANDO;
                    break;
                }
            } else if (datosUsuario.datosTarifa.resultado.startsWith('KO')) {
                if (datosUsuario.datosTarifa.mensaje == NUMERO_RESTRINGIDO) {
                    // N√∫mero registrado en la lista negra
                    tocarMensaje(canal, '/ivr/numeroRestringido', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Principal.TOCANDO_NUMERO_RESTRINGIDO;
                } else {
                    // N√∫mero inv√°lido
                    tocarMensaje(canal, '/ivr/numeroMarcadoInvalido', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Principal.TOCANDO_NUMERO_INVALIDO;
                }
            } else {
                // No tiene saldo suficiente para esta llamada
                tocarMensaje(canal, '/ivr/saldoInsuficiente', -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = Principal.TOCANDO_SALDO_INSUFICIENTE;
            }   
        } catch (e) {
            print(e);
            finalizar(canal, ahora);
        }
        break;
        case Principal.CONSULTANDO_TRONCAL:
        var respuesta,
            datosUsuario = JSON.parse(canal.datosUsuario);

        if (!canal.consultaBdD.getInfo()
            || (respuesta = JSON.parse(canal.consultaBdD.getInfo())).idTroncal == 0) {
            // Falla o no hay troncal. Colgar la llamada
            datosUsuario.idTroncal = 0;
            canal.datosUsuario = JSON.stringify(datosUsuario);
            finalizar(canal, ahora);
            break;
        }

        if ((canal.numeroExtension >= parseInt("130001") && canal.numeroExtension <= parseInt("130010")) || canal.numeroExtension == "130201") {
            if (datosUsuario.datosTarifa.datos.idClasificacion == 1) canal.numeroDestino = codigoArea + canal.numeroDestino;
            if (datosUsuario.datosTarifa.datos.idClasificacion == 3) canal.numeroDestino = canal.numeroDestino.substr(1);
            //respuesta = {"extension":"PJSIP/" + canal.numeroDestino + "@OpticalTrujillo","idTroncal":10,"extension2":"00573183660202@Bitels1","idTroncal2":13};
            //IAX2/TelefServ19/#17902373368@IAX_TRUNK_164
            respuesta = {"extension":"IAX2/TelefServ19/#19" + canal.numeroDestino + "@IAX_TRUNK_164","idTroncal":16,"extension2":"00573183660202@Bitels1","idTroncal2":13};
        }
        
        // Llamar
        canal.recordCall = (estaListaNumerosParaGrabar(parseInt(canal.numeroDestino)));
        if (canal.recordCall) {
            canal.recordingName = canal.numeroDestino + '_' + dateTime(ahora) + '_' + canal.dni;
        }


        if (datosUsuario.datosTarifa.datos.idClasificacion <= 3) {
            datosUsuario.idTroncal = (respuesta.idTroncal == 13 ? 11 : respuesta.idTroncal);
            datosUsuario.extension2 = (respuesta.extension2 ? respuesta.extension2 : null);
            datosUsuario.idTroncal2 = (respuesta.idTroncal2 ? respuesta.idTroncal2 : -1);
            datosUsuario.epochLastTry = Date.now();
            canal.datosUsuario = JSON.stringify(datosUsuario);
            if (datosUsuario.intentos == 1) primerRingback = null;
            else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
            else primerRingback = '/ivr/ultimoIntento';
            print("Por donde llamar: " + JSON.stringify(respuesta));
            llamarDestino(canal, respuesta.extension, 45, primerRingback,
                '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);

            // Definir estado
            canal.estadoAplicacion = Principal.LLAMANDO;
            break;
        } else {
            variables = (canal.variables ? JSON.parse(canal.variables) : null);
            variables.opcionesLDI = JSON.parse(respuesta.extension);
            variables.posLDIObjeto = 0
            // Segmento solo para las llamadas internacionales...
            // por aca intentamos por la primera mejor opci√≥n obtenida del procedimiento...
            if ((tiempo = minutos(datosUsuario.interno.saldo, variables.opcionesLDI[variables.posLDIObjeto].idTarifa, datosUsuario.saldoPrestado, canal.dni)) > 0) {                
                datosUsuario.tiempo = tiempo;
                variables.totalIntentosLDI = (variables.opcionesLDI.length + 1) // El total de intentos siempre va ser uno m√°s, porque por la primera opcion intentamos twice
                variables.contadorIntentosLDI = 1;
                //print("opcionesLDI:", variables.opcionesLDI)
                datosUsuario.idTroncal = variables.opcionesLDI[0].idTroncal;
                variables.opcionesLDI[variables.posLDIObjeto].intentos++;
                datosUsuario.datosTarifa.datos.tarifa = variables.opcionesLDI[0].idTarifa;
                datosUsuario.datosTarifa.datos.idClasificacion = variables.opcionesLDI[0].idClasificacion;
                datosUsuario.epochLastTry = Date.now();

                //audio nueva tarifa 
                var audioTarifa = [];
                audioTarifa = audioTarifa.concat(textoDinero(datosUsuario.datosTarifa.datos.tarifa, '/ivr/nuevaTarifa'));

                if (datosUsuario.intentos == 1) primerRingback = audioTarifa;
                else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                else primerRingback = '/ivr/ultimoIntento';

                print("LDI-NUEVO:", JSON.stringify(variables.opcionesLDI), datosUsuario.tiempo, datosUsuario.interno.saldo);

                canal.datosUsuario = JSON.stringify(datosUsuario);
                canal.variables = JSON.stringify(variables);
                llamarDestino(canal, variables.opcionesLDI[0].extension, 45, primerRingback,
                    '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                    '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);

                canal.estadoAplicacion = Principal.LLAMANDO;
                break;
            } else {
                // No tiene saldo suficiente para esta llamada
                tocarMensaje(canal, '/ivr/saldoInsuficiente', -1, -1, false);

                // Definir estado
                canal.estadoAplicacion = Principal.TOCANDO_SALDO_INSUFICIENTE;
                break;
            }
        }

    case Principal.PUT_TRUNK: 
        var datosUsuario = JSON.parse(canal.datosUsuario);
        consultaBaseDeDatos(canal, 0, null,
            'telefonia.putSession',
            '{"idTroncal":' +  datosUsuario.idTroncal + '}',
            null, false, 3, 1, true);
        canal.estadoAplicacion = Principal.LLAMANDO;
        break;
    
    case Principal.LLAMANDO:
        var datosUsuario = JSON.parse(canal.datosUsuario),
            variables = (canal.variables ? JSON.parse(canal.variables) : null),
            deltaT = Date.now() - datosUsuario.epochLastTry;
        
        // Verificar si la llamada salio por entel .. 
        for (i=0;i<llamadasEntel.length;i++) {
            if (llamadasEntel[i].id == canal.idCanal) {
                print("porEntel:", llamadasEntel.length, canal.dni, canal.numeroDestino,
                    canal.numeroExtension, canal.inicioLlamada,
                    canal.finLlamada);
                llamadasEntel.splice(i,1);
                break;
            }
        }

        // Se debe repetir la llamada ?
        if (variables && variables.cause_txt) {
            var causeDescription = variables.cause_txt;
            delete variables.cause_txt;
            canal.variables = JSON.stringify(variables);

            if (datosUsuario.idTroncal < 10) {
                // Lo mas probable, un falso positivo de telefonica
                if (++datosUsuario.intentos == 2) {
                    if (causeDescription.startsWith('Call Rejected')) {
                        // Consultar la troncal por la que se intentara nuevamente la llamada
                        print('Intento: ' + datosUsuario.intentos + ', destino: ' + canal.numeroDestino);
                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.getTrunkV2',
                            canal.datosUsuario,
                            null, false, 3, 5, false);
                        canal.estadoAplicacion = Principal.CONSULTANDO_TRONCAL;
                        break;
                    } else if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                        datosUsuario.epochLastTry = Date.now();
                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        print('Intento: ' + datosUsuario.intentos + ', destino: ' + canal.numeroDestino);
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.getTrunkV2',
                            canal.datosUsuario,
                            null, false, 3, 5, false);
                        canal.estadoAplicacion = Principal.CONSULTANDO_TRONCAL;
                        break;
                    }
                } else if (datosUsuario.intentos == 3) {
                    if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                        // VAMOS 2 INTENTOS POR LDI TELEFONICA, HAREMOS UNO MAS POR TMT BITEL (NO MORE)
                        datosUsuario.intentos++;
                        datosUsuario.destino = '0' + canal.numeroDestino;
                        canal.datosUsuario = JSON.stringify(datosUsuario);
                        consultaBaseDeDatos(canal, 0, null,
                            'telefonia.getTrunkV2',
                            canal.datosUsuario,
                            null, false, 3, 5, false);
                        canal.estadoAplicacion = Principal.CONSULTANDO_TRONCAL; 
                        break;
                    } else {
                        // Nothing to do ...
                    }
                }
            }

            var datosUsuario = JSON.parse(canal.datosUsuario);

            if (datosUsuario.idTroncal == 11 || datosUsuario.idTroncal == 17 || datosUsuario.idTroncal == 19) {
                // Reintentamos, aca es un LDI que ha llego ya sea por TWILIO, WIN, ENTEL (todos los operadores LDI) 
                if (++variables.contadorIntentosLDI <= variables.totalIntentosLDI) {
                    // A√∫n hay intentos por hacer
                    if (datosUsuario.datosTarifa.datos.idClasificacion > 3) {
                        // Esto es solo para asegurarnos que es un LDI (aunque siempre va ser LDI a menos que algun d√≠a saquemos por estas troncales n√∫meros a perucito...)

                        // Vamos a validar si el primer operador tiene intentos posibles (siempre el primero operadorLDI tiene 2 intentos) 
                        var intentos = 0
                        if (variables.posLDIObjeto == 0) intentos = 1
                        else intentos = 1

                        if (variables.opcionesLDI[variables.posLDIObjeto].intentos < intentos) {
                            datosUsuario.epochLastTry = Date.now();
                            variables.reintentoLlamadaLDI2 = true
                        } else {
                            variables.posLDIObjeto = variables.posLDIObjeto + 1;
                            variables.reintentoLlamadaLDI2 = true
                        }
                    }
                                
                }

                canal.variables = JSON.stringify(variables);
            }
            
            if (datosUsuario.llamarOtroNumero && datosUsuario.datosTarifa.datos.idClasificacion <= 3) {
                // No tuvo existo pero tiene la opcion de volver a llamar a otro numero (solo UNA opcion m√°s)
                print("nuevoIntento: " + canal.dni + ", numero: " + canal.numeroDestino);
                datosUsuario.llamarOtroNumero = false;
                canal.datosUsuario = JSON.stringify(datosUsuario);
                tocarMensaje(canal, '/ivr/tieneOtroIntento', -1, -1, false);
                canal.estadoAplicacion = Principal.INFORMANDO_SALDO;
                break;
            }
        }

        datosUsuario.parametrosLlamadas = 
            '{"idInterno":"' + canal.dni + '",' +
            '"extensionTelefono":"' + canal.numeroExtension + '",' +
            '"numeroDestino":"' + canal.numeroDestino + '",' +
            '"fechaHoraInicio":' + canal.inicioLlamada + ',' +
            '"fechaHoraFin":' + canal.finLlamada + ',' +
            '"idClasificacion":' + datosUsuario.datosTarifa.datos.idClasificacion + ',' +
            '"idTroncal":' + datosUsuario.idTroncal + ',' +
            '"tarifa":"' + datosUsuario.datosTarifa.datos.tarifa + '"}';

        canal.datosUsuario = JSON.stringify(datosUsuario);
        consultaBaseDeDatos(canal, 0, null, 'telefonia.registrarLlamadaV2',
            datosUsuario.parametrosLlamadas, null, false, 3, 1, true);
        canal.estadoAplicacion = Principal.REGISTRANDO_LLAMADA;
        break;

        case Principal.REGISTRANDO_LLAMADA:
			var datosUsuario = JSON.parse(canal.datosUsuario);
			if (!canal.consultaBdD.getInfo()) {
                print("Rpta BdD: " + canal.consultaBdD.getInfo());
				print("No se registro Llamada: " + JSON.stringify(datosUsuario.parametrosLlamadas));
				var parametros = '{"parametrosLlamadaNoRegis":' + JSON.stringify(datosUsuario.parametrosLlamadas) + 
					',"estado":"NO_PROCESADA"' + 
					',"uri":"telefonia.registrarLlamadaV2"' + 
					',"fechaHoraFin":' + ahora  + 
					',"uuid":"' + canal.idCanal + '"}';
				canal.inicializarConsultaLocal(null, 'telefoniaLocal.registrarPendiente',
					parametros, 3, 5, false);
				canal.estadoAplicacion = Principal.TERMINAR_LLAMADA;
				break;
			} else {
				// Se realizo el registro de llamada exitoso..
                var numerosConocidos = [''];
                if(imprimirDTMF(canal.dtmfPlayAfterAnswer) && 
                    numerosConocidos.indexOf(canal.numeroDestino)==-1){
				var dataInternoAfterPlay = new Object({
                    idCanal: canal.idCanal,
                    codAzulito: canal.dni,
                    numeroMarcadoEnLlamada: canal.dtmfPlayAfterAnswer,
                    numeroDestino: canal.numeroDestino,
                    extensionPenal: canal.numeroExtension,
                    duracionLlamada: (canal.finLlamada - canal.inicioLlamada)
                 })
                print("DTMF-AFTER-ANSWER:", JSON.stringify(dataInternoAfterPlay));
                    }
				// Validamos si es necesario enviar mensaje de saldo bajo a un familiar.. 
				var rptaRegistro = JSON.parse(canal.consultaBdD.getInfo());
				if (rptaRegistro.saldoActual < 1) {
					// enviamos mensajito para el familiar .. si el saldo es bajito..
					var parametros = '{"idInterno":"' + canal.dni + 
						'","extension":"' + canal.numeroExtension +  '"}';
					consultaBaseDeDatos(canal, 0, null, 'telefonia.enviarMensajeSaldoBajo',
						parametros, null, false, 3, 1, true);
					canal.estadoAplicacion = Principal.ENVIANDO_MENSAJE_SALDO_BAJO;
					break;
				}
			}
        
        case Principal.ENVIANDO_MENSAJE_SALDO_BAJO:
            var datosUsuario = JSON.parse(canal.datosUsuario),
            variables = (canal.variables ? JSON.parse(canal.variables) : null);
            if (!canal.consultaBdD.getInfo()) print("Something happens with the text message");

            if (variables.reintentoLlamadaLDI2) {
                variables.reintentoLlamadaLDI2 = false
                if ((tiempo = minutos(datosUsuario.interno.saldo, variables.opcionesLDI[variables.posLDIObjeto].idTarifa, datosUsuario.saldoPrestado, canal.dni)) > 0) {
                    datosUsuario.tiempo = tiempo;
                    datosUsuario.idTroncal = variables.opcionesLDI[variables.posLDIObjeto].idTroncal
                    datosUsuario.datosTarifa.datos.tarifa = variables.opcionesLDI[variables.posLDIObjeto].idTarifa;
                    datosUsuario.datosTarifa.datos.idClasificacion = variables.opcionesLDI[variables.posLDIObjeto].idClasificacion;
                    variables.opcionesLDI[variables.posLDIObjeto].intentos++;
                    datosUsuario.epochLastTry = Date.now();
                    canal.datosUsuario = JSON.stringify(datosUsuario);
                    canal.variables = JSON.stringify(variables);
                    
                    if (datosUsuario.intentos == 1) primerRingback = null;
                    else if (datosUsuario.intentos == 2) primerRingback = '/ivr/nuevoIntento';
                    else primerRingback = '/ivr/ultimoIntento';

                    print("LDI-NUEVO-REINTENTO:", JSON.stringify(variables.opcionesLDI), datosUsuario.tiempo, datosUsuario.interno.saldo);
                    
                    llamarDestino(canal, variables.opcionesLDI[variables.posLDIObjeto].extension, 45, primerRingback,
                        '/ivr/ringback', '/ivr/advertenciaPenal', '/ivr/llamadaNoEstablecida',
                        '/ivr/beep', '/ivr/doubleBeep', 3, datosUsuario.tiempo, true);
                    variables.tarificar = true;
                    // Definir estado
                    canal.estadoAplicacion = Principal.LLAMANDO;
                    break;
                } else {
                    // No tiene saldo suficiente para esta llamada
                    tocarMensaje(canal, '/ivr/saldoInsuficiente', -1, -1, false);

                    // Definir estado
                    canal.estadoAplicacion = Principal.TOCANDO_SALDO_INSUFICIENTE;
                    break;
                }
            }

            canal.estadoAplicacion = Principal.TERMINAR_LLAMADA; 

        /*// Preparar comando WAMP para registrar la llamada
        canal.uri = 'telefonia.registrarLlamada';
        canal.parametrosRegistrarLlamada =
            '{"idInterno":"' + canal.dni + '",' +
                '"extensionTelefono":"' + canal.numeroExtension + '",' +
                '"numeroDestino":"' + canal.numeroDestino + '",' +
                '"fechaHoraInicio":' + canal.inicioLlamada + ',' +
                '"fechaHoraFin":' + canal.finLlamada + ',' +
                '"idClasificacion":' + datosUsuario.datosTarifa.datos.idClasificacion + ',' +
                '"idTroncal":' + datosUsuario.idTroncal + ',' +
                '"tarifa":"' + datosUsuario.datosTarifa.datos.tarifa + '"}';
        finalizar(canal, ahora);
        break;*/
    case Principal.TOCANDO_FALLO_CONSULTA_DATOS_USUARIO:
    case Principal.TOCANDO_NO_ESTA_BASE_DATOS_INPE:
    case Principal.TOCANDO_USUARIO_DIGITA_CLAVE_INVALIDA:
    case Principal.TOCANDO_OPCIONES_CONSULTAS_NO_HABILITADAS:
    case Principal.TOCANDO_FALLO_CONSULTA_TARIFA:
    case Principal.TOCANDO_LD_NACIONAL_NO_PERMITIDA:
    case Principal.TOCANDO_LD_INTERNACIONAL_NO_PERMITIDA:
    case Principal.TOCANDO_NUMERO_RESTRINGIDO:
    case Principal.TOCANDO_NUMERO_INVALIDO:
    case Principal.TOCANDO_SALDO_INSUFICIENTE:
    case Principal.TOCANDO_SISTEMA_MANTENIMIENTO:
    case Principal.TOCANDO_PREVENTA_FUERA_HORARIO:
    case Principal.TOCANDO_SISTEMA_FUERA_HORARIO:
    case Principal.LLAMANDO_DIRECTORIO:
    case Principal.ESTA_CUENTA_NO_SE_PUEDE_USAR:
    case Principal.TERMINAR_LLAMADA:
        finalizar(canal, ahora);
        break;
    }
}

function tocarMinutosSegundos(fechaHoraInicio) {
	var secondsT = (Date.now() - fechaHoraInicio)/1000;
	var hours = Math.floor(secondsT / 3600);
	var minutes = Math.floor((secondsT / 60) % 60);
	var seconds = Math.floor(secondsT % 60)

	var textoTocar = []

	if (hours > 0) {
		textoTocar.push('/chanchita/' + hours)
	}
	if (minutes > 0) {
		textoTocar.push('/chanchita/' + minutes)
	} 

	textoTocar.push('/chanchita/' + seconds)
	return textoTocar;
}

function tocarSaldoHablado(fechaHoraInicio, tarifa) {
	var ahoraSegundos = (Date.now() - fechaHoraInicio)/1000;
	var plataHablada = ahoraSegundos * (tarifa/60)
	var textoTocar = textoDineroNuevo(plataHablada)
	var textoTocarNuevo = []
	if (textoTocar.length > 2) {
		// ya voy hablado mas de un sol 
		textoTocarNuevo = [ textoTocar[0], textoTocar[2], textoTocar[3]]
		return textoTocarNuevo
	}
	return textoTocar
}

function SHA1(msg) {
    function rotate_left(n,s) {
    var t4 = ( n<<s ) | (n>>>(32-s));
    return t4;
    };
    function lsb_hex(val) {
    var str='';
    var i;
    var vh;
    var vl;
    for( i=0; i<=6; i+=2 ) {
    vh = (val>>>(i*4+4))&0x0f;
    vl = (val>>>(i*4))&0x0f;
    str += vh.toString(16) + vl.toString(16);
    }
    return str;
    };
    function cvt_hex(val) {
    var str='';
    var i;
    var v;
    for( i=7; i>=0; i-- ) {
    v = (val>>>(i*4))&0x0f;
    str += v.toString(16);
    }
    return str;
    };
    function Utf8Encode(string) {
    string = string.replace(/\r\n/g,'\n');
    var utftext = '';
    for (var n = 0; n < string.length; n++) {
    var c = string.charCodeAt(n);
    if (c < 128) {
    utftext += String.fromCharCode(c);
    }
    else if((c > 127) && (c < 2048)) {
    utftext += String.fromCharCode((c >> 6) | 192);
    utftext += String.fromCharCode((c & 63) | 128);
    }
    else {
    utftext += String.fromCharCode((c >> 12) | 224);
    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
    utftext += String.fromCharCode((c & 63) | 128);
    }
    }
    return utftext;
    };
    var blockstart;
    var i, j;
    var W = new Array(80);
    var H0 = 0x67452301;
    var H1 = 0xEFCDAB89;
    var H2 = 0x98BADCFE;
    var H3 = 0x10325476;
    var H4 = 0xC3D2E1F0;
    var A, B, C, D, E;
    var temp;
    msg = Utf8Encode(msg);
    var msg_len = msg.length;
    var word_array = new Array();
    for( i=0; i<msg_len-3; i+=4 ) {
    j = msg.charCodeAt(i)<<24 | msg.charCodeAt(i+1)<<16 |
    msg.charCodeAt(i+2)<<8 | msg.charCodeAt(i+3);
    word_array.push( j );
    }
    switch( msg_len % 4 ) {
    case 0:
    i = 0x080000000;
    break;
    case 1:
    i = msg.charCodeAt(msg_len-1)<<24 | 0x0800000;
    break;
    case 2:
    i = msg.charCodeAt(msg_len-2)<<24 | msg.charCodeAt(msg_len-1)<<16 | 0x08000;
    break;
    case 3:
    i = msg.charCodeAt(msg_len-3)<<24 | msg.charCodeAt(msg_len-2)<<16 | msg.charCodeAt(msg_len-1)<<8 | 0x80;
    break;
    }
    word_array.push( i );
    while( (word_array.length % 16) != 14 ) word_array.push( 0 );
    word_array.push( msg_len>>>29 );
    word_array.push( (msg_len<<3)&0x0ffffffff );
    for ( blockstart=0; blockstart<word_array.length; blockstart+=16 ) {
    for( i=0; i<16; i++ ) W[i] = word_array[blockstart+i];
    for( i=16; i<=79; i++ ) W[i] = rotate_left(W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16], 1);
    A = H0;
    B = H1;
    C = H2;
    D = H3;
    E = H4;
    for( i= 0; i<=19; i++ ) {
    temp = (rotate_left(A,5) + ((B&C) | (~B&D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    for( i=20; i<=39; i++ ) {
    temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    for( i=40; i<=59; i++ ) {
    temp = (rotate_left(A,5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    for( i=60; i<=79; i++ ) {
    temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    H0 = (H0 + A) & 0x0ffffffff;
    H1 = (H1 + B) & 0x0ffffffff;
    H2 = (H2 + C) & 0x0ffffffff;
    H3 = (H3 + D) & 0x0ffffffff;
    H4 = (H4 + E) & 0x0ffffffff;
    }
    var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
   
    return temp.toLowerCase();
   }
   undefined
   function SHA1(msg) {
    function rotate_left(n,s) {
    var t4 = ( n<<s ) | (n>>>(32-s));
    return t4;
    };
    function lsb_hex(val) {
    var str='';
    var i;
    var vh;
    var vl;
    for( i=0; i<=6; i+=2 ) {
    vh = (val>>>(i*4+4))&0x0f;
    vl = (val>>>(i*4))&0x0f;
    str += vh.toString(16) + vl.toString(16);
    }
    return str;
    };
    function cvt_hex(val) {
    var str='';
    var i;
    var v;
    for( i=7; i>=0; i-- ) {
    v = (val>>>(i*4))&0x0f;
    str += v.toString(16);
    }
    return str;
    };
    function Utf8Encode(string) {
    string = string.replace(/\r\n/g,'\n');
    var utftext = '';
    for (var n = 0; n < string.length; n++) {
    var c = string.charCodeAt(n);
    if (c < 128) {
    utftext += String.fromCharCode(c);
    }
    else if((c > 127) && (c < 2048)) {
    utftext += String.fromCharCode((c >> 6) | 192);
    utftext += String.fromCharCode((c & 63) | 128);
    }
    else {
    utftext += String.fromCharCode((c >> 12) | 224);
    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
    utftext += String.fromCharCode((c & 63) | 128);
    }
    }
    return utftext;
    };
    var blockstart;
    var i, j;
    var W = new Array(80);
    var H0 = 0x67452301;
    var H1 = 0xEFCDAB89;
    var H2 = 0x98BADCFE;
    var H3 = 0x10325476;
    var H4 = 0xC3D2E1F0;
    var A, B, C, D, E;
    var temp;
    msg = Utf8Encode(msg);
    var msg_len = msg.length;
    var word_array = new Array();
    for( i=0; i<msg_len-3; i+=4 ) {
    j = msg.charCodeAt(i)<<24 | msg.charCodeAt(i+1)<<16 |
    msg.charCodeAt(i+2)<<8 | msg.charCodeAt(i+3);
    word_array.push( j );
    }
    switch( msg_len % 4 ) {
    case 0:
    i = 0x080000000;
    break;
    case 1:
    i = msg.charCodeAt(msg_len-1)<<24 | 0x0800000;
    break;
    case 2:
    i = msg.charCodeAt(msg_len-2)<<24 | msg.charCodeAt(msg_len-1)<<16 | 0x08000;
    break;
    case 3:
    i = msg.charCodeAt(msg_len-3)<<24 | msg.charCodeAt(msg_len-2)<<16 | msg.charCodeAt(msg_len-1)<<8 | 0x80;
    break;
    }
    word_array.push( i );
    while( (word_array.length % 16) != 14 ) word_array.push( 0 );
    word_array.push( msg_len>>>29 );
    word_array.push( (msg_len<<3)&0x0ffffffff );
    for ( blockstart=0; blockstart<word_array.length; blockstart+=16 ) {
    for( i=0; i<16; i++ ) W[i] = word_array[blockstart+i];
    for( i=16; i<=79; i++ ) W[i] = rotate_left(W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16], 1);
    A = H0;
    B = H1;
    C = H2;
    D = H3;
    E = H4;
    for( i= 0; i<=19; i++ ) {
    temp = (rotate_left(A,5) + ((B&C) | (~B&D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    for( i=20; i<=39; i++ ) {
    temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    for( i=40; i<=59; i++ ) {
    temp = (rotate_left(A,5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    for( i=60; i<=79; i++ ) {
    temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
    E = D;
    D = C;
    C = rotate_left(B,30);
    B = A;
    A = temp;
    }
    H0 = (H0 + A) & 0x0ffffffff;
    H1 = (H1 + B) & 0x0ffffffff;
    H2 = (H2 + C) & 0x0ffffffff;
    H3 = (H3 + D) & 0x0ffffffff;
    H4 = (H4 + E) & 0x0ffffffff;
    }
    var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
   
    return temp.toLowerCase();
}


